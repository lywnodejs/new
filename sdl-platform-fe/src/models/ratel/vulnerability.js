import {
  getVulInfo,
  getUnauditedVul,
  setOmissionStatus,
  updateVul,
  asyncVul
} from '@/services/ratel/vulnerability'
import {
  omissionStatus,
  vulLevel,
  preHandleParam
} from '@/commons/ratel'

export default {

  // 命名空间 required
  namespace: 'ratel_vulnerability',

  // 原始状态，存储数据
  state: {
    vulList: [],
    vulListLength: 0,
    unauditVulList: [],
    unauditVulListLength: 0
  },

  // 处理后状态，处理后的数据
  getters: {},

  // 定义状态如何变化
  mutations: {
    vulList(state, data) {
      state.vulList = data.data_list
      state.vulListLength = data.count
    },
    unauditVulList(state, data) {
      state.unauditVulList = data.data_list
      state.unauditVulListLength = data.count
    }
  },

  // 暴露方法
  actions: {

    // 获取漏洞列表
    async getVulInfo({commit, state}, params) {
      const {data} = await getVulInfo(params)
      for (let i = 0; i < data.data_list.length; i++) {
        data.data_list[i].VulLevel = preHandleParam(data.data_list[i].VulLevel, vulLevel)
        data.data_list[i].OmissionStatus = preHandleParam(data.data_list[i].OmissionStatus, omissionStatus)
      }
      commit('vulList', data)
    },

    // 获取未审计漏洞列表
    async getUnauditedVul({commit, state}, params) {
      const {data} = await getUnauditedVul(params)
      for (let i = 0; i < data.data_list.length; i++) {
        data.data_list[i].VulLevel = preHandleParam(data.data_list[i].VulLevel, vulLevel)
      }
      commit('unauditVulList', data)
    },

    async setOmissionStatus({commit, state}, params) {
      const {data} = await setOmissionStatus(params)
      return data
    },

    async updateVul({commit, state}, params) {
      const {data} = await updateVul(params)
      return data
    },

    async asyncVul({commit, state}, params) {
      const {data} = await asyncVul(params)
      return data
    }
  }
}
