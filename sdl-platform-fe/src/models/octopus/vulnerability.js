import {
  getVulList,
  deleteVul,
  vulMisinformation,
  preSearch,
  check,
  repair,
  push
} from '@/services/octopus/vulnerability'
import {

  // vulType,
  // vulStatus,
  // vulLevel,
  // preHandleParam
} from '@/commons/octopus'

export default {

  // 命名空间 required
  namespace: 'octopus_vulnerability',

  // 原始状态，存储数据
  state: {
    vulList: [],
    vulListLength: 0
  },

  // 处理后状态，处理后的数据
  getters: {},

  // 定义状态如何变化
  mutations: {
    vulList(state, data) {
      state.vulList = data.vul_list
      state.vulListLength = data.count
    }
  },

  // 暴露方法
  actions: {

    // 获取漏洞列表
    async getVulList({commit, state}, params) {
      const {data} = await getVulList(params)

      // for (let i = 0; i < data.vul_list.length; i++) {
      //   data.vul_list[i] = JSON.parse(data.vul_list[i])
      //   data.vul_list[i].type = preHandleParam(data.vul_list[i].type, vulType)
      //   data.vul_list[i].status = preHandleParam(data.vul_list[i].status, vulStatus)
      //   data.vul_list[i].level = preHandleParam(data.vul_list[i].level, vulLevel)
      // }
      commit('vulList', data)
    },

    // 删除漏洞
    async deleteVul({commit, state}, id) {
      const {data} = await deleteVul(id)
      return data
    },

    // 漏洞误报
    async vulMisinformation({commit, state}, params) {
      const {data} = await vulMisinformation(params)
      return data
    },

    async preSearch({commit, state}, params) {
      const {data} = await preSearch(params)
      return data
    },

    async check({commit, state}, params) {
      const data = await check(params)
      return data
    },

    async repair({commit, state}, params) {
      const data = await repair(params)
      return data
    },
    async push({commit, state}, params) {
      const data = await push(params)
      return data
    }
  }
}
