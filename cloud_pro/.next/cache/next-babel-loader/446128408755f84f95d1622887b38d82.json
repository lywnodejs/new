{"ast":null,"code":"import \"antd/lib/table/style\";\nimport _Table from \"antd/lib/table\";\nimport \"antd/lib/space/style\";\nimport _Space from \"antd/lib/space\";\nimport \"antd/lib/badge/style\";\nimport _Badge from \"antd/lib/badge\";\nimport \"antd/lib/message/style\";\nimport _message from \"antd/lib/message\";\nimport \"antd/lib/modal/style\";\nimport _Modal from \"antd/lib/modal\";\nimport \"antd/lib/card/style\";\nimport _Card from \"antd/lib/card\";\nimport \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/select/style\";\nimport _Select from \"antd/lib/select\";\nimport \"antd/lib/input/style\";\nimport _Input from \"antd/lib/input\";\nimport \"antd/lib/form/style\";\nimport _Form from \"antd/lib/form\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Layout } from '~/components/Layout';\nimport React, { useEffect, useState } from 'react';\nimport apiBusiness from '~/api/business';\nimport api from '~/api/authority';\nimport Router from 'next/router';\nimport { SearchOutlined } from '@ant-design/icons';\nimport EditModal from './edit';\nimport { useCookies } from 'react-cookie';\nconst pageParams = {\n  pageNo: 1,\n  pageSize: 10\n};\n\nconst getData = async (params = pageParams) => {\n  try {\n    let {\n      data: {\n        code,\n        data\n      }\n    } = await apiBusiness.getManagerList(params);\n\n    if (code == 0) {\n      return data;\n    }\n\n    return [];\n  } catch (e) {\n    return [];\n  }\n};\n\nconst breadcrumbs = [{\n  text: '业务管理'\n}, {\n  text: '客户经理管理'\n}];\n\nconst Search = props => {\n  const [form] = _Form.useForm();\n\n  const [cookies] = useCookies(['dataScope']);\n  const {\n    0: dataScope,\n    1: setDataScope\n  } = useState(3);\n  useEffect(() => {\n    setDataScope(cookies.dataScope);\n  }, []);\n\n  const onSearch = () => {\n    let params = form.getFieldsValue();\n    Object.keys(params).forEach(key => {\n      if (!params[key]) {\n        delete params[key];\n      }\n    });\n    props.search(params);\n  };\n\n  return __jsx(_Card, {\n    style: {\n      marginBottom: 30\n    }\n  }, __jsx(_Form, {\n    form: form,\n    name: \"search\",\n    layout: \"inline\",\n    initialValues: {\n      status: null,\n      networkId: null\n    }\n  }, __jsx(_Form.Item, {\n    label: \"\",\n    name: \"key\"\n  }, __jsx(_Input, {\n    placeholder: \"\\u5DE5\\u53F7/\\u5BA2\\u6237\\u7ECF\\u7406/\\u7535\\u8BDD\"\n  })), __jsx(_Form.Item, {\n    label: \"\\u72B6\\u6001\",\n    name: \"status\"\n  }, __jsx(_Select, {\n    style: {\n      width: 100\n    }\n  }, __jsx(_Select.Option, {\n    value: null\n  }, \"\\u5168\\u90E8\"), __jsx(_Select.Option, {\n    value: '1'\n  }, \"\\u542F\\u7528\"), __jsx(_Select.Option, {\n    value: '0'\n  }, \"\\u7981\\u7528\"))), dataScope == 3 ? __jsx(_Form.Item, {\n    label: \"\\u6240\\u5C5E\\u7F51\\u70B9\",\n    name: \"networkId\"\n  }, __jsx(_Select, {\n    style: {\n      width: 200\n    }\n  }, __jsx(_Select.Option, {\n    value: null\n  }, \"\\u5168\\u90E8\"), props.branch.map((v, i) => {\n    return __jsx(_Select.Option, {\n      value: v.id,\n      key: v.id\n    }, v.name);\n  }))) : null, __jsx(_Form.Item, null, __jsx(_Button, {\n    type: \"primary\",\n    icon: __jsx(SearchOutlined, null),\n    onClick: onSearch\n  }, \"\\u67E5\\u8BE2\")), __jsx(_Form.Item, null, __jsx(_Button, {\n    type: \"primary\",\n    onClick: props.showAddModal\n  }, \"\\u65B0\\u589E\"))));\n};\n\nfunction body(props) {\n  const {\n    0: data,\n    1: setData\n  } = useState(props.data);\n  const {\n    0: showModal,\n    1: setModal\n  } = useState(false);\n  const {\n    0: showModalData,\n    1: setModalData\n  } = useState(null);\n  const {\n    0: searchParams,\n    1: setSearchParams\n  } = useState({});\n  const {\n    0: branch4search,\n    1: setBranch4search\n  } = useState([]);\n  const {\n    0: networkDepartmentTree,\n    1: setNetworkDepartmentTree\n  } = useState([]);\n  useEffect(() => {\n    getBranch4search();\n    fetchNetworkDepartmentTree();\n  }, []); // 获取网点 部门\n\n  const fetchNetworkDepartmentTree = async () => {\n    try {\n      const {\n        data\n      } = await apiBusiness.getNetworkDepartmentTree();\n\n      if (data.code == 0) {\n        setNetworkDepartmentTree(data.data);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const getBranch4search = async () => {\n    let {\n      data: {\n        code,\n        data\n      }\n    } = await apiBusiness.getBranch4other();\n\n    if (code == 0) {\n      setBranch4search(data || []);\n    } else {\n      setBranch4search([]);\n    }\n  };\n\n  const onSearch = params => {\n    setSearchParams(params);\n    pageParams.pageNo = 1;\n    updateList(_objectSpread(_objectSpread({}, params), pageParams));\n  };\n\n  const onChangePage = (pageNo = pageParams.pageNo) => {\n    pageParams.pageNo = pageNo;\n    updateList(_objectSpread(_objectSpread({}, searchParams), pageParams));\n  };\n\n  const updateList = async params => {\n    let data = await getData(_objectSpread({}, params));\n    setData(data);\n  };\n\n  const deleteItem = i => {\n    _Modal.confirm({\n      content: '确定删除该项数据？',\n      onOk: async () => {\n        let newData = [...data.list];\n        const {\n          data: {\n            code\n          }\n        } = await apiBusiness.deleteManager(newData[i].id);\n\n        if (code == 0) {\n          newData.splice(i, 1);\n          setData(_objectSpread(_objectSpread({}, data), {}, {\n            list: newData\n          }));\n\n          _message.success('删除成功');\n        }\n      }\n    });\n  };\n\n  const changeStatus = async i => {\n    let nData = [...data.list];\n    let status = nData[i].status == 0 ? '1' : '0';\n    let text = nData[i].status == 0 ? '启用' : '禁用';\n\n    _Modal.confirm({\n      content: `确定${text}此客户经理账号？`,\n      onOk: async () => {\n        const {\n          data: {\n            code\n          }\n        } = await apiBusiness.updateManagerStatus({\n          id: nData[i].id,\n          status\n        });\n\n        if (code == 0) {\n          nData[i].status = +status;\n          setData(_objectSpread(_objectSpread({}, data), {}, {\n            list: nData\n          }));\n\n          _message.success('修改成功');\n        }\n      }\n    });\n  };\n\n  const columns = [{\n    title: '工号',\n    dataIndex: 'jobNumber'\n  }, {\n    title: '客户经理',\n    dataIndex: 'name'\n  }, {\n    title: '电话（登录账号）',\n    dataIndex: 'mobile'\n  }, {\n    title: '所属网点',\n    dataIndex: 'branchNetworkName'\n  }, {\n    title: '部门',\n    dataIndex: 'departmentName'\n  }, {\n    title: '状态',\n    dataIndex: 'status',\n    render: (v, r, i) => {\n      const text = v == 0 ? '禁用' : '启用';\n      const color = v == 0 ? 'red' : 'green';\n      return __jsx(_Badge, {\n        color: color,\n        text: text\n      });\n    }\n  }, {\n    title: '操作',\n    render: (v, r, i) => {\n      return __jsx(_Space, null, __jsx(_Button, {\n        type: \"link\",\n        onClick: () => showAddModal(i)\n      }, \"\\u7F16\\u8F91\"), __jsx(_Button, {\n        type: \"link\",\n        onClick: () => changeStatus(i)\n      }, r.status == 1 ? '禁用' : '启用'), __jsx(_Button, {\n        type: \"link\",\n        danger: true,\n        onClick: () => deleteItem(i)\n      }, \"\\u5220\\u9664\"));\n    }\n  }].map(v => {\n    v.align = 'center';\n    return v;\n  });\n\n  const showAddModal = i => {\n    let editData = null;\n\n    if (i > -1) {\n      editData = data.list[i];\n    }\n\n    setModalData(editData);\n    setModal(true);\n  };\n\n  const closeModal = (isSuccess, isUpdateList) => {\n    setModal(false);\n\n    if (isUpdateList) {\n      onChangePage();\n      getBranch();\n    }\n\n    if (isSuccess) {\n      _message.success('编辑成功');\n    }\n  };\n\n  const paginationConfig = {\n    total: data.totalSize,\n    current: pageParams.pageNo,\n    showSizeChanger: false,\n    showQuickJumper: true,\n    defaultPageSize: pageParams.pageSize,\n    showTotal: total => `共 ${total} 条`,\n    onChange: onChangePage\n  };\n  return __jsx(Layout, {\n    breadcrumbs: breadcrumbs\n  }, __jsx(Search, {\n    search: onSearch,\n    branch: branch4search,\n    showAddModal: () => showAddModal(-1)\n  }), __jsx(_Table, {\n    bordered: true,\n    rowKey: \"id\",\n    pagination: paginationConfig,\n    columns: columns,\n    dataSource: data.list || []\n  }), __jsx(EditModal, {\n    show: showModal,\n    data: showModalData,\n    branch: branch4search,\n    departments: [],\n    networkDepartmentTree: networkDepartmentTree,\n    close: closeModal\n  }));\n}\n\nbody.getInitialProps = async () => {\n  let data = await getData();\n  return {\n    data\n  };\n};\n\nexport default body;","map":null,"metadata":{},"sourceType":"module"}