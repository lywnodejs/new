{"ast":null,"code":"import \"antd/lib/config-provider/style\";\nimport _ConfigProvider from \"antd/lib/config-provider\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport axios from 'axios';\nimport zhCN from 'antd/lib/locale/zh_CN';\nimport api from '~/api/product';\nimport { cookies } from '~/utils';\nimport '~/themes/index.less';\nimport { CommonLayout } from '~/components/Layout/Layout';\nimport Login from '~/pages/login';\nexport const Context = React.createContext();\n\nconst Main = ({\n  statusCode,\n  Component,\n  pageProps,\n  isServer\n}) => {\n  if ((statusCode === -8 || statusCode === 1) && isServer) {\n    return __jsx(Login, null);\n  }\n\n  if (pageProps.login) {\n    return __jsx(Component, pageProps);\n  } // if (statusCode > -8 && statusCode < -4 && isServer) {\n  //   return <Error {...{statusCode: STATUSCODE[statusCode]}} />\n  // }\n\n\n  return __jsx(CommonLayout, null, __jsx(Component, pageProps));\n};\n\nfunction App({\n  Component,\n  pageProps,\n  statusCode,\n  isServer,\n  menu\n}) {\n  return __jsx(_ConfigProvider, {\n    locale: zhCN\n  }, __jsx(Context.Provider, {\n    value: {\n      menu\n    }\n  }, __jsx(Main, {\n    Component,\n    pageProps,\n    statusCode,\n    isServer\n  })));\n}\n\nApp.getInitialProps = async appContext => {\n  let statusCode = 0;\n\n  if (appContext.ctx.req !== undefined) {\n    axios.defaults.baseURL = `${appContext.ctx.req.protocol}://${appContext.ctx.req.headers.host}`;\n\n    if (appContext.ctx.req.headers && appContext.ctx.req.headers.cookie) {\n      // console.log('server:', appContext.ctx.req.headers.cookie)\n      const cookie = appContext.ctx.req.headers.cookie.replace('sessionId=undefined;', '');\n      const {\n        sessionId\n      } = cookies(cookie);\n      delete axios.defaults.headers.common['token'];\n\n      if (sessionId !== undefined && sessionId !== 'undefined') {\n        axios.defaults.headers.common['token'] = sessionId;\n      }\n    }\n  } else {\n    delete axios.defaults.baseURL;\n  }\n\n  let pageProps = {}; // let {menu} = await import('~/lib/menu')\n\n  let menu = [];\n\n  try {\n    const {\n      data: {\n        code,\n        data\n      }\n    } = await api.get_menu_list(); // console.log(code, data)\n\n    if (code == 0 && Array.isArray(data)) {\n      menu = data;\n    }\n\n    statusCode = code;\n  } catch (e) {\n    console.log(e);\n    menu = [];\n  }\n\n  if (appContext.Component.getInitialProps) {\n    pageProps = await appContext.Component.getInitialProps(appContext);\n    statusCode = pageProps.code;\n  }\n\n  return {\n    pageProps,\n    menu,\n    statusCode,\n    isServer: appContext.ctx.req !== undefined\n  };\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/liuyawei/Desktop/信用算力/项目/cloud_pro/pages/_app.js"],"names":["React","axios","zhCN","api","cookies","CommonLayout","Login","Context","createContext","Main","statusCode","Component","pageProps","isServer","login","App","menu","getInitialProps","appContext","ctx","req","undefined","defaults","baseURL","protocol","headers","host","cookie","replace","sessionId","common","data","code","get_menu_list","Array","isArray","e","console","log"],"mappings":"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","sourcesContent":["import React from 'react'\nimport axios from 'axios'\nimport {ConfigProvider} from 'antd'\nimport zhCN from 'antd/lib/locale/zh_CN'\nimport api from '~/api/product'\nimport {cookies} from '~/utils'\nimport '~/themes/index.less'\nimport {CommonLayout} from '~/components/Layout/Layout'\nimport Login from '~/pages/login'\n\nexport const Context = React.createContext()\n\nconst Main = ({statusCode, Component, pageProps, isServer}) => {\n  if ((statusCode === -8 || statusCode === 1) && isServer) {\n    return <Login />\n  }\n\n  if (pageProps.login) {\n    return <Component {...pageProps} />\n  }\n\n  // if (statusCode > -8 && statusCode < -4 && isServer) {\n  //   return <Error {...{statusCode: STATUSCODE[statusCode]}} />\n  // }\n\n  return (\n    <CommonLayout>\n      <Component {...pageProps} />\n    </CommonLayout>\n  )\n}\n\nfunction App({Component, pageProps, statusCode, isServer, menu}) {\n  return (\n    <ConfigProvider locale={zhCN}>\n      <Context.Provider value={{menu}}>\n        <Main {...{Component, pageProps, statusCode, isServer}} />\n      </Context.Provider>\n    </ConfigProvider>\n  )\n}\n\nApp.getInitialProps = async (appContext) => {\n  let statusCode = 0\n\n  if (appContext.ctx.req !== undefined) {\n    axios.defaults.baseURL = `${appContext.ctx.req.protocol}://${appContext.ctx.req.headers.host}`\n\n    if (appContext.ctx.req.headers && appContext.ctx.req.headers.cookie) {\n      // console.log('server:', appContext.ctx.req.headers.cookie)\n      const cookie = appContext.ctx.req.headers.cookie.replace(\n        'sessionId=undefined;',\n        '',\n      )\n\n      const {sessionId} = cookies(cookie)\n\n      delete axios.defaults.headers.common['token']\n\n      if (sessionId !== undefined && sessionId !== 'undefined') {\n        axios.defaults.headers.common['token'] = sessionId\n      }\n    }\n  } else {\n    delete axios.defaults.baseURL\n  }\n\n  let pageProps = {}\n  // let {menu} = await import('~/lib/menu')\n  let menu = []\n  try {\n    const {\n      data: {code, data},\n    } = await api.get_menu_list()\n    // console.log(code, data)\n    if (code == 0 && Array.isArray(data)) {\n      menu = data\n    }\n    statusCode = code\n  } catch (e) {\n    console.log(e)\n    menu = []\n  }\n\n  if (appContext.Component.getInitialProps) {\n    pageProps = await appContext.Component.getInitialProps(appContext)\n    statusCode = pageProps.code\n  }\n\n  return {\n    pageProps,\n    menu,\n    statusCode,\n    isServer: appContext.ctx.req !== undefined,\n  }\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}