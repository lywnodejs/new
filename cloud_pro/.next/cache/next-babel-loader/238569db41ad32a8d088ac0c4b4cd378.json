{"ast":null,"code":"import \"antd/lib/table/style\";\nimport _Table from \"antd/lib/table\";\nimport \"antd/lib/space/style\";\nimport _Space from \"antd/lib/space\";\nimport \"antd/lib/message/style\";\nimport _message from \"antd/lib/message\";\nimport \"antd/lib/modal/style\";\nimport _Modal from \"antd/lib/modal\";\nimport \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/input/style\";\nimport _Input from \"antd/lib/input\";\nimport \"antd/lib/form/style\";\nimport _Form from \"antd/lib/form\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Layout } from '~/components/Layout';\nimport React, { useEffect, useState } from 'react';\nimport apiBusiness from '~/api/business';\nimport api from '~/api/authority';\nimport Router from 'next/router';\nimport { SearchOutlined } from '@ant-design/icons';\nimport EditModal from './edit';\nimport { useCookies } from 'react-cookie';\nconst pageParams = {\n  pageNo: 1,\n  pageSize: 10\n};\n\nconst getData = async (params = pageParams) => {\n  try {\n    let {\n      data: {\n        code,\n        data\n      }\n    } = await apiBusiness.getBranchList(params);\n\n    if (code == 0) {\n      return data;\n    }\n\n    return [];\n  } catch (e) {\n    return [];\n  }\n};\n\nconst breadcrumbs = [{\n  text: '客户经理管理'\n}, {\n  text: '网点管理'\n}];\n\nconst Search = props => {\n  const [form] = _Form.useForm();\n\n  const onSearch = () => {\n    props.search(form.getFieldsValue());\n  };\n\n  return __jsx(_Form, {\n    form: form,\n    name: \"search\",\n    style: {\n      marginBottom: 30\n    },\n    layout: \"inline\"\n  }, __jsx(_Form.Item, {\n    name: \"keyName\"\n  }, __jsx(_Input, {\n    placeholder: \"\\u652F\\u884C\\u540D\\u79F0\",\n    style: {\n      width: 250\n    }\n  })), __jsx(_Form.Item, null, __jsx(_Button, {\n    type: \"primary\",\n    icon: __jsx(SearchOutlined, null),\n    onClick: onSearch\n  }, \"\\u67E5\\u8BE2\")), __jsx(_Form.Item, null, __jsx(_Button, {\n    type: \"primary\",\n    onClick: props.showAddModal\n  }, \"\\u65B0\\u589E\")));\n};\n\nfunction body(props) {\n  const {\n    0: data,\n    1: setData\n  } = useState(props.data);\n  const {\n    0: showModal,\n    1: setModal\n  } = useState(false);\n  const {\n    0: showModalData,\n    1: setModalData\n  } = useState(null);\n  const {\n    0: searchParams,\n    1: setSearchParams\n  } = useState({});\n  const {\n    0: departments,\n    1: setDepartments\n  } = useState([]);\n  const [cookies] = useCookies(['name']);\n  useEffect(() => {\n    fetchDepartment();\n    getData();\n  }, []); // 获取部门\n\n  const fetchDepartment = async () => {\n    try {\n      const {\n        data\n      } = await apiBusiness.getDepart4select();\n      console.log(data);\n\n      if (data.code == 0) {\n        setDepartments(data.data);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const onSearch = params => {\n    setSearchParams(params);\n    pageParams.pageNo = 1;\n    updateList(_objectSpread(_objectSpread({}, params), pageParams));\n  };\n\n  const onChangePage = (pageNo = pageParams.pageNo) => {\n    pageParams.pageNo = pageNo;\n    updateList(_objectSpread(_objectSpread({}, searchParams), pageParams));\n  };\n\n  const updateList = async params => {\n    let data = await getData(_objectSpread({}, params));\n    setData(data);\n  };\n\n  const deleteItem = i => {\n    _Modal.confirm({\n      content: '确定删除该项数据？',\n      onOk: async () => {\n        let newData = [...data.list];\n        const {\n          data: {\n            code\n          }\n        } = await apiBusiness.deleteBranch(newData[i].id);\n\n        if (code == 0) {\n          newData.splice(i, 1);\n          setData(_objectSpread(_objectSpread({}, data), {}, {\n            list: newData\n          }));\n\n          _message.success('删除成功');\n        }\n      }\n    });\n  };\n\n  const columns = [{\n    title: '序号',\n    render: (v, r, i) => i + 1\n  }, {\n    title: '支行代码',\n    dataIndex: 'code'\n  }, {\n    title: '支行名称',\n    dataIndex: 'name'\n  }, {\n    title: '部门',\n    dataIndex: 'departmentName'\n  }, {\n    title: '地址',\n    dataIndex: 'address'\n  }, {\n    title: '联系电话',\n    dataIndex: 'mobile'\n  }, {\n    title: '营业时间',\n    render: (v, r) => {\n      return r.startTime + ' - ' + r.endTime;\n    }\n  }, {\n    title: '操作时间',\n    dataIndex: 'updateTime'\n  }, {\n    title: '操作',\n    render: (v, r, i) => {\n      return __jsx(_Space, null, __jsx(_Button, {\n        type: \"link\",\n        onClick: () => showAddModal(i)\n      }, \"\\u7F16\\u8F91\"), __jsx(_Button, {\n        type: \"link\",\n        danger: true,\n        onClick: () => deleteItem(i)\n      }, \"\\u5220\\u9664\"));\n    }\n  }].map(v => {\n    v.align = 'center';\n    return v;\n  });\n\n  const showAddModal = i => {\n    let editData = null;\n\n    if (i > -1) {\n      editData = data.list[i];\n    }\n\n    setModalData(editData);\n    setModal(true);\n  };\n\n  const closeModal = (isSuccess, isUpdateList) => {\n    setModal(false);\n\n    if (isUpdateList) {\n      onChangePage();\n    }\n\n    if (isSuccess) {\n      _message.success('编辑成功');\n    }\n  };\n\n  const paginationConfig = {\n    total: data.totalSize,\n    current: pageParams.pageNo,\n    showSizeChanger: false,\n    showQuickJumper: true,\n    defaultPageSize: pageParams.pageSize,\n    showTotal: total => `共 ${total} 条`,\n    onChange: onChangePage\n  };\n  return __jsx(Layout, {\n    breadcrumbs: breadcrumbs\n  }, __jsx(Search, {\n    search: onSearch,\n    showAddModal: () => showAddModal(-1)\n  }), __jsx(_Table, {\n    bordered: true,\n    rowKey: \"id\",\n    pagination: paginationConfig,\n    columns: columns,\n    dataSource: data.list || []\n  }), __jsx(EditModal, {\n    show: showModal,\n    data: showModalData,\n    departments: departments,\n    close: closeModal\n  }));\n}\n\nbody.getInitialProps = async () => {\n  pageParams.pageNo = 1;\n  let data = await getData();\n  return {\n    data\n  };\n};\n\nexport default body;","map":null,"metadata":{},"sourceType":"module"}