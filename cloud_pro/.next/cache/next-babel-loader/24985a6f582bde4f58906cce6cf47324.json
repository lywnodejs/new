{"ast":null,"code":"import \"antd/lib/tree-select/style\";\nimport _TreeSelect from \"antd/lib/tree-select\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { useEffect, useState } from 'react';\nimport useTransvertMembers from './useTransvertMembers';\nconst {\n  SHOW_PARENT\n} = _TreeSelect;\n\nconst TreeMembers = props => {\n  const {\n    onSetPids,\n    onSetAccountIds,\n    onSetAccountNames,\n    onSetCompanyIds,\n    isTreeCheckable,\n    defaultValue,\n    isCollection\n  } = props;\n  const {\n    0: treeData,\n    1: setTreeData\n  } = useState([]);\n  const {\n    0: value,\n    1: setValue\n  } = useState(undefined);\n  let data = useTransvertMembers();\n  useEffect(() => {\n    async function fetchData() {\n      setTreeData(data);\n\n      if (defaultValue != undefined) {\n        const accountName = findAccountNameById(data[0]);\n        setValue(accountName);\n      }\n    }\n\n    Array.isArray(data) && data.length && fetchData();\n  }, [data, defaultValue]);\n\n  const findAccountNameById = data => {\n    let accountName;\n\n    try {\n      const findAccountNameInAll = data => {\n        if (data.id == defaultValue) {\n          throw data.accountName;\n        }\n\n        if (Array.isArray(data.children) && data.children.length) {\n          for (var i = 0; i < data.children.length; i++) {\n            if (data.children[i].id == defaultValue) {\n              throw data.children[i].accountName;\n            }\n\n            findAccountNameInAll(data.children[i]);\n          }\n        }\n      };\n\n      findAccountNameInAll(data);\n    } catch (res) {\n      accountName = res;\n    }\n\n    return accountName;\n  };\n\n  const onChange = (value, label, extra) => {\n    setValue(value);\n\n    if (isTreeCheckable == false) {\n      if (isCollection) {\n        return onSetAccountIds(value);\n      }\n\n      if (!extra || !extra.triggerNode) {\n        onSetAccountIds('');\n        return;\n      }\n\n      typeof onSetAccountIds === 'function' && onSetAccountIds(extra.triggerNode.props.id);\n      return;\n    }\n\n    const allCheckedNodes = extra.allCheckedNodes;\n\n    if (allCheckedNodes.length) {\n      const commitDatas = {\n        pids: [],\n        accountNames: [],\n        trueNames: [],\n        companyIds: []\n      };\n\n      function tranverseAllCheckedNodes(nodes) {\n        nodes.forEach(one => {\n          console.log(one);\n          const {\n            children\n          } = one.props;\n\n          for (let key in commitDatas) {\n            commitDatas[key].push(one.props[key.slice(0, key.length - 1)]);\n          }\n\n          if (children.length) {\n            tranverseAllCheckedNodes(children);\n          }\n        });\n      }\n\n      tranverseAllCheckedNodes(allCheckedNodes);\n      console.log(commitDatas); // return\n\n      const {\n        pids,\n        accountNames,\n        trueNames,\n        companyIds\n      } = commitDatas;\n      typeof onSetPids === 'function' && onSetPids(pids);\n      typeof onSetAccountIds === 'function' && onSetAccountIds(accountNames);\n      typeof onSetAccountNames === 'function' && onSetAccountNames(trueNames);\n      typeof onSetCompanyIds === 'function' && onSetCompanyIds(companyIds);\n    }\n  };\n\n  const tProps = {\n    treeData,\n    allowClear: true,\n    value: value,\n    onChange: onChange,\n    treeCheckable: isTreeCheckable != undefined ? isTreeCheckable : true,\n    treeCheckStrictly: isTreeCheckable != undefined ? isTreeCheckable : true,\n    treeDefaultExpandAll: true,\n    showArrow: true,\n    showCheckedStrategy: SHOW_PARENT,\n    placeholder: '请选择',\n    style: {\n      width: 150\n    },\n    dropdownStyle: {\n      // width: 'auto',\n      minWidth: 320\n    }\n  };\n  return __jsx(_TreeSelect, tProps);\n};\n\nexport default TreeMembers;","map":null,"metadata":{},"sourceType":"module"}