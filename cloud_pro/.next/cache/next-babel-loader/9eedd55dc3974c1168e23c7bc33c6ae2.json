{"ast":null,"code":"import \"antd/lib/table/style\";\nimport _Table from \"antd/lib/table\";\nimport \"antd/lib/space/style\";\nimport _Space from \"antd/lib/space\";\nimport \"antd/lib/badge/style\";\nimport _Badge from \"antd/lib/badge\";\nimport \"antd/lib/modal/style\";\nimport _Modal from \"antd/lib/modal\";\nimport \"antd/lib/card/style\";\nimport _Card from \"antd/lib/card\";\nimport \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/select/style\";\nimport _Select from \"antd/lib/select\";\nimport \"antd/lib/input/style\";\nimport _Input from \"antd/lib/input\";\nimport \"antd/lib/form/style\";\nimport _Form from \"antd/lib/form\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Layout } from '~/components/Layout';\nimport React, { useEffect, useState } from 'react';\nimport apiBusiness from '~/api/business';\nimport apiAgreement from '~/api/agreement';\nimport Router from 'next/router';\nimport { SearchOutlined } from '@ant-design/icons';\nconst pageParams = {\n  pageNo: 1,\n  pageSize: 10\n};\n\nconst getData = async (params = pageParams) => {\n  try {\n    let {\n      data: {\n        code,\n        data\n      }\n    } = await apiAgreement.getTemplateList(params);\n\n    if (code == 0) {\n      return data;\n    }\n\n    return [];\n  } catch (e) {\n    return [];\n  }\n};\n\nconst breadcrumbs = [{\n  text: '协议管理'\n}, {\n  text: '协议模板'\n}];\n\nconst Search = props => {\n  const [form] = _Form.useForm();\n\n  const onSearch = () => {\n    props.search(form.getFieldsValue());\n  };\n\n  const resetForm = () => {\n    form.resetFields();\n    onSearch();\n  };\n\n  return __jsx(_Card, {\n    style: {\n      marginBottom: 30\n    }\n  }, __jsx(_Form, {\n    form: form,\n    name: \"search\",\n    initialValues: {\n      status: null\n    },\n    layout: \"inline\"\n  }, __jsx(_Form.Item, {\n    label: \"\\u6A21\\u677F\\u540D\\u79F0\",\n    name: \"name\"\n  }, __jsx(_Input, {\n    placeholder: \"\\u6A21\\u677F\\u540D\\u79F0\",\n    style: {\n      width: 250\n    }\n  })), __jsx(_Form.Item, {\n    label: \"\\u72B6\\u6001\",\n    name: \"status\"\n  }, __jsx(_Select, {\n    style: {\n      width: 100\n    }\n  }, __jsx(_Select.Option, {\n    value: null\n  }, \"\\u5168\\u90E8\"), __jsx(_Select.Option, {\n    value: '1'\n  }, \"\\u542F\\u7528\"), __jsx(_Select.Option, {\n    value: '0'\n  }, \"\\u505C\\u7528\"))), __jsx(_Form.Item, null, __jsx(_Button, {\n    type: \"primary\",\n    onClick: onSearch\n  }, \"\\u67E5\\u8BE2\")), __jsx(_Form.Item, null, __jsx(_Button, {\n    type: \"primary\",\n    onClick: resetForm\n  }, \"\\u91CD\\u7F6E\")), __jsx(_Form.Item, null, __jsx(_Button, {\n    type: \"primary\",\n    onClick: props.goToEdit\n  }, \"\\u65B0\\u589E\"))));\n};\n\nfunction body(props) {\n  const {\n    0: data,\n    1: setData\n  } = useState(props.data);\n  const {\n    0: searchParams,\n    1: setSearchParams\n  } = useState({});\n\n  const onSearch = params => {\n    setSearchParams(params);\n    pageParams.pageNo = 1;\n    updateList(_objectSpread(_objectSpread({}, params), pageParams));\n  };\n\n  const onChangePage = (pageNo = pageParams.pageNo) => {\n    pageParams.pageNo = pageNo;\n    updateList(_objectSpread(_objectSpread({}, searchParams), pageParams));\n  };\n\n  const updateList = async params => {\n    let data = await getData(_objectSpread({}, params));\n    setData(data);\n  };\n\n  const changeStatus = i => {\n    const item = data.list[i];\n    let params = {\n      id: item.id,\n      status: item.status == 1 ? 0 : 1 // update: 'test'\n\n    };\n\n    _Modal.confirm({\n      content: `确定将此模板${item.status == 1 ? '停用' : '启用'}吗？`,\n      onOk: async () => {\n        apiAgreement.changeTempStatus(params).then(res => {\n          if (res.data.code == 0) {\n            let temp = _objectSpread({}, data);\n\n            temp.list[i].status = params.status;\n            setData(temp);\n          }\n        });\n      }\n    });\n  };\n\n  const preview = id => {\n    apiAgreement.previewTemplate({\n      id\n    }).then(res => {\n      console.log(res);\n\n      if (res.data.code == 0) {\n        window.open(res.data.data);\n      }\n    });\n  };\n\n  const columns = [{\n    title: '序号',\n    render: (v, r, i) => (pageParams.pageNo - 1) * pageParams.pageSize + i + 1\n  }, {\n    title: '模板名称',\n    dataIndex: 'name'\n  }, {\n    title: '状态',\n    dataIndex: 'status',\n    render: (v, r, i) => {\n      const text = v == 1 ? '启用' : '停用';\n      const color = v == 1 ? 'green' : 'red';\n      return __jsx(_Badge, {\n        color: color,\n        text: text\n      });\n    }\n  }, {\n    title: '更新人',\n    dataIndex: 'updateBy'\n  }, {\n    title: '更新日期',\n    dataIndex: 'updateTime'\n  }, {\n    title: '操作',\n    render: (v, r, i) => {\n      return __jsx(_Space, null, __jsx(_Button, {\n        type: \"link\",\n        onClick: () => goToEdit(i)\n      }, \"\\u7F16\\u8F91\"), __jsx(_Button, {\n        type: \"link\",\n        onClick: () => preview(r.id)\n      }, \"\\u9884\\u89C8\"), __jsx(_Button, {\n        type: \"link\",\n        onClick: () => changeStatus(i)\n      }, r.status == 1 ? '停用' : '启用'));\n    }\n  }].map(v => {\n    v.align = 'center';\n    return v;\n  });\n\n  const goToEdit = i => {\n    let url = '/agreement/template/detail';\n    url = i === -1 ? url : `${url}?id=${data.list[i].id}`;\n    Router.push(url);\n  };\n\n  const paginationConfig = {\n    total: data.totalSize,\n    current: pageParams.pageNo,\n    showSizeChanger: false,\n    showQuickJumper: true,\n    defaultPageSize: pageParams.pageSize,\n    showTotal: total => `共 ${total} 条`,\n    onChange: onChangePage\n  };\n  return __jsx(Layout, {\n    breadcrumbs: breadcrumbs\n  }, __jsx(Search, {\n    search: onSearch,\n    goToEdit: () => goToEdit(-1)\n  }), __jsx(_Table, {\n    bordered: true,\n    rowKey: \"id\",\n    pagination: paginationConfig,\n    columns: columns,\n    dataSource: data.list || []\n  }));\n}\n\nbody.getInitialProps = async ctx => {\n  let data = await getData();\n  return {\n    data\n  };\n};\n\nexport default body;","map":null,"metadata":{},"sourceType":"module"}