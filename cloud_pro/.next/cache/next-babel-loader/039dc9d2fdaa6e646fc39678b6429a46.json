{"ast":null,"code":"import \"antd/lib/modal/style\";\nimport _Modal from \"antd/lib/modal\";\nimport \"antd/lib/radio/style\";\nimport _Radio from \"antd/lib/radio\";\nimport \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/table/style\";\nimport _Table from \"antd/lib/table\";\nimport \"antd/lib/message/style\";\nimport _message from \"antd/lib/message\";\nimport \"antd/lib/form/style\";\nimport _Form from \"antd/lib/form\";\nimport \"antd/lib/input/style\";\nimport _Input from \"antd/lib/input\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from 'react';\nimport apiAssets from '~/api/assets';\nconst {\n  TextArea\n} = _Input;\n\nconst TableListThree = ({\n  protectionRecord,\n  fetchData\n}) => {\n  const [form] = _Form.useForm();\n\n  const {\n    0: visible,\n    1: setVisible\n  } = useState(false);\n  const {\n    0: recordId,\n    1: setRecordId\n  } = useState([]);\n  const columns = [{\n    title: '发起人',\n    dataIndex: 'launchName',\n    key: 'launchName',\n    width: 150,\n    render: (record, row) => {\n      return __jsx(\"div\", null, __jsx(\"p\", null, row.launchName), __jsx(\"p\", null, row.launchTime));\n    }\n  }, {\n    title: '内容',\n    dataIndex: 'content',\n    key: 'content',\n    width: 150\n  }, {\n    title: '发起人备注',\n    dataIndex: 'launchRemark',\n    key: 'launchRemark',\n    width: 150,\n    render: (text, record, row) => {\n      if (record.type == 2 || record.type == 3 || record.type == 4) {\n        return __jsx(\"p\", null, \"/\");\n      } else {\n        return __jsx(\"p\", null, text);\n      }\n    }\n  }, {\n    title: '状态',\n    dataIndex: 'examineStatus',\n    key: 'examineStatus',\n    width: 150,\n    render: (record, row) => {\n      if (row.type != 5) {\n        return __jsx(\"span\", null, row.typeString);\n      }\n\n      if (row.type == 5) {\n        return row.examineStatus == 0 ? '审核中' : row.examineStatus == 1 ? '通过' : '不通过';\n      }\n    }\n  }, {\n    title: '审核人备注',\n    dataIndex: 'examineRemark',\n    key: 'examineRemark',\n    width: 150,\n    render: (text, record, row) => {\n      if (record.type == 2 || record.type == 3 || record.type == 4 || record.examineStatus == 0) {\n        return __jsx(\"p\", null, \"/\");\n      } else {\n        return __jsx(\"p\", null, text);\n      }\n    }\n  }, {\n    title: '审核人',\n    dataIndex: 'examineName',\n    key: 'examineName',\n    width: 150,\n    render: (record, row) => {\n      if (row.examineStatus == 0) {\n        return __jsx(\"a\", {\n          onClick: () => verify(row)\n        }, \"\\u5BA1\\u6838\");\n      } else if (row.type == 2 || row.type == 3 || row.type == 4) {\n        return __jsx(\"p\", null, \"/\");\n      } else {\n        return __jsx(\"div\", null, __jsx(\"p\", null, row.examineName), __jsx(\"p\", null, row.examineTime));\n      }\n    }\n  }];\n\n  const verify = row => {\n    setVisible(true);\n    setRecordId(row.id);\n  };\n\n  const handleSubmit = async () => {\n    const values = await form.validateFields();\n\n    try {\n      const {\n        data: {\n          data,\n          code\n        }\n      } = await apiAssets.fetch_verify_deduction(_objectSpread(_objectSpread({}, values), {}, {\n        id: recordId\n      }));\n\n      if (code == 0) {\n        _message.success('提交成功');\n\n        fetchData();\n        setVisible(false);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return __jsx(\"div\", null, __jsx(_Table, {\n    rowKey: record => record.launchName + Math.random(),\n    dataSource: protectionRecord,\n    columns: columns,\n    bordered: true,\n    scroll: {\n      y: '100%',\n      x: '100%'\n    },\n    style: {\n      marginTop: 20\n    }\n  }), __jsx(_Modal, {\n    visible: visible,\n    title: \"\\u8D44\\u4EA7\\u4FDD\\u5168\\u5BA1\\u6838\",\n    footer: [__jsx(_Button, {\n      key: \"back\",\n      onClick: () => setVisible(false)\n    }, \"\\u53D6\\u6D88\"), __jsx(_Button, {\n      key: \"submit\",\n      type: \"primary\",\n      onClick: handleSubmit\n    }, \"\\u63D0\\u4EA4\")],\n    onCancel: () => setVisible(false)\n  }, __jsx(_Form, {\n    form: form,\n    key: Date.now,\n    name: \"form\",\n    style: {\n      marginLeft: 20\n    }\n  }, __jsx(_Form.Item, {\n    label: \"\\u5BA1\\u6838\\u7ED3\\u679C\",\n    name: \"examineStatus\",\n    rules: [{\n      required: true,\n      message: '请选择审核结果'\n    }]\n  }, __jsx(_Radio.Group, null, __jsx(_Radio, {\n    value: 1\n  }, \"\\u901A\\u8FC7\"), __jsx(_Radio, {\n    value: 2\n  }, \"\\u62D2\\u7EDD\"))), __jsx(_Form.Item, {\n    label: \"\\u539F\\u56E0\\u5907\\u6CE8\",\n    name: \"examineRemark\",\n    rules: [{\n      required: true,\n      message: '请输入原因备注'\n    }]\n  }, __jsx(TextArea, {\n    rows: 4\n  })))));\n};\n\nexport default TableListThree;","map":null,"metadata":{},"sourceType":"module"}