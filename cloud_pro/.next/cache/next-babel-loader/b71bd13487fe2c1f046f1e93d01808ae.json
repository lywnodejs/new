{"ast":null,"code":"import \"antd/lib/space/style\";\nimport _Space from \"antd/lib/space\";\nimport \"antd/lib/select/style\";\nimport _Select from \"antd/lib/select\";\nimport \"antd/lib/form/style\";\nimport _Form from \"antd/lib/form\";\nimport \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/table/style\";\nimport _Table from \"antd/lib/table\";\nimport \"antd/lib/radio/style\";\nimport _Radio from \"antd/lib/radio\";\nimport \"antd/lib/date-picker/style\";\nimport _DatePicker from \"antd/lib/date-picker\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Layout } from '~/components/Layout';\nimport { useEffect, useState, useRef } from 'react';\nimport React, { PureComponent } from 'react';\nimport moment from 'moment';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ReferenceLine, ResponsiveContainer } from 'recharts';\nimport { CSVLink, CSVDownload } from 'react-csv';\nimport style from './style.less';\nimport { biFetch } from '~/utils/fetch';\nconst {\n  RangePicker\n} = _DatePicker;\nconst breadcrumbs = [{\n  text: 'BI 报表'\n}, {\n  text: '核心指标'\n}, {\n  text: '分产品报表'\n}];\nconst startDate = moment(moment().subtract(14, 'days')).format('YYYY-MM-DD');\nconst endDate = moment().subtract(1, 'days').format('YYYY-MM-DD');\nconst pages = {\n  pageNo: 1,\n  pageSize: 20\n};\n\nconst fetchList = async (params = _objectSpread({\n  startDate,\n  endDate\n}, pages)) => {\n  for (const [key, value] of Object.entries(params)) {\n    if (!value) {\n      delete params[key];\n    }\n  }\n\n  const startDate = Array.isArray(params.date) ? moment(params.date[0]).format('YYYY-MM-DD') : undefined;\n  const endDate = Array.isArray(params.date) ? moment(params.date[1]).format('YYYY-MM-DD') : undefined;\n  delete params.date;\n  return await biFetch('/core/index/queryByProduct', _objectSpread({\n    startDate,\n    endDate\n  }, params));\n};\n\nfunction getRandomColor() {\n  var letters = '0123456789ABCDEF';\n  var color = '#';\n\n  for (var i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n\n  return color;\n}\n\nconst columns = [{\n  title: '报表日期',\n  dataIndex: 'statDate',\n  width: 150\n}, {\n  title: '产品',\n  dataIndex: 'productName',\n  width: 100\n}, {\n  title: '进件客户数',\n  dataIndex: 'applyUser',\n  width: 120\n}, {\n  title: '授信客户数',\n  dataIndex: 'applySuccessUser',\n  width: 120\n}, {\n  title: '授信金额(元)',\n  dataIndex: 'applySuccessAmt',\n  width: 120\n}, {\n  title: '授信平均额度(元)',\n  dataIndex: 'avgApplySuccessAmt',\n  width: 150\n}, {\n  title: '申请用信笔数',\n  dataIndex: 'loanCnt',\n  width: 150\n}, {\n  title: '放款笔数',\n  dataIndex: 'grantCnt',\n  width: 100\n}, {\n  title: '放款金额(元)',\n  dataIndex: 'grantAmt',\n  width: 150\n}, {\n  title: '用信平均额度(元)',\n  dataIndex: 'avgLoanAmt',\n  width: 150\n}, {\n  title: '授信成功率',\n  dataIndex: 'applySuccessRateText',\n  width: 120\n}, {\n  title: '用信过件率',\n  dataIndex: 'loanOverApplyRateText',\n  width: 120\n}, {\n  title: '在贷笔数',\n  dataIndex: 'onLoanCnt',\n  width: 100\n}, {\n  title: '在贷金额(元)',\n  dataIndex: 'onLoanAmt',\n  width: 120\n}, {\n  title: '授信使用率',\n  dataIndex: 'creditUsedRateText',\n  width: 120\n}, {\n  title: '首逾率',\n  dataIndex: 'intoCollRateText',\n  width: 100\n}, {\n  title: '入催率',\n  dataIndex: 'm1RecoveryRateText',\n  width: 100\n}, {\n  title: 'M1回收率',\n  dataIndex: 'm1RecoveryRateText',\n  width: 100\n}, {\n  title: 'M1比例',\n  dataIndex: 'm1RateText',\n  width: 100\n}, {\n  title: 'M2比例',\n  dataIndex: 'm2RateText',\n  width: 100\n}, {\n  title: 'M3+比例',\n  dataIndex: 'm3PlusRateText',\n  width: 100\n}];\n\nconst Chart = ({\n  products,\n  list,\n  form\n}) => {\n  const {\n    0: value,\n    1: setValue\n  } = useState('loanOverApplyRate');\n  let data = [];\n  let productId = form.getFieldsValue()['productId']; // console.log(productId)\n\n  let temp = products;\n\n  if (productId) {\n    temp = products.filter(y => y.productId === productId);\n  }\n\n  temp.forEach(v => {\n    let res = list.filter(s => s.productId == v.productId);\n    res = [...res].reverse();\n    data.push({\n      name: v.productName,\n      data: res,\n      color: getRandomColor()\n    });\n  });\n  data.sort((a, b) => b.data.length - a.data.length); // console.log(data)\n\n  const onChange = e => {\n    console.log(e.target.value);\n    setValue(e.target.value);\n  };\n\n  return __jsx(\"div\", {\n    className: style.chart\n  }, __jsx(\"h3\", null, \"\\u5206\\u4EA7\\u54C1\\u5206\\u65E5\\u8D28\\u91CF\"), __jsx(\"div\", {\n    className: style.radios\n  }, __jsx(_Radio.Group, {\n    onChange: onChange,\n    value: value\n  }, __jsx(_Radio, {\n    value: 'applySuccessRate'\n  }, \"\\u6388\\u4FE1\\u6210\\u529F\\u7387\"), __jsx(_Radio, {\n    value: 'loanOverApplyRate'\n  }, \"\\u7528\\u4FE1\\u8FC7\\u4EF6\\u7387\"), __jsx(_Radio, {\n    value: 'm1RecoveryRate'\n  }, \"\\u5165\\u50AC\\u7387\"), __jsx(_Radio, {\n    value: 'm2Rate'\n  }, \"M2\\u6BD4\\u4F8B\"))), __jsx(ResponsiveContainer, {\n    width: \"100%\",\n    height: 300\n  }, __jsx(LineChart, null, __jsx(CartesianGrid, {\n    strokeDasharray: \"3 3\",\n    vertical: false\n  }), __jsx(XAxis, {\n    dataKey: \"statDate\",\n    type: \"category\",\n    allowDuplicatedCategory: false\n  }), __jsx(YAxis, {\n    dataKey: value,\n    unit: \"%\"\n  }), __jsx(Tooltip, null), __jsx(Legend, {\n    align: \"right\",\n    verticalAlign: \"top\"\n  }), data.map(s => __jsx(Line, {\n    dataKey: value,\n    data: s.data,\n    stroke: s.color,\n    name: s.name,\n    key: s.name,\n    unit: \"%\"\n  })))));\n};\n\nconst TableList = ({\n  list\n}) => {\n  return __jsx(_Table, {\n    rowKey: (v, i) => i,\n    dataSource: list,\n    columns: columns,\n    scroll: {\n      y: 'calc(100vh - 350px)'\n    }\n  });\n};\n\nlet headers = columns.map(v => {\n  return {\n    label: v.title,\n    key: v.dataIndex\n  };\n});\n\nconst DownloadCSV = ({\n  form\n}) => {\n  const csvInstance = useRef();\n  const {\n    0: data,\n    1: setData\n  } = useState();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n\n  const onDownload = async () => {\n    setLoading(true);\n    let values = form.getFieldsValue();\n    const {\n      data: {\n        code,\n        data: list\n      }\n    } = await fetchList(values);\n\n    if (code === 0) {\n      setData(list);\n    }\n\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    if (data !== undefined && csvInstance.current && csvInstance.current.link) {\n      setTimeout(() => {\n        csvInstance.current.link.click();\n        setData(undefined);\n      });\n    }\n  }, [data]);\n  return __jsx(React.Fragment, null, __jsx(CSVLink, {\n    headers: headers,\n    data: data || [],\n    ref: csvInstance\n  }), __jsx(_Button, {\n    loading: loading,\n    type: \"primary\",\n    onClick: onDownload\n  }, \"\\u4E0B\\u8F7D\"));\n};\n\nconst Search = ({\n  onSearch,\n  channels,\n  products,\n  form\n}) => {\n  return __jsx(_Form, {\n    layout: \"inline\",\n    form: form,\n    initialValues: {\n      date: [moment(startDate, 'YYYY-MM-DD'), moment(endDate, 'YYYY-MM-DD')],\n      srcCode: '',\n      productId: ''\n    },\n    onFinish: onSearch,\n    className: \"searchForm\"\n  }, __jsx(_Form.Item, _extends({\n    label: \"\\u7533\\u8BF7\\u65E5\\u671F\",\n    name: \"date\"\n  }, {\n    rules: [{\n      type: 'array',\n      required: true,\n      message: '请选时间!'\n    }]\n  }), __jsx(RangePicker, null)), __jsx(_Form.Item, {\n    label: \"\\u4EA7\\u54C1\",\n    name: \"productId\"\n  }, __jsx(_Select, {\n    style: {\n      width: 120\n    }\n  }, __jsx(_Select.Option, {\n    value: \"\"\n  }, \"\\u5168\\u90E8\"), products.map(v => __jsx(_Select.Option, {\n    key: v.productId,\n    value: v.productId\n  }, v.productName)))), __jsx(_Form.Item, {\n    label: \"\\u8FDB\\u4EF6\\u6E20\\u9053\",\n    name: \"srcCode\"\n  }, __jsx(_Select, {\n    style: {\n      width: 120\n    }\n  }, __jsx(_Select.Option, {\n    value: \"\"\n  }, \"\\u5168\\u90E8\"), channels.map(v => __jsx(_Select.Option, {\n    key: v.srcCode,\n    value: v.srcCode\n  }, v.name)))), __jsx(_Form.Item, null, __jsx(_Button, {\n    type: \"primary\",\n    htmlType: \"submit\"\n  }, \"\\u67E5\\u8BE2\")), __jsx(_Form.Item, null, __jsx(DownloadCSV, {\n    form\n  })));\n};\n\nconst body = ({\n  list,\n  channels,\n  products\n}) => {\n  const [form] = _Form.useForm();\n\n  const {\n    0: data,\n    1: setData\n  } = useState(list);\n\n  const onSearch = async values => {\n    // console.log(values)\n    const {\n      data: {\n        code,\n        data\n      }\n    } = await fetchList(_objectSpread(_objectSpread({}, values), pages));\n\n    if (code === 0) {\n      console.log(data);\n      setData(data);\n    }\n  };\n\n  const onPage = page => {\n    const values = form.getFieldsValue();\n    pages.pageNo = page;\n    onSearch(values);\n  };\n\n  return __jsx(Layout, {\n    breadcrumbs: breadcrumbs\n  }, __jsx(_Space, {\n    direction: \"vertical\",\n    size: \"large\",\n    style: {\n      width: '100%'\n    }\n  }, __jsx(Search, {\n    onSearch,\n    channels,\n    products,\n    form\n  }), __jsx(Chart, {\n    list: data,\n    products: products,\n    form: form\n  }), __jsx(TableList, {\n    list: data\n  })));\n};\n\nbody.getInitialProps = async () => {\n  try {\n    const [{\n      data: {\n        code,\n        data: list = []\n      }\n    }, {\n      data: {\n        data: channels = []\n      }\n    }, {\n      data: {\n        data: products = []\n      }\n    }] = await Promise.all([fetchList(), biFetch('/common/allChannel'), biFetch('/common/allProduct')]); // console.log(list, channels, products)\n\n    return {\n      list,\n      channels,\n      products\n    };\n  } catch (e) {\n    console.log(e);\n  }\n\n  return {\n    list: [],\n    channels: [],\n    products: []\n  };\n};\n\nexport default body;","map":null,"metadata":{},"sourceType":"module"}