{"ast":null,"code":"import \"antd/lib/space/style\";\nimport _Space from \"antd/lib/space\";\nimport \"antd/lib/list/style\";\nimport _List from \"antd/lib/list\";\nimport \"antd/lib/modal/style\";\nimport _Modal from \"antd/lib/modal\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Layout } from '~/components/Layout';\nimport React, { useEffect, useState } from 'react';\nimport { useCookies } from 'react-cookie';\nimport api from '~/api/order';\nimport apiProduct from '~/api/product';\nimport SearchForm from './SearchForm';\nimport TableList from './TableList';\nimport Detail from './detail';\nconst breadcrumbs = [{\n  text: '进件管理'\n}, {\n  text: '进件列表'\n}];\nconst pageParams = {\n  pageNo: 1,\n  pageSize: 10\n};\nlet values = {};\n\nfunction body({\n  checkProgressList,\n  statusList,\n  applyStatusList,\n  applyOrderList,\n  applySource,\n  push\n}) {\n  const [cookies] = useCookies(['tenantId']);\n  const {\n    0: productList,\n    1: setProductList\n  } = useState([]);\n  const {\n    0: list,\n    1: setList\n  } = useState([]);\n  useEffect(() => {\n    getProducts();\n  }, []);\n\n  const getProducts = async () => {\n    try {\n      const {\n        data: {\n          data,\n          code\n        }\n      } = await apiProduct.get_products({\n        tenantId: cookies.tenantId\n      });\n\n      if (code == 0) {\n        setProductList(data);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const fetchList = async (values = {}) => {\n    try {\n      const {\n        data: {\n          data,\n          code\n        }\n      } = await api.fetch_all_order(_objectSpread(_objectSpread(_objectSpread({}, pageParams), values), {}, {\n        tenantId: cookies.tenantId\n      }));\n\n      if (code === 0) {\n        setList(data);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const exportData = async params => {\n    const {\n      data: {\n        code,\n        data\n      }\n    } = await api.export_list(params);\n\n    if (code === 0) {\n      const link = document.createElement('a');\n      link.style.display = 'none';\n      link.href = data.url;\n      document.body.appendChild(link);\n      link.click();\n      return document.body.removeChild(link);\n    }\n\n    if (code === 2001 && params.exportType == 1) {\n      _Modal.warning({\n        title: '提示',\n        okText: '好的，继续导出',\n        closable: true,\n        content: __jsx(\"div\", null, __jsx(\"p\", {\n          style: {\n            fontSize: 12,\n            color: '#333'\n          }\n        }, \"\\u4EE5\\u4E0B\\u5F81\\u4FE1\\u67E5\\u8BE2\\u6388\\u6743\\u4E66\\u5C1A\\u672A\\u751F\\u6210\\uFF0C\\u6B64\\u6B21\\u5BFC\\u51FA\\u5C06\\u8DF3\\u8FC7\\u8FD9\\u4E9B\\u8FDB\\u4EF6\"), __jsx(_List, {\n          size: \"small\",\n          bordered: true,\n          dataSource: data.unsignedOrders,\n          renderItem: value => __jsx(_List.Item, null, value)\n        })),\n\n        onOk() {\n          exportData(_objectSpread(_objectSpread({}, params), {}, {\n            exportType: 2\n          }));\n        }\n\n      });\n    }\n\n    if (code === 2001 && params.exportType == 3) {\n      _Modal.warning({\n        title: '提示',\n        okText: '好的',\n        content: '导出失败，仅支持导出已授信订单',\n\n        onOk() {}\n\n      });\n    }\n  };\n\n  const onSearch = async (value, type) => {\n    console.log(value, type);\n\n    if (type === 'export') {\n      let params = _objectSpread(_objectSpread(_objectSpread({}, value), pageParams), {}, {\n        tenantId: cookies.tenantId\n      });\n\n      exportData(params);\n    } else {\n      values = value;\n      pageParams.pageNo = 1;\n      fetchList(_objectSpread({}, values));\n    }\n  };\n\n  const onPage = async (pageNo, pageSize) => {\n    pageParams.pageNo = pageNo;\n    pageParams.pageSize = pageSize;\n    fetchList(values);\n  };\n\n  const onDetail = record => {\n    push(__jsx(Detail, {\n      id: record.id\n    }));\n  };\n\n  return __jsx(Layout, {\n    breadcrumbs: breadcrumbs\n  }, __jsx(_Space, {\n    direction: \"vertical\",\n    size: \"large\",\n    style: {\n      width: '100%'\n    }\n  }, __jsx(SearchForm, {\n    onSearch,\n    applyStatusList,\n    applyOrderList,\n    productList,\n    statusList,\n    checkProgressList,\n    applySource\n  }), __jsx(TableList, {\n    list,\n    onPage,\n    productList,\n    statusList,\n    applyStatusList,\n    applyOrderList,\n    checkProgressList,\n    pageParams,\n    applySource,\n    onDetail\n  })));\n}\n\nbody.getInitialProps = async () => {\n  const backData = {\n    checkProgressList: [],\n    statusList: [],\n    applyStatusList: [],\n    applySource: [],\n    applyOrderList: []\n  };\n\n  try {\n    const [{\n      data: {\n        data,\n        code\n      }\n    }, {\n      data: {\n        data: statusList,\n        code: statusCode\n      }\n    }, {\n      data: {\n        data: applyStatusList,\n        code: applyStatusCode\n      }\n    }, {\n      data: {\n        data: applySource,\n        code: applySourceCode\n      }\n    }, {\n      data: {\n        data: applyOrderList,\n        code: applyOrderCode\n      }\n    }] = await Promise.all([api.get_data_dict('LOAN_CHECK_PROGRESS'), api.get_data_dict('LOAN_ORDER_STATUS'), api.get_data_dict('LOAN_APPLY_STATUS'), api.get_data_dict('LOAN_APPLY_SOURCE'), api.get_data_dict('LOAN_ORDER_TYPE')]);\n\n    if (code == 0) {\n      return {\n        checkProgressList: data,\n        statusList: statusCode === 0 ? statusList : [],\n        applyStatusList: applyStatusCode === 0 ? applyStatusList : [],\n        applySource: applySourceCode === 0 ? applySource : [],\n        applyOrderList: applyOrderCode === 0 ? applyOrderList : []\n      };\n    }\n\n    backData.code = code;\n    return backData;\n  } catch (err) {\n    console.log(err);\n    return backData;\n  }\n};\n\nexport default body;","map":null,"metadata":{},"sourceType":"module"}