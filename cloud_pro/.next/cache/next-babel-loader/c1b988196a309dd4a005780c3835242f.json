{"ast":null,"code":"import \"antd/lib/space/style\";\nimport _Space from \"antd/lib/space\";\nimport \"antd/lib/message/style\";\nimport _message from \"antd/lib/message\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Layout } from '~/components/Layout';\nimport React, { useEffect, useState } from 'react';\nimport api from '~/api/collection';\nimport apiProduct from '~/api/product';\nimport BaseTable from '~/components/pages/collection/reminded/form/BaseTable';\nimport AddContacts from '~/components/pages/collection/reminded/form/AddContacts';\nimport AddHistory from '../../../../components/pages/collection/reminded/form/AddHistory';\nconst breadcrumbs = [{\n  text: '催收管理'\n}, {\n  text: '待催列表'\n}, {\n  text: '通讯录详情'\n}];\n\nfunction body(props) {\n  const {\n    0: pageParams,\n    1: setPageParams\n  } = useState({\n    pageNo: 1,\n    pageSize: 10\n  });\n  const {\n    0: list,\n    1: setList\n  } = useState([]);\n  useEffect(() => {\n    getList();\n  }, []);\n\n  const getList = async () => {\n    const {\n      data: {\n        code,\n        data\n      }\n    } = await api.getContactlist(props.userId);\n\n    if (code == 0) {\n      setList(data || []);\n    }\n  };\n\n  const getHistoryData = (formData, successFun, failFun) => {\n    let params = _objectSpread(_objectSpread({}, formData), {}, {\n      collectionOrderId: +props.orderId,\n      collectionMobilePhoneEncrypt: props.mobilePhoneEncrypt\n    });\n\n    api.add_one_collection(params).then(({\n      data: {\n        code\n      }\n    }) => {\n      if (code == 0) {\n        _message.success('添加成功');\n\n        successFun();\n      } else {\n        failFun();\n      }\n    }).catch(() => {\n      failFun();\n    });\n  };\n\n  const columns = [{\n    title: '姓名',\n    dataIndex: 'bookName'\n  }, {\n    title: '联系号码',\n    dataIndex: 'phoneNo'\n  }, {\n    title: '操作',\n    key: 'cz',\n    width: 150,\n    render: r => {\n      return __jsx(_Space, null, __jsx(AddHistory, _extends({}, props, {\n        phoneNo: r.phoneNo,\n        getHistoryData: getHistoryData\n      })));\n    }\n  }];\n\n  const changePage = (pageNo, pageSize) => {\n    console.log(pageNo, pageSize);\n    setPageParams({\n      pageNo,\n      pageSize\n    });\n  };\n\n  return __jsx(Layout, {\n    breadcrumbs: breadcrumbs\n  }, __jsx(BaseTable, {\n    list: list // pageParams={pageParams}\n    // changePage={changePage}\n    ,\n    columns: columns\n  }));\n}\n\nbody.getInitialProps = async context => {\n  const backData = {\n    collectionProducts: [],\n    collectionLevels: [],\n    urgeMethods: [],\n    urgeObjects: [],\n    urgeResults: [],\n    urgeResultUnknows: [],\n    urgeResultHighs: [],\n    urgeResultLows: [],\n    urgeIsConnects: [],\n    urgeReasonTypes: [],\n    urgeRepayDesires: [],\n    connectResults: [],\n    unConnectResults: [],\n    orderId: context.ctx.query.orderId,\n    userId: context.ctx.query.uid\n  };\n\n  try {\n    const [{\n      data: {\n        data,\n        code\n      }\n    }, {\n      data: {\n        data: collectionLevels,\n        code: levelCode\n      }\n    }, {\n      data: {\n        data: urgeMethods,\n        code: levelCode01\n      }\n    }, {\n      data: {\n        data: urgeObjects,\n        code: levelCode02\n      }\n    }, {\n      data: {\n        data: urgeResults,\n        code: levelCode03\n      }\n    }, {\n      data: {\n        data: urgeResultUnknows,\n        code: levelCode04\n      }\n    }, {\n      data: {\n        data: urgeResultHighs,\n        code: levelCode05\n      }\n    }, {\n      data: {\n        data: urgeResultLows,\n        code: levelCode06\n      }\n    }, {\n      data: {\n        data: urgeIsConnects,\n        code: levelCode07\n      }\n    }, {\n      data: {\n        data: urgeReasonTypes,\n        code: levelCode08\n      }\n    }, {\n      data: {\n        data: urgeRepayDesires,\n        code: levelCode09\n      }\n    }] = await Promise.all([api.get_data_dict('COLLECTION_PRODUCT'), api.get_data_dict('COLLECTION_LEVEL'), api.get_data_dict('URGE_METHOD'), api.get_data_dict('URGE_OBJECT'), api.get_data_dict('URGE_RESULT'), api.get_data_dict('URGE_RESULT_UNKNOWN'), api.get_data_dict('URGE_RESULT_HIGH'), api.get_data_dict('URGE_RESULT_LOW'), api.get_data_dict('URGE_IS_CONNECT'), api.get_data_dict('URGE_REASON_TYPE'), api.get_data_dict('URGE_REPAY_DESIRE')]);\n\n    if (code == 0) {\n      return {\n        collectionProducts: data,\n        collectionLevels: levelCode === 0 ? collectionLevels : [],\n        urgeMethods: levelCode01 === 0 ? urgeMethods : [],\n        urgeObjects: levelCode02 === 0 ? urgeObjects : [],\n        urgeResults: levelCode03 === 0 ? urgeResults : [],\n        urgeResultUnknows: levelCode04 === 0 ? urgeResultUnknows : [],\n        urgeResultHighs: levelCode05 === 0 ? urgeResultHighs : [],\n        urgeResultLows: levelCode06 === 0 ? urgeResultLows : [],\n        urgeIsConnects: levelCode07 === 0 ? urgeIsConnects : [],\n        urgeReasonTypes: levelCode08 === 0 ? urgeReasonTypes : [],\n        urgeRepayDesires: levelCode09 === 0 ? urgeRepayDesires : [],\n        orderId: context.ctx.query.orderId,\n        userId: context.ctx.query.uid\n      };\n    }\n\n    backData.code = code;\n    return backData;\n  } catch (err) {\n    console.log(err);\n    return backData;\n  }\n};\n\nexport default body;","map":null,"metadata":{},"sourceType":"module"}