{"ast":null,"code":"import \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/card/style\";\nimport _Card from \"antd/lib/card\";\nimport \"antd/lib/input/style\";\nimport _Input from \"antd/lib/input\";\nimport \"antd/lib/row/style\";\nimport _Row from \"antd/lib/row\";\nimport \"antd/lib/col/style\";\nimport _Col from \"antd/lib/col\";\nimport \"antd/lib/message/style\";\nimport _message from \"antd/lib/message\";\nimport \"antd/lib/form/style\";\nimport _Form from \"antd/lib/form\";\nvar __jsx = React.createElement;\nimport { Layout } from '~/components/Layout';\nimport React, { useEffect, useRef, useState } from 'react';\nimport apiMechanism from '~/api/mechanism';\nimport Router, { withRouter } from 'next/router';\nconst breadcrumbs = [{\n  text: '机构管理'\n}, {\n  text: '编辑机构信息'\n}];\n\nfunction body(props) {\n  const [organizationForm] = _Form.useForm();\n\n  const {\n    0: dataDetail,\n    1: setDataDetail\n  } = useState([]);\n  const {\n    0: bool,\n    1: setBool\n  } = useState(true);\n  let type = props.router.query.type;\n  let flag = props.router.query.flag;\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const {\n          data: {\n            data,\n            code\n          }\n        } = await apiMechanism.get_mechanism_detail({\n          id: props.router.query.id\n        });\n\n        if (code == 0) {\n          console.log(data, 'data..');\n          setDataDetail(data);\n          organizationForm.setFieldsValue(data);\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    }\n\n    fetchData();\n  }, [organizationForm]);\n\n  const determine = async () => {\n    setBool(false);\n    const values = await organizationForm.validateFields();\n\n    if (bool) {\n      let postData = {\n        id: dataDetail.id,\n        contactWay: values.contactWay,\n        linkman: values.linkman,\n        unitPriceOne: Number(values.unitPriceOne),\n        unitPriceTwo: Number(values.unitPriceTwo),\n        unitPriceThird: Number(values.unitPriceThird),\n        unitPriceFour: Number(values.unitPriceFour),\n        unitPriceFive: Number(values.unitPriceFive),\n        unitPriceSix: Number(values.unitPriceSix)\n      };\n\n      try {\n        const {\n          data: {\n            data,\n            code\n          }\n        } = await apiMechanism.update_mechanism_update(postData);\n\n        if (code == 0) {\n          _message.success('编辑成功');\n\n          Router.push('/mechanism');\n        }\n      } catch (err) {\n        console.log(err);\n      }\n\n      setBool(true);\n    }\n  };\n\n  const handleCanel = async () => {\n    Router.push('/mechanism');\n  };\n\n  return __jsx(Layout, {\n    isGray: true,\n    breadcrumbs: breadcrumbs\n  }, __jsx(_Form, {\n    name: organizationForm,\n    form: organizationForm\n  }, __jsx(_Card, {\n    title: \"\\u57FA\\u672C\\u4FE1\\u606F\",\n    headStyle: {\n      paddingLeft: 20,\n      fontWeight: 700,\n      fontSize: 18,\n      paddingBottom: -60\n    },\n    style: {\n      padding: '0 30px'\n    }\n  }, __jsx(_Row, {\n    gutter: 20\n  }, __jsx(_Col, {\n    span: 10\n  }, __jsx(\"span\", null, \"\\u673A\\u6784\\u540D\\u79F0\")), __jsx(_Col, {\n    span: 10\n  }, __jsx(\"span\", null, \"\\u673A\\u6784\\u7C7B\\u578B\"))), __jsx(_Row, {\n    gutter: 20,\n    style: {\n      marginTop: 20\n    }\n  }, __jsx(_Col, {\n    span: 10\n  }, __jsx(_Form.Item, {\n    label: \"\",\n    name: \"name\"\n  }, __jsx(\"span\", null, dataDetail.name))), __jsx(_Col, {\n    span: 10\n  }, __jsx(_Form.Item, {\n    label: \"\",\n    name: \"name\"\n  }, __jsx(\"span\", null, dataDetail.type)))), __jsx(_Row, {\n    gutter: 20,\n    style: {\n      marginTop: 20\n    }\n  }, __jsx(_Col, {\n    span: 10\n  }, __jsx(_Form.Item, {\n    label: \"\\u8054\\u7CFB\\u4EBA(\\u9009\\u586B)\",\n    name: \"linkman\",\n    rules: [({\n      getFieldValue\n    }) => ({\n      validator(rule, value) {\n        if (value && value.length > 20) {\n          return Promise.reject('请输入小于20个字符');\n        }\n\n        return Promise.resolve();\n      }\n\n    })]\n  }, __jsx(_Input, {\n    placeholder: \"\\u8BF7\\u8F93\\u5165\\u673A\\u6784\\u8054\\u7CFB\\u4EBA\",\n    style: {\n      marginTop: 60,\n      marginLeft: -100,\n      width: 300\n    },\n    maxLength: 100\n  }))), __jsx(_Col, {\n    span: 10\n  }, __jsx(_Form.Item, {\n    label: \"\\u8054\\u7CFB\\u65B9\\u5F0F\\uFF08\\u9009\\u586B\\uFF09\",\n    name: \"contactWay\",\n    rules: [({\n      getFieldValue\n    }) => ({\n      validator(rule, value) {\n        if (value && value.length > 20) {\n          return Promise.reject('请输入小于20个字符');\n        }\n\n        return Promise.resolve();\n      }\n\n    })]\n  }, __jsx(_Input, {\n    placeholder: \"\\u8BF7\\u8F93\\u5165\\u673A\\u6784\\u8054\\u7CFB\\u65B9\\u5F0F\",\n    style: {\n      marginTop: 60,\n      marginLeft: -130,\n      width: 300\n    },\n    maxLength: 100\n  }))))), type == '电子签章' ? __jsx(_Card, {\n    title: \"\\u8BA1\\u8D39\\u4FE1\\u606F\",\n    headStyle: {\n      paddingLeft: 20,\n      fontWeight: 700,\n      fontSize: 18,\n      paddingBottom: -60\n    },\n    style: {\n      padding: '0 30px',\n      marginTop: 30,\n      height: 300\n    }\n  }, __jsx(\"p\", {\n    style: {\n      color: '#666666'\n    }\n  }, \"\\u7535\\u5B50\\u7B7E\\u7AE0\"), __jsx(_Row, {\n    gutter: 20\n  }, __jsx(_Col, {\n    span: 10\n  }, __jsx(_Form.Item, {\n    label: \"\",\n    name: \"unitPriceOne\",\n    rules: [{\n      required: true,\n      message: '请输入电子签章价格'\n    }, ({\n      getFieldValue\n    }) => ({\n      validator(rule, value) {\n        var reg = /^(([0-9]+)|([0-9]+\\.[0-9]{0,4}))$/;\n\n        if (value && !reg.test(value)) {\n          return Promise.reject('请输入大于等于0的数，并且最多保留4位小数');\n        }\n\n        if (value > 99999) {\n          return Promise.reject('请输入小于99999的数');\n        }\n\n        return Promise.resolve();\n      }\n\n    })]\n  }, __jsx(_Input, {\n    placeholder: \"\\u8BF7\\u8F93\\u5165\\u7535\\u5B50\\u7B7E\\u7AE0\",\n    suffix: \"\\u5143/\\u6B21\",\n    style: {\n      width: 250\n    }\n  }))))) : type == '短信通道' ? __jsx(_Card, {\n    title: \"\\u8BA1\\u8D39\\u4FE1\\u606F\",\n    headStyle: {\n      paddingLeft: 20,\n      fontWeight: 700,\n      fontSize: 18,\n      paddingBottom: -60\n    },\n    style: {\n      padding: '0 30px',\n      marginTop: 30,\n      height: 300\n    }\n  }, __jsx(\"div\", {\n    style: {\n      color: '#666666'\n    }\n  }, __jsx(_Row, {\n    gutter: 20\n  }, __jsx(_Col, {\n    span: 10\n  }, \"\\u8425\\u9500\\u7C7B\\u77ED\\u4FE1\"), __jsx(_Col, {\n    span: 10\n  }, \"\\u901A\\u77E5\\u7C7B\\u77ED\\u4FE1\"))), __jsx(_Row, {\n    gutter: 20,\n    style: {\n      marginTop: 20\n    }\n  }, __jsx(_Col, {\n    span: 10\n  }, __jsx(_Form.Item, {\n    label: \"\",\n    name: \"unitPriceOne\",\n    rules: [{\n      required: true,\n      message: '请输入营销类短信价格'\n    }, ({\n      getFieldValue\n    }) => ({\n      validator(rule, value) {\n        var reg = /^(([0-9]+)|([0-9]+\\.[0-9]{0,4}))$/;\n\n        if (value && !reg.test(value)) {\n          return Promise.reject('请输入大于等于0的数，并且最多保留4位小数');\n        }\n\n        if (value > 99999) {\n          return Promise.reject('请输入小于99999的数');\n        }\n\n        return Promise.resolve();\n      }\n\n    })]\n  }, __jsx(_Input, {\n    placeholder: \"\\u8BF7\\u8F93\\u5165\\u8425\\u9500\\u7C7B\\u77ED\\u4FE1\\u91D1\\u989D\",\n    style: {\n      width: 250\n    },\n    suffix: \"\\u5143 / \\u6761\"\n  }))), __jsx(_Col, {\n    span: 10\n  }, __jsx(_Form.Item, {\n    label: \"\",\n    name: \"unitPriceTwo\",\n    rules: [{\n      required: true,\n      message: '请输入通知类短信价格'\n    }, ({\n      getFieldValue\n    }) => ({\n      validator(rule, value) {\n        var reg = /^(([0-9]+)|([0-9]+\\.[0-9]{0,4}))$/;\n\n        if (value && !reg.test(value)) {\n          return Promise.reject('请输入大于等于0的数，并且最多保留4位小数');\n        }\n\n        if (value > 99999) {\n          return Promise.reject('请输入小于99999的数');\n        }\n\n        return Promise.resolve();\n      }\n\n    })]\n  }, __jsx(_Input, {\n    placeholder: \"\\u8BF7\\u8F93\\u5165\\u901A\\u77E5\\u7C7B\\u77ED\\u4FE1\\u91D1\\u989D\",\n    style: {\n      width: 250\n    },\n    suffix: \"\\u5143 / \\u6761\"\n  }))))) : type == '智能识别' ? __jsx(_Card, {\n    title: \"\\u8BA1\\u8D39\\u4FE1\\u606F\",\n    headStyle: {\n      paddingLeft: 20,\n      fontWeight: 700,\n      fontSize: 18,\n      paddingBottom: -60\n    },\n    style: {\n      padding: '0 30px',\n      marginTop: 30,\n      height: 300\n    }\n  }, __jsx(\"div\", {\n    style: {\n      color: '#666666'\n    }\n  }, __jsx(_Row, {\n    gutter: 20\n  }, __jsx(_Col, {\n    span: 10\n  }, \"OCR\"), __jsx(_Col, {\n    span: 10\n  }, \"\\u4EBA\\u8138\\u6838\\u8EAB\"))), __jsx(_Row, {\n    gutter: 20,\n    style: {\n      marginTop: 20\n    }\n  }, __jsx(_Col, {\n    span: 10\n  }, __jsx(_Form.Item, {\n    label: \"\",\n    name: \"unitPriceOne\",\n    rules: [{\n      required: true,\n      message: '请输入OCR'\n    }, ({\n      getFieldValue\n    }) => ({\n      validator(rule, value) {\n        var reg = /^(([0-9]+)|([0-9]+\\.[0-9]{0,4}))$/;\n\n        if (value && !reg.test(value)) {\n          return Promise.reject('请输入大于等于0的数，并且最多保留4位小数');\n        }\n\n        if (value > 99999) {\n          return Promise.reject('请输入小于99999的数');\n        }\n\n        return Promise.resolve();\n      }\n\n    })]\n  }, __jsx(_Input, {\n    placeholder: \"\\u8BF7\\u8F93\\u5165OCR\",\n    style: {\n      width: 250\n    },\n    suffix: \"\\u5143 / \\u6B21\"\n  }))), __jsx(_Col, {\n    span: 10\n  }, __jsx(_Form.Item, {\n    label: \"\",\n    name: \"unitPriceTwo\",\n    rules: [{\n      required: true,\n      message: '请输入人脸核身'\n    }, ({\n      getFieldValue\n    }) => ({\n      validator(rule, value) {\n        var reg = /^(([0-9]+)|([0-9]+\\.[0-9]{0,4}))$/;\n\n        if (value && !reg.test(value)) {\n          return Promise.reject('请输入大于等于0的数，并且最多保留4位小数');\n        }\n\n        if (value > 99999) {\n          return Promise.reject('请输入小于99999的数');\n        }\n\n        return Promise.resolve();\n      }\n\n    })]\n  }, __jsx(_Input, {\n    placeholder: \"\\u8BF7\\u8F93\\u5165\\u4EBA\\u8138\\u6838\\u8EAB\",\n    style: {\n      width: 250\n    },\n    suffix: \"\\u5143 / \\u6B21\"\n  }))))) : type == '支付通道' ? __jsx(_Card, {\n    title: \"\\u8BA1\\u8D39\\u4FE1\\u606F\",\n    headStyle: {\n      paddingLeft: 20,\n      fontWeight: 700,\n      fontSize: 18,\n      paddingBottom: -60\n    },\n    style: {\n      padding: '0 30px',\n      marginTop: 30,\n      height: 650\n    }\n  }, __jsx(\"p\", {\n    style: {\n      fontWeight: 'bold'\n    }\n  }, \"\\u534F\\u8BAE\\u652F\\u4ED8\"), __jsx(\"div\", {\n    style: {\n      color: '#666666'\n    }\n  }, __jsx(_Row, {\n    gutter: 20\n  }, __jsx(_Col, {\n    span: 10\n  }, \"\\u7ED3\\u7B97\\u4EF7\\u683C\"), __jsx(_Col, {\n    span: 10\n  }, \"\\u4FDD\\u5E95\\u5355\\u4EF7\"))), __jsx(_Row, {\n    gutter: 20,\n    style: {\n      marginTop: 20\n    }\n  }, __jsx(_Col, {\n    span: 10\n  }, __jsx(_Form.Item, {\n    label: \"\",\n    name: \"unitPriceOne\",\n    rules: [{\n      required: true,\n      message: '请输入计费比例'\n    }, ({\n      getFieldValue\n    }) => ({\n      validator(rule, value) {\n        var reg = /^(([0-9]+)|([0-9]+\\.[0-9]{0,4}))$/;\n\n        if (value && !reg.test(value)) {\n          return Promise.reject('请输入大于等于0的数，并且最多保留4位小数');\n        }\n\n        if (value > 99999) {\n          return Promise.reject('请输入小于99999的数');\n        }\n\n        return Promise.resolve();\n      }\n\n    })]\n  }, __jsx(_Input, {\n    placeholder: \"\\u8BF7\\u8F93\\u5165\\u8BA1\\u8D39\\u6BD4\\u4F8B\",\n    style: {\n      width: 250\n    },\n    suffix: \"%\"\n  }))), __jsx(_Col, {\n    span: 10\n  }, __jsx(_Form.Item, {\n    label: \"\",\n    name: \"unitPriceTwo\",\n    rules: [{\n      required: true,\n      message: '请输入保底单价'\n    }, ({\n      getFieldValue\n    }) => ({\n      validator(rule, value) {\n        var reg = /^(([0-9]+)|([0-9]+\\.[0-9]{0,4}))$/;\n\n        if (value && !reg.test(value)) {\n          return Promise.reject('请输入大于等于0的数，并且最多保留4位小数');\n        }\n\n        if (value > 99999) {\n          return Promise.reject('请输入小于99999的数');\n        }\n\n        return Promise.resolve();\n      }\n\n    })]\n  }, __jsx(_Input, {\n    placeholder: \"\\u65E0\\u4FDD\\u5E95\\u4EF7\\u683C\\u65F6\\uFF0C\\u8BF7\\u586B\\u201C0\\u201D\",\n    style: {\n      width: 250\n    },\n    suffix: \"\\u5143 / \\u7B14\"\n  })))), __jsx(\"p\", {\n    style: {\n      fontWeight: 'bold'\n    }\n  }, \"\\u4EE3\\u6263\"), __jsx(\"div\", {\n    style: {\n      color: '#666666'\n    }\n  }, __jsx(_Row, {\n    gutter: 20\n  }, __jsx(_Col, {\n    span: 10\n  }, \"\\u7ED3\\u7B97\\u4EF7\\u683C\"), __jsx(_Col, {\n    span: 10\n  }, \"\\u4FDD\\u5E95\\u5355\\u4EF7\"))), __jsx(_Row, {\n    gutter: 20,\n    style: {\n      marginTop: 20\n    }\n  }, __jsx(_Col, {\n    span: 10\n  }, __jsx(_Form.Item, {\n    label: \"\",\n    name: \"unitPriceThird\",\n    rules: [{\n      required: true,\n      message: '请输入计费比例'\n    }, ({\n      getFieldValue\n    }) => ({\n      validator(rule, value) {\n        var reg = /^(([0-9]+)|([0-9]+\\.[0-9]{0,4}))$/;\n\n        if (value && !reg.test(value)) {\n          return Promise.reject('请输入大于等于0的数，并且最多保留4位小数');\n        }\n\n        if (value > 99999) {\n          return Promise.reject('请输入小于99999的数');\n        }\n\n        return Promise.resolve();\n      }\n\n    })]\n  }, __jsx(_Input, {\n    placeholder: \"\\u8BF7\\u8F93\\u5165\\u8BA1\\u8D39\\u6BD4\\u4F8B\",\n    style: {\n      width: 250\n    },\n    suffix: \"%\"\n  }))), __jsx(_Col, {\n    span: 10\n  }, __jsx(_Form.Item, {\n    label: \"\",\n    name: \"unitPriceFour\",\n    rules: [{\n      required: true,\n      message: '请输入保底单价'\n    }, ({\n      getFieldValue\n    }) => ({\n      validator(rule, value) {\n        var reg = /^(([0-9]+)|([0-9]+\\.[0-9]{0,4}))$/;\n\n        if (value && !reg.test(value)) {\n          return Promise.reject('请输入大于等于0的数，并且最多保留4位小数');\n        }\n\n        if (value > 99999) {\n          return Promise.reject('请输入小于99999的数');\n        }\n\n        return Promise.resolve();\n      }\n\n    })]\n  }, __jsx(_Input, {\n    placeholder: \"\\u65E0\\u4FDD\\u5E95\\u4EF7\\u683C\\u65F6\\uFF0C\\u8BF7\\u586B\\u201C0\\u201D\",\n    style: {\n      width: 250\n    },\n    suffix: \"\\u5143/\\u7B14\"\n  })))), __jsx(\"p\", {\n    style: {\n      fontWeight: 'bold'\n    }\n  }, \"\\u4EE3\\u4ED8\"), __jsx(\"div\", {\n    style: {\n      color: '#666666'\n    }\n  }, __jsx(_Row, {\n    gutter: 20\n  }, __jsx(_Col, {\n    span: 10\n  }, \"\\u5BF9\\u79C1\\u5355\\u4EF7\"))), __jsx(_Row, {\n    gutter: 20,\n    style: {\n      marginTop: 20\n    }\n  }, __jsx(_Col, {\n    span: 10\n  }, __jsx(_Form.Item, {\n    label: \"\",\n    name: \"unitPriceFive\",\n    rules: [{\n      required: true,\n      message: '请输入保底单价'\n    }, ({\n      getFieldValue\n    }) => ({\n      validator(rule, value) {\n        var reg = /^(([0-9]+)|([0-9]+\\.[0-9]{0,4}))$/;\n\n        if (value && !reg.test(value)) {\n          return Promise.reject('请输入大于等于0的数，并且最多保留4位小数');\n        }\n\n        if (value > 99999) {\n          return Promise.reject('请输入小于99999的数');\n        }\n\n        return Promise.resolve();\n      }\n\n    })]\n  }, __jsx(_Input, {\n    placeholder: \"\\u8BF7\\u8F93\\u5165\\u4FDD\\u5E95\\u5355\\u4EF7\",\n    style: {\n      width: 250\n    },\n    suffix: \"\\u5143/\\u7B14\"\n  })))), __jsx(\"p\", {\n    style: {\n      fontWeight: 'bold'\n    }\n  }, \"\\u94F6\\u884C\\u5361\\u9A8C\\u8BC1\"), __jsx(\"div\", {\n    style: {\n      color: '#666666'\n    }\n  }, __jsx(_Row, {\n    gutter: 20\n  }, __jsx(_Col, {\n    span: 10\n  }, \"\\u4E94\\u8981\\u7D20\\u9A8C\\u8BC1\"))), __jsx(_Row, {\n    gutter: 20,\n    style: {\n      marginTop: 20\n    }\n  }, __jsx(_Col, {\n    span: 10\n  }, __jsx(_Form.Item, {\n    label: \"\",\n    name: \"unitPriceSix\",\n    rules: [{\n      required: true,\n      message: '请输入五要素验证单价'\n    }, ({\n      getFieldValue\n    }) => ({\n      validator(rule, value) {\n        var reg = /^(([0-9]+)|([0-9]+\\.[0-9]{0,4}))$/;\n\n        if (value && !reg.test(value)) {\n          return Promise.reject('请输入大于等于0的数，并且最多保留4位小数');\n        }\n\n        if (value > 99999) {\n          return Promise.reject('请输入小于99999的数');\n        }\n\n        return Promise.resolve();\n      }\n\n    })]\n  }, __jsx(_Input, {\n    placeholder: \"\\u8BF7\\u8F93\\u5165\\u4E94\\u8981\\u7D20\\u9A8C\\u8BC1\\u5355\\u4EF7\",\n    style: {\n      width: 250\n    },\n    suffix: \"\\u5143/\\u6B21\"\n  }))))) : __jsx(_Card, {\n    title: \"\\u8BA1\\u8D39\\u4FE1\\u606F\",\n    headStyle: {\n      paddingLeft: 20,\n      fontWeight: 700,\n      fontSize: 18,\n      paddingBottom: -60\n    },\n    style: {\n      padding: '0 30px',\n      marginTop: 30,\n      height: 300\n    }\n  }, __jsx(\"p\", {\n    style: {\n      color: '#666666'\n    }\n  }, \"\\u6BCF\\u65E5\\u8BA1\\u63D0\"), __jsx(\"p\", {\n    style: {\n      color: '#262626'\n    }\n  }, \"\\u5F53\\u65E5\\u5229\\u606F\\u6536\\u5165 - \\u5F53\\u65E5\\u8D37\\u6B3E\\u4F59\\u989D * 7% / 360\"), __jsx(\"p\", {\n    style: {\n      color: '#666666'\n    }\n  }, \"\\u6BCF\\u6708\\u7ED3\\u7B97\"), __jsx(\"p\", {\n    style: {\n      color: '#262626'\n    }\n  }, \"\\u82E5M3+ \\u2264 1%\\uFF0C\\u6708\\u7ED3\\u7B97\\u989D = \\u6309\\u6BCF\\u65E5\\u8BA1\\u63D0\\u6C47\\u603B\\u989D\\uFF1B\"), __jsx(\"p\", {\n    style: {\n      color: '#262626'\n    }\n  }, \"\\u82E5M3+ \\uFF1E 1%\\uFF0C\\u6708\\u7ED3\\u7B97\\u989D = \\u6309\\u6BCF\\u65E5\\u8BA1\\u63D0\\u6C47\\u603B\\u989D - \\u5F53\\u6708\\u65E5\\u5747\\u8D37\\u6B3E * \\uFF08M3 - 1%\\uFF09/ 360 * \\u5F53\\u6708\\u5929\\u6570\")), flag == 1 ? __jsx(\"div\", {\n    style: {\n      position: 'fixed',\n      top: 0,\n      left: 200,\n      bottom: 0,\n      right: 600,\n      zIndex: 9999\n    }\n  }) : __jsx(_Card, {\n    style: {\n      padding: '0 30px',\n      marginTop: 30\n    }\n  }, __jsx(\"span\", {\n    style: {\n      position: 'absolute',\n      right: 20,\n      top: 10\n    }\n  }, __jsx(_Button, {\n    style: {\n      marginRight: 20\n    },\n    onClick: handleCanel\n  }, \"\\u53D6\\u6D88\"), __jsx(_Button, {\n    type: \"primary\",\n    onClick: determine\n  }, \"\\u786E\\u5B9A\")))));\n}\n\nbody.getInitialProps = async () => ({});\n\nexport default withRouter(body);","map":null,"metadata":{},"sourceType":"module"}