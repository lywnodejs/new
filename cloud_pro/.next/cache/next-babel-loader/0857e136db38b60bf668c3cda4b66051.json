{"ast":null,"code":"import \"antd/lib/space/style\";\nimport _Space from \"antd/lib/space\";\nimport \"antd/lib/modal/style\";\nimport _Modal from \"antd/lib/modal\";\nimport \"antd/lib/message/style\";\nimport _message from \"antd/lib/message\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Layout } from '~/components/Layout';\nimport { InfoCircleFilled } from '@ant-design/icons';\nimport React, { useEffect, useState } from 'react';\nimport { useCookies } from 'react-cookie';\nimport Router, { withRouter } from 'next/router';\nimport api from '~/api/business';\nimport apiOrder from '~/api/order';\nimport apiProduct from '~/api/product';\nimport SearchForm from './SearchForm';\nimport TableList from './TableList';\nimport AssignModal from '~/components/common/AssignBusinessModal';\nconst pageParams = {\n  pageNo: 1,\n  pageSize: 10\n};\nlet values = {};\nconst breadcrumbs = [{\n  text: '客户经理管理'\n}, {\n  text: '业务总列表'\n}];\n\nfunction body({\n  verifyStatus,\n  applyStatusList,\n  applySource,\n  applyOrderList,\n  distribution,\n  orderStatus\n}) {\n  const {\n    0: productList,\n    1: setProductList\n  } = useState([]);\n  const [cookies] = useCookies(['tenantId']);\n  const {\n    0: list,\n    1: setList\n  } = useState({});\n  const {\n    0: visible,\n    1: setVisible\n  } = useState(false);\n  const {\n    0: orderIds,\n    1: setOrderIds\n  } = useState([]);\n  const {\n    0: alloctOrderIds,\n    1: setAlloctOrderIds\n  } = useState([]);\n  useEffect(() => {\n    onSearch({\n      orderStatus: 2\n    });\n    getProducts();\n  }, []);\n\n  const fetchList = async (values = {}) => {\n    try {\n      const {\n        data: {\n          data,\n          code\n        }\n      } = await api.fetch_all_order(_objectSpread(_objectSpread(_objectSpread({}, pageParams), values), {}, {\n        tenantId: cookies.tenantId\n      }));\n\n      if (code == 0) {\n        setList(data);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const getProducts = async () => {\n    try {\n      const {\n        data: {\n          data,\n          code\n        }\n      } = await apiProduct.get_products({\n        tenantId: cookies.tenantId\n      });\n\n      if (code == 0) {\n        setProductList(data);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const onSearch = async value => {\n    values = value;\n    pageParams.pageNo = 1;\n    fetchList(_objectSpread({}, values));\n  };\n\n  const onPage = async (pageNo, pageSize) => {\n    pageParams.pageNo = pageNo;\n    pageParams.pageSize = pageSize;\n    fetchList(values);\n  };\n\n  const appendToOrderIds = ids => {\n    setOrderIds(ids);\n  };\n\n  const onPartialAssign = ids => {\n    let orderIdArr = ids || orderIds;\n    setAlloctOrderIds(orderIdArr);\n\n    if (Array.isArray(orderIdArr) && !orderIdArr.length) {\n      return _message.error('请先选择要分配的订单');\n    }\n\n    let hasStatus1 = orderIdArr.some(id => {\n      let itemData = list.list.find(item => item.id == id);\n      return itemData.orderStatus == 1;\n    });\n\n    if (hasStatus1) {\n      _Modal.confirm({\n        content: '确定将已补充状态的订单重新分配客户经理？',\n        onOk: () => {\n          setVisible(true);\n        }\n      });\n    } else {\n      setVisible(true);\n    }\n  }; // 单个分配\n\n\n  const allocat = data => {\n    let ids = [data.id]; // setOrderIds(ids)\n\n    onPartialAssign(ids);\n  };\n\n  const onHide = () => {\n    // setOrderIds([])\n    setVisible(false);\n  };\n\n  const onAssignSubmit = async ({\n    orderIds,\n    giveAccountManagerId\n  }) => {\n    try {\n      const {\n        data: {\n          data,\n          code\n        }\n      } = await api.dateAssign({\n        orderIds,\n        giveAccountManagerId\n      });\n\n      if (code == 0) {\n        _message.success(`选择分配成功`);\n\n        setVisible(false);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return __jsx(Layout, {\n    breadcrumbs: breadcrumbs\n  }, __jsx(_Space, {\n    direction: \"vertical\",\n    size: \"large\",\n    style: {\n      width: '100%'\n    }\n  }, __jsx(SearchForm, {\n    onSearch,\n    onPartialAssign,\n    productList,\n    applySource,\n    applyOrderList,\n    applyStatusList,\n    distribution,\n    orderStatus\n  }), __jsx(TableList, {\n    list,\n    onPage,\n    pageParams,\n    appendToOrderIds,\n    Router,\n    allocat,\n    productList,\n    applySource,\n    applyOrderList,\n    applyStatusList,\n    distribution,\n    orderStatus\n  })), __jsx(AssignModal, {\n    orderIds: alloctOrderIds,\n    visible: visible,\n    onHide: onHide,\n    pullData: onPage,\n    tenantId: cookies.tenantId,\n    onAssignSubmit: onAssignSubmit\n  }));\n}\n\nbody.getInitialProps = async () => {\n  const backData = {\n    checkProgressList: [],\n    statusList: [],\n    applyStatusList: [],\n    applySource: [],\n    applyOrderList: [],\n    distribution: [],\n    orderStatus: []\n  };\n\n  try {\n    const [{\n      data: {\n        data,\n        code\n      }\n    }, {\n      data: {\n        data: statusList,\n        code: statusCode\n      }\n    }, {\n      data: {\n        data: applyStatusList,\n        code: applyStatusCode\n      }\n    }, {\n      data: {\n        data: applySource,\n        code: applySourceCode\n      }\n    }, {\n      data: {\n        data: applyOrderList,\n        code: applyOrderCode\n      }\n    }, {\n      data: {\n        data: distribution,\n        code: distributionCode\n      }\n    }, {\n      data: {\n        data: orderStatus,\n        code: orderStatusCOde\n      }\n    }] = await Promise.all([apiOrder.get_data_dict('LOAN_CHECK_PROGRESS'), apiOrder.get_data_dict('LOAN_ORDER_STATUS'), apiOrder.get_data_dict('LOAN_APPLY_STATUS'), apiOrder.get_data_dict('LOAN_APPLY_SOURCE'), apiOrder.get_data_dict('LOAN_ORDER_TYPE'), apiOrder.get_data_dict('ACCOUNT_MANAGER_SELL_STATUS'), apiOrder.get_data_dict('ACCOUNT_MANAGER_ORDER_STATUS')]);\n\n    if (code == 0) {\n      return {\n        checkProgressList: data,\n        statusList: statusCode === 0 ? statusList : [],\n        applyStatusList: applyStatusCode === 0 ? applyStatusList : [],\n        applySource: applySourceCode === 0 ? applySource : [],\n        applyOrderList: applyOrderCode === 0 ? applyOrderList : [],\n        distribution: distributionCode === 0 ? distribution : [],\n        orderStatus: orderStatusCOde === 0 ? orderStatus : []\n      };\n    }\n\n    backData.code = code;\n    return backData;\n  } catch (err) {\n    console.log(err);\n    return backData;\n  }\n};\n\nexport default withRouter(body);","map":null,"metadata":{},"sourceType":"module"}