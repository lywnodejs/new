{"ast":null,"code":"import \"antd/lib/modal/style\";\nimport _Modal from \"antd/lib/modal\";\nimport \"antd/lib/row/style\";\nimport _Row from \"antd/lib/row\";\nimport \"antd/lib/col/style\";\nimport _Col from \"antd/lib/col\";\nimport \"antd/lib/message/style\";\nimport _message from \"antd/lib/message\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect, useState } from 'react';\nimport { useCookies } from 'react-cookie';\nimport api from '~/api/collection';\nimport TreeMembers from './TreeMembers';\n\nfunction AssignModal(props) {\n  var visible = props.visible,\n      onHide = props.onHide,\n      orderIds = props.orderIds,\n      pullData = props.pullData,\n      tenantId = props.tenantId,\n      onAssignSubmit = props.onAssignSubmit,\n      sourceCom = props.sourceCom;\n\n  var _useState = useState([]),\n      pids = _useState[0],\n      setPids = _useState[1];\n\n  var _useState2 = useState([]),\n      accountIds = _useState2[0],\n      setAccountIds = _useState2[1];\n\n  var _useState3 = useState([]),\n      accountNames = _useState3[0],\n      setAccountNames = _useState3[1];\n\n  var _useState4 = useState([]),\n      companyIds = _useState4[0],\n      setCompanyIds = _useState4[1];\n\n  useEffect(function () {\n    function fetchData() {\n      return _fetchData.apply(this, arguments);\n    }\n\n    function _fetchData() {\n      _fetchData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return _fetchData.apply(this, arguments);\n    }\n\n    visible && fetchData();\n  }, [visible]);\n\n  var onEdit = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var pidSource, pidTarget, _yield$api$edit_overd, _yield$api$edit_overd2, data, code;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              console.log(pids);\n              _context2.prev = 1;\n\n              if (!pids.length) {\n                _context2.next = 7;\n                break;\n              }\n\n              pidSource = Math.max.apply(null, pids);\n              pidTarget = Math.min.apply(null, pids);\n\n              if (!(pidSource !== pidTarget)) {\n                _context2.next = 7;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", _message.error('分配对象需同一岗位级别'));\n\n            case 7:\n              if (accountIds.length) {\n                _context2.next = 9;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", _message.error(\"\\u8BF7\\u9009\\u62E9\\u8981\\u5206\\u914D\\u7684\".concat(onAssignSubmit && sourceCom != 'cs' ? '信审员' : sourceCom == 'cs' ? '所选人数' : '催收员')));\n\n            case 9:\n              if (!(orderIds.length < accountIds.length)) {\n                _context2.next = 11;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", _message.error(\"\".concat(onAssignSubmit && sourceCom != 'cs' ? '订单数量不能小于信审员数量' : sourceCom == 'cs' ? '分配单数不能小于所选人数' : '催收单数量不能小于催收员数量')));\n\n            case 11:\n              if (!onAssignSubmit) {\n                _context2.next = 14;\n                break;\n              }\n\n              typeof onAssignSubmit === 'function' && onAssignSubmit({\n                orderIds: orderIds,\n                accountIds: accountIds,\n                accountNames: accountNames,\n                assignType: 1\n              });\n              return _context2.abrupt(\"return\");\n\n            case 14:\n              _context2.next = 16;\n              return api.edit_overdueAlloc_allselect({\n                type: 1,\n                collectionOrderIdList: orderIds,\n                accountIdList: accountIds,\n                accountNameList: accountNames,\n                companyIdList: companyIds,\n                tenantId: tenantId\n              });\n\n            case 16:\n              _yield$api$edit_overd = _context2.sent;\n              _yield$api$edit_overd2 = _yield$api$edit_overd.data;\n              data = _yield$api$edit_overd2.data;\n              code = _yield$api$edit_overd2.code;\n\n              if (code == 0) {\n                onHide();\n\n                _message.success('选择分配成功');\n\n                pullData();\n              }\n\n              _context2.next = 26;\n              break;\n\n            case 23:\n              _context2.prev = 23;\n              _context2.t0 = _context2[\"catch\"](1);\n              console.log('Failed:', _context2.t0);\n\n            case 26:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[1, 23]]);\n    }));\n\n    return function onEdit() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(_Modal, {\n    title: \"\\u9009\\u62E9\\u5206\\u914D\",\n    maskClosable: false,\n    visible: visible,\n    onOk: onEdit,\n    onCancel: onHide,\n    cancelText: \"\\u53D6\\u6D88\",\n    okText: \"\\u786E\\u5B9A\",\n    width: 600,\n    height: 600\n  }, __jsx(_Row, {\n    gutter: [0, 16]\n  }, __jsx(_Col, {\n    span: 4\n  }, \"\\u9009\\u4E2D\\u6570\\u91CF\\uFF1A\"), __jsx(_Col, {\n    span: 20\n  }, Array.isArray(orderIds) ? orderIds.length : 0, \"\\u4E2A\\uFF0C\\u8BF7\\u9009\\u62E9\\u5206\\u914D\\u5BF9\\u8C61\")), __jsx(_Row, {\n    gutter: [0, 260]\n  }, __jsx(_Col, {\n    span: 2\n  }, \"\\u4EBA\\u5458\\uFF1A\"), __jsx(_Col, {\n    span: 22\n  }, __jsx(TreeMembers, {\n    onSetPids: function onSetPids(payload) {\n      return setPids(payload);\n    },\n    onSetAccountIds: function onSetAccountIds(payload) {\n      return setAccountIds(payload);\n    },\n    onSetAccountNames: function onSetAccountNames(payload) {\n      return setAccountNames(payload);\n    },\n    onSetCompanyIds: function onSetCompanyIds(payload) {\n      return setCompanyIds(payload);\n    }\n  }))));\n}\n\nexport default AssignModal;","map":null,"metadata":{},"sourceType":"module"}