{"ast":null,"code":"import \"antd/lib/space/style\";\nimport _Space from \"antd/lib/space\";\nimport \"antd/lib/form/style\";\nimport _Form from \"antd/lib/form\";\nimport \"antd/lib/table/style\";\nimport _Table from \"antd/lib/table\";\nimport \"antd/lib/select/style\";\nimport _Select from \"antd/lib/select\";\nimport \"antd/lib/date-picker/style\";\nimport _DatePicker from \"antd/lib/date-picker\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useEffect, useState, useRef } from 'react';\nimport { Layout } from '~/components/Layout';\nimport moment from 'moment';\nimport { biFetch } from '~/utils/fetch';\nimport { CSVLink } from 'react-csv';\nimport { Search } from '../reject';\nconst breadcrumbs = [{\n  text: 'BI报表'\n}, {\n  text: '贷前分析'\n}, {\n  text: '授信额度分布'\n}];\nconst {\n  RangePicker\n} = _DatePicker;\nconst {\n  Option\n} = _Select;\nconst pages = {\n  pageNo: 1,\n  pageSize: 20\n};\nconst startDate = moment().subtract(7, 'days').format('YYYY-MM-DD');\nconst endDate = moment().subtract(1, 'days').format('YYYY-MM-DD');\n\nconst fetchList = async (params = _objectSpread({\n  startDate,\n  endDate\n}, pages)) => {\n  for (const [key, value] of Object.entries(params)) {\n    if (!value) {\n      delete params[key];\n    }\n  }\n\n  const startDate = Array.isArray(params.date) ? moment(params.date[0]).format('YYYY-MM-DD') : undefined;\n  const endDate = Array.isArray(params.date) ? moment(params.date[1]).format('YYYY-MM-DD') : undefined;\n  delete params.date;\n  return await biFetch('/loan/pre/analysis/applyQuotaDist', _objectSpread({\n    startDate,\n    endDate\n  }, params));\n};\n\nconst TableList = ({\n  onPage,\n  data: {\n    extra = [],\n    list = [],\n    pageRet = {}\n  }\n}) => {\n  extra = extra || [];\n  const columns = [{\n    title: '申请日期',\n    dataIndex: 'statDate',\n    align: 'left'\n  }, {\n    title: '渠道',\n    dataIndex: 'srcChannel',\n    align: 'left'\n  }, {\n    title: '授信总笔数',\n    dataIndex: 'totalCreditNum',\n    align: 'left'\n  }, ...extra.map(v => {\n    return {\n      dataIndex: v.key,\n      title: v.name,\n      align: 'left'\n    };\n  })];\n\n  const onShowSizeChange = (current, size) => {\n    console.log(current, size);\n    pagination.pageSize = size;\n  };\n\n  const pagination = {\n    position: 'bottom',\n    total: pageRet.totalCount,\n    pageSize: pages.pageSize,\n    showTotal: total => `共 ${pageRet.totalCount} 条记录`,\n    onChange: onPage,\n    onShowSizeChange\n  };\n  return __jsx(_Table, {\n    rowKey: \"statDate\",\n    dataSource: list,\n    columns: columns,\n    pagination: pagination\n  });\n};\n\nconst body = ({\n  list,\n  channels,\n  products\n}) => {\n  const [form] = _Form.useForm();\n\n  let {\n    0: data,\n    1: setData\n  } = useState(list);\n\n  const onSearch = async values => {\n    const {\n      data: {\n        code,\n        data\n      }\n    } = await fetchList(_objectSpread(_objectSpread({}, values), pages));\n\n    if (code === 0) {\n      setData(data);\n    }\n  };\n\n  const onPage = page => {\n    const values = form.getFieldsValue();\n    pages.pageNo = page;\n    onSearch(values);\n  };\n\n  return __jsx(Layout, {\n    breadcrumbs: breadcrumbs\n  }, __jsx(_Space, {\n    direction: \"vertical\",\n    size: \"large\",\n    style: {\n      width: '100%'\n    }\n  }, __jsx(Search, {\n    onSearch,\n    channels,\n    products,\n    form,\n    fetchList\n  }), __jsx(TableList, {\n    data: data\n  })));\n};\n\nbody.getInitialProps = async () => {\n  try {\n    const [{\n      data: {\n        code,\n        data: list = {}\n      }\n    }, {\n      data: {\n        data: channels = []\n      }\n    }, {\n      data: {\n        data: products = []\n      }\n    }] = await Promise.all([fetchList(), biFetch('/common/allChannel'), biFetch('/common/allProduct')]); // console.log(list, channels)\n\n    return {\n      list,\n      channels,\n      products\n    };\n  } catch (e) {\n    console.log(e);\n  }\n\n  return {\n    list: {},\n    channels: [],\n    products: []\n  };\n};\n\nexport default body;","map":null,"metadata":{},"sourceType":"module"}