{"ast":null,"code":"import { gwRequest, get, request, post } from '~/utils/fetch';\nexport default {\n  fetch_all_order: function fetch_all_order(params) {\n    return request(\"loan/distributionQueryOrderList\", 'get', params);\n  },\n  dateAssign: function dateAssign(params) {\n    return request(\"loan/distributionAccountManager\", 'post', params);\n  },\n  getBranchList: function getBranchList(params) {\n    return gwRequest('bank.api.usermanageraccountservice.searchnetworks', [params]);\n  },\n  getBranch4other: function getBranch4other(params) {\n    return gwRequest('bank.api.usermanageraccountservice.getnetworkbydepartmentid', [{}]);\n  },\n  getNetworkDepartmentTree: function getNetworkDepartmentTree(params) {\n    return gwRequest('bank.api.usermanageraccountservice.getnetworkdepartmenttree', [{}]);\n  },\n  editBranchItem: function editBranchItem(params) {\n    var methodName = params.id ? 'bank.api.usermanageraccountservice.editnetwork' : 'bank.api.usermanageraccountservice.addnetwork';\n    return gwRequest(methodName, [params]);\n  },\n  deleteBranch: function deleteBranch(id) {\n    return gwRequest('bank.api.usermanageraccountservice.deletenetwork', [{\n      id: id\n    }]);\n  },\n  getManagerList: function getManagerList(params) {\n    return gwRequest('bank.api.usermanageraccountservice.searchallusermanager', [params]);\n  },\n  editManagerItem: function editManagerItem(params) {\n    var methodName = params.id ? 'bank.api.usermanageraccountservice.updatemanages' : 'bank.api.usermanageraccountservice.insertmanages';\n    return gwRequest(methodName, [params]);\n  },\n  deleteManager: function deleteManager(id) {\n    return gwRequest('bank.api.usermanageraccountservice.deletemanages', [{\n      id: id\n    }]);\n  },\n  updateManagerStatus: function updateManagerStatus(params) {\n    return gwRequest('bank.api.usermanageraccountservice.updatemanagesstatus', [params]);\n  },\n  getOrders: function getOrders(params) {\n    return gwRequest('bank.api.usermanageraccountservice.searchorders', [params]);\n  },\n  getUsers: function getUsers() {\n    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return gwRequest('bank.api.usermanageraccountservice.getusermanageraccounttree', [params]);\n  },\n  updateAssign: function updateAssign(params) {\n    return gwRequest('bank.api.usermanageraccountservice.giveordertouser', [params]);\n  },\n  getNetWorks: function getNetWorks(params) {\n    return gwRequest('bank.api.branchnetworkservice.getnetworklist', [params]);\n  },\n  getAchievementByNetwork: function getAchievementByNetwork(params) {\n    return gwRequest('bank.api.newusermanagerachievementservice.getachievementbynetwork', [params]);\n  },\n  getAchievementByManager: function getAchievementByManager(params) {\n    return gwRequest('bank.api.newusermanagerachievementservice.getachievementbymanager', [params]);\n  },\n  getManagerByNetworkId: function getManagerByNetworkId(params) {\n    return gwRequest('bank.api.usermanageraccountservice.getmanagerbynetworkid', [params]);\n  },\n  getTaskList: function getTaskList(params) {\n    return gwRequest('bank.api.distributestatisticsservice.distributestatistics', [params]);\n  },\n  exportTaskData: function exportTaskData(params) {\n    return gwRequest('bank.api.distributestatisticsservice.statisticsexport', [params]);\n  },\n  getNetwork4report: function getNetwork4report() {\n    return gwRequest('bank.api.newusermanagerachievementservice.getnetworklist', [{}]);\n  },\n  getProduct4report: function getProduct4report(params) {\n    return gwRequest('bank.api.newusermanagerachievementservice.getproductlist', [params]);\n  },\n  exportReportData: function exportReportData(params) {\n    return gwRequest('bank.api.newusermanagerachievementservice.statisticsexport', [params]);\n  },\n  getDepart4select: function getDepart4select() {\n    return gwRequest(\"bank.api.usermanageraccountservice.getdepartmentlist\", [{}]);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}