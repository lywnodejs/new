{"ast":null,"code":"import \"antd/lib/row/style\";\nimport _Row from \"antd/lib/row\";\nimport \"antd/lib/col/style\";\nimport _Col from \"antd/lib/col\";\nimport \"antd/lib/card/style\";\nimport _Card from \"antd/lib/card\";\nimport \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/message/style\";\nimport _message from \"antd/lib/message\";\nimport \"antd/lib/tree/style\";\nimport _Tree from \"antd/lib/tree\";\nvar __jsx = React.createElement;\nimport { Layout } from '~/components/Layout';\nimport React, { useEffect, useState, useRef } from 'react';\nimport Router, { withRouter } from 'next/router';\nimport api from '~/api/authority';\nconst breadcrumbs = [{\n  text: '权限管理'\n}, {\n  text: '角色管理'\n}, {\n  text: '权限配置'\n}]; // const fixTabs = [\n//   '业务看板',\n//   '产品管理',\n//   '进件管理',\n//   '风控管理',\n//   '信审管理',\n//   '贷后管理',\n//   '营销管理',\n//   '账务管理',\n//   '协议管理',\n//   '权限管理',\n//   '系统设置管理',\n// ]\n\nfunction body(props) {\n  const t = useRef();\n  const {\n    0: showLine,\n    1: setShowLine\n  } = useState(true);\n  const {\n    0: activeIndex,\n    1: setActiveIndex\n  } = useState(-1);\n  const {\n    0: allBtnToPageMap,\n    1: setAllBtnToPageMap\n  } = useState([]);\n  const {\n    0: parentIdMap,\n    1: setParentIdMap\n  } = useState([]);\n  const {\n    0: fixTabs,\n    1: setFixTabs\n  } = useState([]);\n  const {\n    0: resourceTypesMap,\n    1: setResourceTypesMap\n  } = useState([{\n    type: 3,\n    expandedKeys: [],\n    checkedKeys: [],\n    autoExpandParent: true,\n    selectedKeys: []\n  }, {\n    type: 4,\n    expandedKeys: [],\n    checkedKeys: [],\n    autoExpandParent: true,\n    selectedKeys: []\n  }]);\n  const {\n    0: allList,\n    1: setAllList\n  } = useState([]);\n  const {\n    0: leftList,\n    1: setLeftList\n  } = useState([]);\n  const {\n    0: rightList,\n    1: setRightList\n  } = useState([]);\n  const {\n    0: roleName,\n    1: setRoleName\n  } = useState([]);\n  useEffect(() => {\n    function fetchData() {\n      fetchRole();\n      fetchList();\n    }\n\n    fetchData();\n  }, []);\n\n  const fetchRole = async () => {\n    try {\n      const {\n        data: {\n          data,\n          code\n        }\n      } = await api.get_one_role(props.router.query.roleId);\n\n      if (code === 0) {\n        setRoleName(data.roleName);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const fetchList = async (values = {}) => {\n    try {\n      const {\n        data: {\n          data,\n          code\n        }\n      } = await api.get_resource('get', {\n        roleId: props.router.query.roleId\n      });\n\n      if (code === 0) {\n        const list = [{\n          id: 0,\n          resourceType: 3,\n          hasAuth: 1,\n          parentResourceId: null,\n          pageName: '互联网核心系统',\n          children: data,\n          key: '0',\n          title: '互联网核心系统',\n          disabled: true\n        }];\n        const names = data.map(v => v.pageName);\n        setFixTabs(names);\n        addKeyAndTitleToChildren(list[0]);\n        let leftList = JSON.parse(JSON.stringify(list));\n        handleAllCheckAndExpand(list);\n        setAllList(list);\n        delFromList(leftList);\n        setResourceTypesMap([...resourceTypesMap]);\n        setAllBtnToPageMap([...allBtnToPageMap]);\n        setLeftList([...leftList]);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const addKeyAndTitleToChildren = list => {\n    if (Array.isArray(list.children) && list.children.length) {\n      list.children.forEach(one => {\n        one.key = String(one.id);\n        one.title = one.pageName;\n        addKeyAndTitleToChildren(one);\n      });\n    }\n  };\n\n  const delFromList = leftList => {\n    for (var i = 0; i < leftList.length; i++) {\n      if (leftList[i].resourceType && leftList[i].resourceType == 4) {\n        allBtnToPageMap.push({\n          id: leftList[i].id,\n          key: String(leftList[i].id),\n          title: leftList[i].pageName,\n          children: leftList[i].children\n        });\n        leftList[i].splice(i, 1);\n      }\n\n      mapAttrToChildren(leftList[i], 1);\n    }\n  };\n\n  const handleAllCheckAndExpand = allLists => {\n    if (Array.isArray(allLists) && allLists.length) {\n      allLists.forEach(item => {\n        handleOneCheckAndExpand(item, 0);\n        mapAttrToChildren(item, 0, 1);\n      });\n    }\n  };\n\n  const handleOneCheckAndExpand = (list, last) => {\n    // let findOne = resourceTypesMap.filter(\n    //   (one) => one.type == list.resourceType,\n    // )\n    let findOne = [resourceTypesMap[0]]; // console.log(findOne)\n    // debugger\n\n    list.hasAuth && findOne[0].checkedKeys.push(list.key);\n    findOne[0].expandedKeys.push(list.key);\n  };\n\n  const mapAttrToChildren = (mem, del, last) => {\n    const child = mem.children,\n          len = child.length;\n    let delChild = [];\n\n    if (child && len) {\n      for (let i = 0; i < len; i++) {\n        // if (\n        //   del &&\n        //   child[i] &&\n        //   child[i].resourceType &&\n        //   child[i].resourceType == 4\n        // ) {\n        //   delChild.push(child[i])\n        //   allBtnToPageMap.push({\n        //     id: mem.id,\n        //     key: String(mem.id),\n        //     title: mem.pageName,\n        //     children: delChild,\n        //   })\n        //   child.splice(i--, 1)\n        // }\n        if (!del) {\n          child[i].level = last;\n          handleOneCheckAndExpand(child[i], child[i].level);\n          mapIdToParentId(child[i]);\n        }\n\n        if (child[i] && child[i].children && child[i].children.length) {\n          del ? mapAttrToChildren(child[i], 1) : mapAttrToChildren(child[i], 0, ++child[i].level);\n        }\n      }\n    }\n  };\n\n  const mapIdToParentId = child => {\n    const {\n      id,\n      parentResourceId,\n      pageName\n    } = child;\n    parentIdMap.push({\n      id,\n      key: String(id),\n      parentResourceId,\n      pageName,\n      title: pageName\n    });\n    setParentIdMap([...parentIdMap]);\n  };\n\n  const findIndexInResourceTypes = type => {\n    return resourceTypesMap.findIndex(one => one.type == type);\n  };\n\n  const handleKeysToState = (type, obj) => {\n    const findIndex = findIndexInResourceTypes(type);\n    resourceTypesMap[findIndex][obj[0]] = obj[1];\n\n    if (obj[0] == 'expandedKeys') {\n      resourceTypesMap[findIndex].autoExpandParent = false;\n    }\n\n    setResourceTypesMap([...resourceTypesMap]);\n  };\n\n  const onExpand = (expandedKeys, info, type) => {\n    handleKeysToState(type, ['expandedKeys', expandedKeys]);\n  };\n\n  const findNodeInAllListOne = (treeData, id) => {\n    let findTree;\n\n    try {\n      const findNodeInAllList = (treeData, id) => {\n        if (treeData.id == id) {\n          throw treeData;\n        }\n\n        if (Array.isArray(treeData.children) && treeData.children.length) {\n          for (var i = 0; i < treeData.children.length; i++) {\n            if (treeData.children[i].id == id) {\n              throw treeData.children[i];\n            }\n\n            findNodeInAllList(treeData.children[i], id);\n          }\n        }\n      };\n\n      findNodeInAllList(treeData, id);\n    } catch (res) {\n      findTree = res;\n    }\n\n    return findTree;\n  };\n\n  const onCheck = ({\n    checked\n  }, {\n    node\n  }, type) => {\n    console.log('onCheck', checked);\n    console.log(node);\n    let keys = [];\n    let rightKeys = [];\n    node.children = findNodeInAllListOne(allList[0], node.id).children;\n\n    if (node.children) {\n      getChildrenKeys(node.children, rightKeys, 1);\n    }\n\n    console.log(rightKeys);\n\n    if (node.children) {\n      getChildrenKeys(node.children, keys);\n    }\n\n    const findIndex = findIndexInResourceTypes(type);\n\n    if (checked.length > resourceTypesMap[findIndex].checkedKeys.length) {\n      let pNode = parentKeys(node.key, type);\n      let pKeys = pNode.map(v => v.id + '');\n      let pLeftKeys = pNode.filter(v => v.resourceType == 3).map(v => v.id + '');\n      let pRightKeys = pNode.filter(v => v.resourceType == 4).map(v => v.id + '');\n      console.log(pKeys, 'cccc');\n      var k = checked.concat(pKeys.filter(function (v) {\n        return !(checked.indexOf(v) > -1);\n      }));\n\n      if (Array.isArray(pLeftKeys) && pLeftKeys.length && type == 4) {\n        var l = resourceTypesMap[0].checkedKeys.concat(pLeftKeys.filter(function (v) {\n          return !(resourceTypesMap[0].checkedKeys.indexOf(v) > -1);\n        }));\n        handleKeysToState(3, ['checkedKeys', [...l]]);\n      }\n\n      if (Array.isArray(pRightKeys) && pRightKeys.length && type == 4) {\n        var l = resourceTypesMap[0].checkedKeys.concat(pRightKeys.filter(function (v) {\n          return !(resourceTypesMap[0].checkedKeys.indexOf(v) > -1);\n        }));\n        handleKeysToState(4, ['checkedKeys', [...l]]);\n        return;\n      }\n\n      if (rightKeys.length && type == 3) {\n        console.log(rightKeys);\n        var r = resourceTypesMap[1].checkedKeys.concat(rightKeys.filter(function (v) {\n          return !(resourceTypesMap[1].checkedKeys.indexOf(v) > -1);\n        }));\n        handleKeysToState(4, ['checkedKeys', [...r]]);\n      }\n\n      handleKeysToState(type, ['checkedKeys', [...k, ...keys]]);\n    } else {\n      let k = checked.filter(v => {\n        return keys.indexOf(v) == -1;\n      });\n\n      if (rightKeys.length && type == 3) {\n        let r = resourceTypesMap[1].checkedKeys.filter(v => {\n          return rightKeys.indexOf(v) == -1;\n        });\n        handleKeysToState(4, ['checkedKeys', [...r]]);\n      }\n\n      handleKeysToState(type, ['checkedKeys', k]);\n    }\n  };\n\n  const parentKeys = (key, type) => {\n    let pKeys = [];\n    let pNode = [];\n    let treeData = allList;\n\n    for (let index in treeData) {\n      let tree = treeData[index];\n      pKeys = [];\n      pNode = [];\n\n      if (Array.isArray(tree.children) && tree.children.length > 0) {\n        pNode.push(tree);\n        getParentKeys(tree, key, pKeys, pNode);\n        console.log(pKeys);\n        console.log(pNode);\n\n        if (pKeys.length === 0) {\n          pNode.pop();\n        }\n      }\n\n      if (pKeys.length > 0) {\n        return pNode;\n      }\n    }\n\n    return pNode;\n  };\n\n  const getParentKeys = (tree, key, pKeys, pNode) => {\n    for (let index in tree.children) {\n      let item = tree.children[index];\n\n      if (item.id == key) {\n        pNode.push(item);\n        pKeys.push(tree.id);\n        return;\n      } else {\n        if (Array.isArray(item.children) && item.children.length > 0) {\n          pNode.push(item);\n          getParentKeys(item, key, pKeys, pNode);\n\n          if (pKeys.length === 0) {\n            pNode.pop();\n          } else {\n            return;\n          }\n        }\n      }\n    }\n  };\n\n  const getChildrenKeys = (tree, ids, isFilterType) => {\n    tree.forEach(item => {\n      if (isFilterType) {\n        if (item.resourceType == 4) {\n          ids.push(item.key);\n        }\n      } else {\n        ids.push(item.key);\n      }\n\n      if (Array.isArray(item.children)) {\n        getChildrenKeys(item.children, ids, isFilterType);\n      }\n    });\n  };\n\n  const onSelect = (selectedKeys, info, type) => {\n    console.log('onSelect', selectedKeys); // if (type == 4) {\n    //   return\n    // }\n\n    const findKey = allBtnToPageMap.filter(one => one.id == selectedKeys);\n    handleKeysToState(type, ['selectedKeys', selectedKeys]);\n    setRightList(findKey.length ? findKey[0].children : []);\n  };\n\n  const findParentById = id => {\n    return parentIdMap.filter(one => one.id == id)[0];\n  };\n\n  const renderTree = ({\n    expandedKeys,\n    autoExpandParent,\n    checkedKeys,\n    selectedKeys,\n    type\n  }, treeData) => {\n    return __jsx(_Tree, {\n      ref: t,\n      checkable: true,\n      checkStrictly: true,\n      showLine: showLine,\n      onExpand: (expandedKeys, info) => onExpand(expandedKeys, info, type),\n      expandedKeys: [...expandedKeys],\n      autoExpandParent: autoExpandParent,\n      onCheck: (checkedKeys, info) => onCheck(checkedKeys, info, type),\n      checkedKeys: [...checkedKeys],\n      onSelect: (selectedKeys, info) => onSelect(selectedKeys, info, type),\n      selectedKeys: [...selectedKeys],\n      treeData: treeData\n    });\n  };\n\n  const onRefresh = () => {\n    location.reload();\n  };\n\n  const onSubmit = async () => {\n    const {\n      checkedKeys\n    } = resourceTypesMap[0];\n    const {\n      checkedKeys: checkedKeysFt\n    } = resourceTypesMap[1];\n    let resourceIds = [...checkedKeys, ...checkedKeysFt];\n\n    for (var i = 0; i < resourceIds.length; i++) {\n      if (resourceIds[i] == 0) {\n        continue;\n      }\n\n      const {\n        parentResourceId\n      } = findParentById(resourceIds[i]);\n\n      if (!resourceIds.some(item => item == parentResourceId)) {\n        const {\n          pageName\n        } = findParentById(parentResourceId);\n\n        _message.error(`请先选择父节点\"${pageName}\"`);\n\n        return false;\n      }\n    }\n\n    resourceIds = resourceIds.join(',');\n\n    try {\n      const {\n        data: {\n          data,\n          code\n        }\n      } = await api.put_resource({\n        roleId: Number(props.router.query.roleId),\n        resourceIds\n      });\n\n      if (code == 0) {\n        _message.success('保存成功');\n\n        Router.back();\n      }\n    } catch (errorInfo) {\n      console.log('Failed:', errorInfo);\n    }\n  };\n\n  const onSwitch = (index, one) => {\n    var nodes = document.getElementsByClassName('ant-tree-list-holder-inner')[0].getElementsByClassName('ant-tree-node-content-wrapper');\n    const findNode = [...nodes].find(node => node.title === one);\n    document.getElementById('primaryLayout').scrollTop = findNode.offsetTop + 128;\n    setActiveIndex(index);\n  };\n\n  return __jsx(\"div\", {\n    style: {\n      marginTop: '46px'\n    }\n  }, __jsx(Layout, {\n    breadcrumbs: breadcrumbs\n  }, __jsx(\"div\", {\n    className: \"authorTab\"\n  }, fixTabs.map((one, index) => __jsx(\"p\", {\n    style: {\n      margin: '1em 15px 1em 0'\n    },\n    className: activeIndex == index ? 'tabActive' : '',\n    onClick: () => onSwitch(index, one)\n  }, one)), __jsx(\"div\", {\n    style: {\n      position: 'absolute',\n      right: '5px',\n      top: '9px'\n    }\n  }, __jsx(_Button, {\n    onClick: onRefresh\n  }, \"\\u5237\\u65B0\"), __jsx(_Button, {\n    type: \"primary\",\n    htmlType: \"button\",\n    onClick: onSubmit,\n    style: {\n      marginLeft: '5px'\n    }\n  }, \"\\u4FDD\\u5B58\"))), __jsx(_Card, {\n    title: `当前角色：${roleName}`\n  }, __jsx(_Row, {\n    gutter: 24\n  }, __jsx(_Col, {\n    span: 24\n  }, __jsx(_Card, {\n    type: \"inner\",\n    title: \"\\u9875\\u9762\"\n  }, renderTree(resourceTypesMap[0], leftList)))))));\n}\n\nbody.getInitialProps = async () => {\n  return {};\n};\n\nexport default withRouter(body);","map":null,"metadata":{},"sourceType":"module"}