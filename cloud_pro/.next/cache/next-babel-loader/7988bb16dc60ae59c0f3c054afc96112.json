{"ast":null,"code":"import \"antd/lib/table/style\";\nimport _Table from \"antd/lib/table\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { Layout } from '~/components/Layout';\nimport React, { useEffect, useState } from 'react';\nimport apiRegulatory from '~/api/regulatory';\nimport { REPORT_TYPE } from '~/utils/const';\nimport SearchForm from './searchForm';\nimport ImportData from './importData';\nconst pageParams = {\n  pageNo: 1,\n  pageSize: 10\n};\n\nconst getData = async (params = pageParams) => {\n  try {\n    let {\n      data: {\n        code,\n        data\n      }\n    } = await apiRegulatory.getCreditReportList(params);\n\n    if (code == 0) {\n      return data;\n    }\n\n    return {\n      totalSize: 0,\n      list: []\n    };\n  } catch (e) {\n    return {\n      totalSize: 0,\n      list: []\n    };\n  }\n};\n\nconst breadcrumbs = [{\n  text: '监管报送'\n}, {\n  text: '征信报送'\n}];\n\nfunction body(props) {\n  const {\n    0: data,\n    1: setData\n  } = useState(props.data);\n  const {\n    0: allCategory,\n    1: setAllCategory\n  } = useState([]);\n  const {\n    0: searchParams,\n    1: setSearchParams\n  } = useState({});\n  const {\n    0: allProducts,\n    1: setAllProducts\n  } = useState([]);\n  const {\n    0: visible,\n    1: setVisible\n  } = useState(false);\n  useEffect(() => {\n    getCategory();\n    getAllProducts();\n  }, []);\n\n  const getCategory = () => {\n    apiRegulatory.getCategory('credit_report').then(({\n      data: {\n        data,\n        code\n      }\n    }) => {\n      if (code == 0) {\n        setAllCategory(data);\n      }\n    });\n  };\n\n  const getAllProducts = () => {\n    apiRegulatory.getAllProducts().then(({\n      data: {\n        data,\n        code\n      }\n    }) => {\n      if (code == 0) {\n        setAllProducts(data);\n      }\n    });\n  };\n\n  const onSearch = (_ref) => {\n    let {\n      time\n    } = _ref,\n        params = _objectWithoutProperties(_ref, [\"time\"]);\n\n    setSearchParams(params);\n    pageParams.pageNo = 1;\n    updateList(_objectSpread(_objectSpread({}, params), pageParams));\n  };\n\n  const onChangePage = (pageNo = pageParams.pageNo) => {\n    pageParams.pageNo = pageNo;\n    updateList(_objectSpread(_objectSpread({}, searchParams), pageParams));\n  };\n\n  const updateList = async params => {\n    let data = await getData(_objectSpread({}, params));\n    setData(data);\n  };\n\n  const columns = [{\n    title: '借据号',\n    dataIndex: 'orderNum'\n  }, {\n    title: '手机号',\n    dataIndex: 'mobilePhone'\n  }, {\n    title: '债务人名称',\n    dataIndex: 'userName'\n  }, {\n    title: '债务人身份标识号码',\n    dataIndex: 'idCard'\n  }, {\n    title: '产品名称',\n    dataIndex: 'productName'\n  }, {\n    title: '信息记录类型',\n    dataIndex: 'reportInfoType'\n  }, {\n    title: '信息记录事件',\n    dataIndex: 'eventName'\n  }, {\n    title: '应上报日期',\n    dataIndex: 'needReportDate'\n  }, {\n    title: '上报标识',\n    dataIndex: 'reportStatus',\n    render: val => {\n      const item = REPORT_TYPE.find(v => v.key == val);\n      return item && item.name || '';\n    }\n  }].map(v => {\n    v.align = 'center';\n    return v;\n  });\n  const paginationConfig = {\n    total: data.totalSize,\n    current: pageParams.pageNo,\n    showSizeChanger: false,\n    showQuickJumper: true,\n    defaultPageSize: pageParams.pageSize,\n    showTotal: total => `共 ${total} 条`,\n    onChange: onChangePage\n  };\n  return __jsx(Layout, {\n    breadcrumbs: breadcrumbs\n  }, __jsx(SearchForm, {\n    search: onSearch,\n    importData: setVisible,\n    allCategory: allCategory,\n    allProducts: allProducts\n  }), __jsx(_Table, {\n    bordered: true,\n    rowKey: (v, i) => i,\n    pagination: paginationConfig,\n    columns: columns,\n    dataSource: data.list || []\n  }), __jsx(ImportData, {\n    setVisible: setVisible,\n    visible: visible\n  }));\n}\n\nbody.getInitialProps = async ctx => {\n  let data = await getData();\n  return {\n    data\n  };\n};\n\nexport default body;","map":null,"metadata":{},"sourceType":"module"}