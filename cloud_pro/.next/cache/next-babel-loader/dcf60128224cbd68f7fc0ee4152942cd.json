{"ast":null,"code":"import \"antd/lib/list/style\";\nimport _List from \"antd/lib/list\";\nimport \"antd/lib/divider/style\";\nimport _Divider from \"antd/lib/divider\";\nimport \"antd/lib/row/style\";\nimport _Row from \"antd/lib/row\";\nimport \"antd/lib/col/style\";\nimport _Col from \"antd/lib/col\";\nimport \"antd/lib/card/style\";\nimport _Card from \"antd/lib/card\";\nimport \"antd/lib/descriptions/style\";\nimport _Descriptions from \"antd/lib/descriptions\";\nimport \"antd/lib/space/style\";\nimport _Space from \"antd/lib/space\";\nimport \"antd/lib/avatar/style\";\nimport _Avatar from \"antd/lib/avatar\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState, useRef } from 'react';\nimport { Layout } from '~/components/Layout';\nimport api from '~/api/collection';\nimport { UserOutlined } from '@ant-design/icons';\nimport Media from '~/components/common/Media';\nimport styles from './index.less';\nconst breadcrumbs = [{\n  text: '贷后管理'\n}, {\n  text: '贷后检查管理'\n}, {\n  text: '检查详情'\n}];\n\nconst getData = async params => {\n  try {\n    const {\n      data: {\n        data,\n        code\n      }\n    } = await api.getCheckResult(params);\n    return code == 0 ? data : {};\n  } catch (e) {\n    console.error(e);\n    return {};\n  }\n};\n\nfunction body(props) {\n  const {\n    0: detail,\n    1: setDetail\n  } = useState(props.detail);\n  return __jsx(Layout, {\n    breadcrumbs: breadcrumbs\n  }, __jsx(_Card, {\n    style: {\n      marginBottom: 30\n    }\n  }, __jsx(_Space, {\n    align: \"center\",\n    size: 15,\n    style: {\n      marginBottom: 25\n    }\n  }, __jsx(_Avatar, {\n    size: 64,\n    icon: __jsx(UserOutlined, null)\n  }), __jsx(\"h3\", {\n    style: {\n      marginBottom: 0\n    }\n  }, detail.realName)), __jsx(_Descriptions, {\n    column: 6\n  }, __jsx(_Descriptions.Item, {\n    label: \"\\u8054\\u7CFB\\u7535\\u8BDD\"\n  }, detail.mobilePhone), __jsx(_Descriptions.Item, {\n    label: \"\\u501F\\u636E\\u53F7\"\n  }, detail.orderNum), __jsx(_Descriptions.Item, {\n    label: \"\\u501F\\u6B3E\\u5468\\u671F\"\n  }, detail.loanApplyTerm), __jsx(_Descriptions.Item, {\n    label: \"\\u7533\\u8BF7\\u65E5\\u671F\"\n  }, detail.loanApplyTime), __jsx(_Descriptions.Item, {\n    label: \"\\u5269\\u4F59\\u672C\\u91D1\"\n  }, detail.repayAmount), __jsx(_Descriptions.Item, {\n    label: \"\\u63D0\\u73B0\\u91D1\\u989D\"\n  }, detail.loanAmount))), __jsx(_List, {\n    grid: {\n      gutter: 16,\n      xs: 1,\n      sm: 2,\n      md: 3,\n      lg: 3,\n      xl: 3,\n      xxl: 4\n    },\n    dataSource: Array.isArray(detail.reviewOrder) ? detail.reviewOrder : [],\n    renderItem: item => __jsx(_List.Item, null, __jsx(_Card, {\n      title: item.creviewCreateTime\n    }, __jsx(_Row, {\n      gutter: 20,\n      className: styles.descItem\n    }, __jsx(_Col, {\n      className: styles.title\n    }, \"\\u68C0\\u67E5\\u7F16\\u53F7\"), __jsx(_Col, {\n      className: styles.desc\n    }, item.reviewOrderNum)), __jsx(_Row, null, __jsx(_Col, {\n      className: [styles.title, styles.descItem]\n    }, \"\\u53D1\\u8D77\\u68C0\\u67E5\"), __jsx(_Col, {\n      offset: 1,\n      className: styles.desc\n    }, __jsx(\"div\", null, \"\\u68C0\\u67E5\\u539F\\u56E0\\uFF1A\", item.reviewReason), __jsx(\"div\", null, \"\\u68C0\\u67E5\\u5185\\u5BB9\\uFF1A\", item.reviewContent))), __jsx(_Divider, null), Array.isArray(item.catAttrs) ? item.catAttrs.map((catAttr, i) => {\n      return __jsx(_Card, {\n        bodyStyle: {\n          padding: 0\n        },\n        headStyle: {\n          padding: 0\n        },\n        bordered: false,\n        title: __jsx(\"div\", {\n          className: styles.title\n        }, catAttr.catName),\n        key: i\n      }, __jsx(_Descriptions, {\n        column: 2,\n        style: {\n          marginTop: 15\n        }\n      }, Array.isArray(catAttr.list) ? catAttr.list.map((attr, index) => {\n        let showTemp = attr.showValue;\n        let type = attr.attrType;\n\n        if (type == 'image' || type == 'voice' || type == 'video') {\n          const showValue = attr.showValue ? attr.showValue.split(',') : [];\n          showTemp = __jsx(Media, {\n            type: type,\n            data: showValue\n          });\n        }\n\n        return __jsx(_Descriptions.Item, {\n          label: attr.attrName,\n          key: index\n        }, showTemp);\n      }) : null));\n    }) : null))\n  }));\n}\n\nbody.getInitialProps = async context => {\n  const {\n    id,\n    type\n  } = context.ctx.query;\n  const params = {\n    id,\n    type\n  };\n  const detail = await getData(params);\n  return {\n    detail,\n    params\n  };\n};\n\nexport default body;","map":null,"metadata":{},"sourceType":"module"}