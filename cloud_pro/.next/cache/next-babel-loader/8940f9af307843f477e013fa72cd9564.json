{"ast":null,"code":"import \"antd/lib/row/style\";\nimport _Row from \"antd/lib/row\";\nimport \"antd/lib/table/style\";\nimport _Table from \"antd/lib/table\";\nimport \"antd/lib/breadcrumb/style\";\nimport _Breadcrumb from \"antd/lib/breadcrumb\";\nimport \"antd/lib/col/style\";\nimport _Col from \"antd/lib/col\";\nimport \"antd/lib/space/style\";\nimport _Space from \"antd/lib/space\";\nimport \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/message/style\";\nimport _message from \"antd/lib/message\";\nimport \"antd/lib/modal/style\";\nimport _Modal from \"antd/lib/modal\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Layout } from '~/components/Layout';\nimport React, { useEffect, useState } from 'react';\nimport api from '~/api/authority';\nimport Router from 'next/router';\nimport { SearchOutlined, ClusterOutlined } from '@ant-design/icons';\nimport EditModal from './edit';\nimport LeftTree from './LeftTree';\nconst pageParams = {\n  pageNo: 1,\n  pageSize: 10\n};\n\nconst initTree = data => {\n  data.forEach(item => {\n    item.key = item.id;\n    item.title = item.name;\n\n    if (Array.isArray(item.children)) {\n      initTree(item.children);\n    }\n  });\n};\n\nconst getTreeData = async (params = {}) => {\n  try {\n    let {\n      data: {\n        code,\n        data\n      }\n    } = await api.getDepartmentList(params);\n\n    if (code == 0) {\n      // let tree = data;\n      initTree(data);\n      return data;\n    }\n\n    return [];\n  } catch (e) {\n    return [];\n  }\n};\n\nconst breadcrumbs = [{\n  text: '权限管理'\n}, {\n  text: '部门管理'\n}];\n\nfunction body(props) {\n  const {\n    0: showModal,\n    1: setModal\n  } = useState(false);\n  const {\n    0: treeData,\n    1: setTreeData\n  } = useState(props.data);\n  const {\n    0: showModalData,\n    1: setModalData\n  } = useState(null);\n  const {\n    0: searchParams,\n    1: setSearchParams\n  } = useState({});\n  const {\n    0: r_data,\n    1: setRData\n  } = useState({\n    parents: [],\n    selectedItem: props.data[0]\n  });\n  const {\n    0: selectData,\n    1: setSelectData\n  } = useState(props.data[0] || {});\n\n  const onChangeData = async () => {\n    let data = await getTreeData();\n    setTreeData(data);\n  };\n\n  const deleteItem = i => {\n    _Modal.confirm({\n      content: '确定删除此部门？',\n      onOk: async () => {\n        let item = selectData.children[i];\n        const {\n          data\n        } = await api.deleteDepartment(item.id);\n\n        if (data.code == 0) {\n          _message.success('删除成功');\n\n          onChangeData();\n        }\n      }\n    });\n  };\n\n  const columns = [{\n    title: '部门名称',\n    dataIndex: 'title'\n  }, {\n    title: '部门负责人',\n    dataIndex: 'managerName'\n  }, {\n    title: '操作',\n    render: (v, r, i) => {\n      return __jsx(_Space, null, __jsx(_Button, {\n        type: \"link\",\n        onClick: () => showAddModal(i)\n      }, \"\\u7F16\\u8F91\"), __jsx(_Button, {\n        type: \"link\",\n        danger: true,\n        onClick: () => deleteItem(i)\n      }, \"\\u5220\\u9664\"));\n    }\n  }].map(v => {\n    v.align = 'center';\n    return v;\n  });\n\n  const showAddModal = i => {\n    let editData = null;\n    console.log(i);\n\n    if (i > -1) {\n      editData = selectData.children[i];\n    } else {\n      editData = {\n        parent: selectData\n      };\n    }\n\n    setModalData(editData);\n    setModal(true);\n  };\n\n  const closeModal = (isSuccess, isUpdateList) => {\n    setModal(false);\n\n    if (isUpdateList) {\n      onChangeData();\n    }\n\n    if (isSuccess) {\n      _message.success('编辑成功');\n    }\n  }; // const paginationConfig = {\n  //   total: data.totalSize,\n  //   current: pageParams.pageNo,\n  //   showSizeChanger: false,\n  //   showQuickJumper: true,\n  //   defaultPageSize: pageParams.pageSize,\n  //   showTotal: (total) => `共 ${total} 条`,\n  //   onChange: onChangePage,\n  // }\n\n\n  const onChangeSelect = data => {\n    console.log('change');\n    setRData(data);\n    setSelectData(data.selectedItem);\n  };\n\n  const onClickItem = data => {\n    console.log(data);\n    setSelectData(_objectSpread({}, data));\n  };\n\n  return __jsx(Layout, {\n    breadcrumbs: breadcrumbs\n  }, Array.isArray(treeData) && treeData.length > 0 ? __jsx(_Row, {\n    style: {\n      width: '100%',\n      minHeight: 350,\n      padding: 20,\n      backgroundColor: '#fff'\n    },\n    align: \"start\"\n  }, __jsx(_Col, {\n    flex: \"0 0 350px\"\n  }, __jsx(LeftTree, {\n    data: treeData,\n    onChangeSelect: onChangeSelect\n  })), __jsx(_Col, {\n    flex: 1\n  }, !r_data ? null : __jsx(React.Fragment, null, __jsx(_Breadcrumb, {\n    separator: \">\",\n    style: {\n      marginBottom: 25\n    }\n  }, r_data.parents.map(item => {\n    return __jsx(_Breadcrumb.Item, {\n      key: item.key\n    }, __jsx(\"a\", {\n      style: {\n        color: '#1890ff'\n      },\n      onClick: () => onClickItem(item)\n    }, item.title));\n  }), __jsx(_Breadcrumb.Item, null, __jsx(\"a\", {\n    onClick: () => onClickItem(r_data.selectedItem)\n  }, r_data.selectedItem && r_data.selectedItem.title))), __jsx(_Space, {\n    style: {\n      marginBottom: 25\n    }\n  }, __jsx(ClusterOutlined, {\n    style: {\n      fontSize: 25\n    }\n  }), __jsx(\"span\", {\n    style: {\n      fontSize: 18,\n      color: '#333',\n      marginRight: 15\n    }\n  }, selectData && selectData.title, \"\\u4E0B\\u7EA7\\u90E8\\u95E8\"), __jsx(_Button, {\n    type: \"primary\",\n    onClick: () => showAddModal(-1),\n    size: \"small\"\n  }, \"\\u6DFB\\u52A0\\u5B50\\u90E8\\u95E8\")), __jsx(_Table, {\n    bordered: true,\n    expandable: {\n      childrenColumnName: 'testChild'\n    },\n    rowKey: \"key\",\n    pagination: false,\n    columns: columns,\n    dataSource: selectData.children || []\n  })))) : '暂无部门', __jsx(EditModal, {\n    show: showModal,\n    data: showModalData,\n    treeData: treeData,\n    selectData: selectData,\n    close: closeModal\n  }));\n}\n\nbody.getInitialProps = async () => {\n  // let data = await getData()\n  let data = await getTreeData();\n  return {\n    data\n  };\n};\n\nexport default body;","map":null,"metadata":{},"sourceType":"module"}