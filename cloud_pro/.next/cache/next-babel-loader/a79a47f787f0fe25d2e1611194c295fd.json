{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from 'react';\nimport { useCookies } from 'react-cookie';\nimport { Layout } from '~/components/Layout';\nimport api from '~/api/collection';\nimport apiProduct from '~/api/product';\nimport Search from '~/components/pages/collection/history/reminder/Search';\nimport TableList from '~/components/pages/collection/history/reminder/TableList';\nconst breadcrumbs = [{\n  text: '贷后管理'\n}, {\n  text: '催收管理'\n}, {\n  text: '催记历史'\n}];\nconst initData = {\n  list: [],\n  total: 0\n};\n\nconst getData = async (pageParams, searchParams = {}, tenantId) => {\n  try {\n    const {\n      data: {\n        data,\n        code\n      }\n    } = await api.fetch_report_recordHistory(_objectSpread(_objectSpread(_objectSpread({}, pageParams), searchParams), {}, {\n      tenantId\n    }));\n    return code == 0 ? data : initData;\n  } catch (e) {\n    console.error(e);\n    return initData;\n  }\n};\n\nconst getUserData = async () => {\n  try {\n    const {\n      data: {\n        data,\n        code\n      }\n    } = await api.getNewTreeMemberList();\n    return code == 0 ? data : [];\n  } catch (e) {\n    console.error(e);\n    return [];\n  }\n};\n\nfunction body(props) {\n  const {\n    0: productList,\n    1: setProductList\n  } = useState([]);\n  const {\n    0: data,\n    1: setData\n  } = useState(_objectSpread({}, initData));\n  const {\n    0: pageParams,\n    1: setPageParams\n  } = useState({\n    page: 1,\n    pageSize: 10\n  });\n  const {\n    0: searchParams,\n    1: setSearchParams\n  } = useState();\n  const [cookies] = useCookies(['tenantId']);\n  const {\n    0: selectedRowKeys,\n    1: setSelectedRowKeys\n  } = useState([]);\n  useEffect(() => {\n    getProductList();\n    getList(pageParams);\n    console.log(props);\n  }, []);\n\n  const getList = async (pageParams = pageParams, searchParams = searchParams) => {\n    let data = await getData(pageParams, searchParams, cookies.tenantId);\n    setData(_objectSpread({}, data));\n  };\n\n  const getProductList = async () => {\n    try {\n      const {\n        data: {\n          data,\n          code\n        }\n      } = await apiProduct.get_products({\n        tenantId: cookies.tenantId\n      });\n\n      if (code == 0) {\n        setProductList(data);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  const onSearch = values => {\n    setSearchParams(values);\n    pageParams.page = 1;\n    setPageParams(_objectSpread({}, pageParams));\n    getList(pageParams, values);\n  };\n\n  const changeList = async pageParams => {\n    setPageParams(_objectSpread({}, pageParams));\n    getList(pageParams, searchParams);\n  };\n\n  return __jsx(Layout, {\n    breadcrumbs: breadcrumbs\n  }, __jsx(Search, {\n    search: onSearch,\n    collectionLevels: props.collectionLevels,\n    urgeMethods: props.urgeMethods,\n    productList: productList,\n    userList: props.userList\n  }), __jsx(TableList, {\n    selectedRowKeys: selectedRowKeys,\n    setSelectedRowKeys: setSelectedRowKeys,\n    data: data,\n    pageParams: pageParams,\n    changeList: changeList,\n    collectionProducts: props.collectionProducts,\n    urgeMethods: props.urgeMethods,\n    urgeObjects: props.urgeObjects,\n    urgeResultUnknows: props.urgeResultUnknows,\n    urgeResultHighs: props.urgeResultHighs,\n    urgeResultLows: props.urgeResultLows,\n    urgeReasonTypes: props.urgeReasonTypes,\n    urgeRepayDesires: props.urgeRepayDesires\n  }));\n}\n\nbody.getInitialProps = async () => {\n  let userList = await getUserData();\n  const backData = {\n    collectionProducts: [],\n    collectionLevels: [],\n    urgeMethods: [],\n    userList\n  };\n\n  try {\n    const [{\n      data: {\n        data,\n        code\n      }\n    }, {\n      data: {\n        data: collectionLevels,\n        code: levelCode\n      }\n    }, {\n      data: {\n        data: urgeMethods,\n        code: levelCode01\n      }\n    }, {\n      data: {\n        data: urgeObjects,\n        code: levelCode02\n      }\n    }, {\n      data: {\n        data: urgeResultUnknows,\n        code: levelCode03\n      }\n    }, {\n      data: {\n        data: urgeResultHighs,\n        code: levelCode04\n      }\n    }, {\n      data: {\n        data: urgeResultLows,\n        code: levelCode05\n      }\n    }, {\n      data: {\n        data: urgeReasonTypes,\n        code: levelCode06\n      }\n    }, {\n      data: {\n        data: urgeRepayDesires,\n        code: levelCode07\n      }\n    }] = await Promise.all([api.get_data_dict('COLLECTION_PRODUCT'), api.get_data_dict('COLLECTION_LEVEL'), api.get_data_dict('URGE_METHOD'), api.get_data_dict('URGE_OBJECT'), api.get_data_dict('URGE_RESULT_UNKNOWN'), api.get_data_dict('URGE_RESULT_HIGH'), api.get_data_dict('URGE_RESULT_LOW'), api.get_data_dict('URGE_REASON_TYPE'), api.get_data_dict('URGE_REPAY_DESIRE')]);\n\n    if (code == 0) {\n      return {\n        collectionProducts: data,\n        collectionLevels: levelCode === 0 ? collectionLevels : [],\n        urgeMethods: levelCode01 === 0 ? urgeMethods : [],\n        urgeObjects: levelCode02 === 0 ? urgeObjects : [],\n        urgeResultUnknows: levelCode03 === 0 ? urgeResultUnknows : [],\n        urgeResultHighs: levelCode04 === 0 ? urgeResultHighs : [],\n        urgeResultLows: levelCode05 === 0 ? urgeResultLows : [],\n        urgeReasonTypes: levelCode06 === 0 ? urgeReasonTypes : [],\n        urgeRepayDesires: levelCode07 === 0 ? urgeRepayDesires : [],\n        userList\n      };\n    }\n\n    backData.code = code;\n    return backData;\n  } catch (err) {\n    console.log(err);\n    return backData;\n  }\n};\n\nexport default body;","map":null,"metadata":{},"sourceType":"module"}