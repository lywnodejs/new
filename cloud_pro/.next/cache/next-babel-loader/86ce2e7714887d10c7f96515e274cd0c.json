{"ast":null,"code":"import \"antd/lib/modal/style\";\nimport _Modal from \"antd/lib/modal\";\nimport \"antd/lib/select/style\";\nimport _Select from \"antd/lib/select\";\nimport \"antd/lib/input/style\";\nimport _Input from \"antd/lib/input\";\nimport \"antd/lib/form/style\";\nimport _Form from \"antd/lib/form\";\nimport \"antd/lib/time-picker/style\";\nimport _TimePicker from \"antd/lib/time-picker\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from 'react';\nimport apiBusiness from '~/api/business';\nimport api from '~/api/authority';\nimport moment from 'moment';\nimport LeftTree from './LeftTree';\nimport _ from 'lodash';\nconst {\n  RangePicker\n} = _TimePicker;\nconst layout = {\n  labelCol: {\n    span: 6\n  },\n  wrapperCol: {\n    span: 15\n  }\n};\n\nconst EditModal = props => {\n  const {\n    0: show,\n    1: setShow\n  } = useState(props.show);\n  const {\n    0: showModal,\n    1: setShowModal\n  } = useState(false);\n  const {\n    0: confirmLoading,\n    1: setConfirmLoading\n  } = useState(false);\n  const {\n    0: treeData,\n    1: setTreeData\n  } = useState();\n  const {\n    0: parentData,\n    1: setParentData\n  } = useState();\n  const {\n    0: account,\n    1: setAccount\n  } = useState([]);\n  const {\n    0: allAccount,\n    1: setAllAccount\n  } = useState([]);\n  const {\n    0: editData,\n    1: setEditData\n  } = useState(null);\n\n  const [form] = _Form.useForm(); // useEffect(() => {\n  //   if (showModal) {\n  //     let tree_data = _.cloneDeep(props.treeData)\n  //     if (props.data) {\n  //       // let tree_data = [...props.treeData]\n  //       setDisabled(props.data.key, tree_data)\n  //       setTreeData(tree_data)\n  //     } else {\n  //       setTreeData(tree_data)\n  //     }\n  //   }\n  // }, [showModal])\n\n\n  useEffect(() => {\n    setShow(props.show);\n\n    if (!props.show) {\n      form.resetFields();\n      setConfirmLoading(false);\n      setEditData(null);\n    } else {\n      let tree_data = _.cloneDeep(props.treeData);\n\n      setTreeData(tree_data);\n      let data = props.data;\n      data.parentName = props.data.parent.name;\n      setParentData(data.parent);\n\n      if (data && data.parent && data.id) {\n        setEditData(data);\n        getAccount(data.id);\n      }\n\n      form.setFieldsValue(data);\n    }\n  }, [props]);\n\n  const getAccount = async id => {\n    try {\n      let {\n        data: {\n          code,\n          data\n        }\n      } = await api.getDepartmentAccount(id);\n\n      if (code == 0) {\n        setAllAccount(data);\n        setAccount(data);\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const setDisabled = (key, tree) => {\n    const setChildTree = child => {\n      child.forEach(item => {\n        item.disabled = true;\n\n        if (Array.isArray(item.children)) {\n          setChildTree(item.children);\n        }\n      });\n    };\n\n    const findChildTree = _tree => {\n      _tree.some(item => {\n        if (item.key == key) {\n          item.disabled = true;\n\n          if (Array.isArray(item.children)) {\n            setChildTree(item.children);\n          }\n\n          return true;\n        } else if (Array.isArray(item.children)) {\n          findChildTree(item.children);\n        }\n      });\n    };\n\n    findChildTree(tree);\n  };\n\n  const handleCancel = () => {\n    form.resetFields();\n    form.setFieldsValue(null);\n    props.close();\n  };\n\n  const handleOk = () => {\n    setConfirmLoading(true);\n    form.validateFields().then(async values => {\n      let params = _objectSpread(_objectSpread({}, values), {}, {\n        parentId: parentData.id\n      });\n\n      if (editData && editData.id) {\n        params.id = editData.id;\n      }\n\n      delete params.parentName;\n      let {\n        data: {\n          code\n        }\n      } = await api.editDepartment(params);\n      setConfirmLoading(false);\n\n      if (code == 0) {\n        form.resetFields();\n        form.setFieldsValue(null);\n        props.close(true, true);\n      }\n    }).catch(err => {\n      setConfirmLoading(false);\n    });\n  };\n\n  const handleSelectOk = () => {\n    form.setFieldsValue({\n      parentName: parentData.title\n    });\n    setShowModal(false);\n  };\n\n  const handleSelectCancel = () => {\n    setParentData();\n    setShowModal(false);\n  };\n\n  const onChangeSelect = data => {\n    setParentData(data.selectedItem);\n  };\n\n  const handleSearchRole = keyword => {\n    if (!keyword) {\n      return setAccount(allAccount);\n    }\n\n    const arr = allAccount.filter(v => v.accountName.indexOf(keyword) > -1);\n    setAccount(arr);\n  };\n\n  return __jsx(\"div\", null, __jsx(_Modal, {\n    title: props.data && props.data.id ? '编辑部门' : '添加部门',\n    visible: show,\n    onOk: handleOk,\n    onCancel: handleCancel,\n    confirmLoading: confirmLoading\n  }, __jsx(_Form, _extends({}, layout, {\n    form: form,\n    name: \"basic\"\n  }), __jsx(_Form.Item, {\n    label: \"\\u90E8\\u95E8\\u540D\\u79F0\",\n    name: \"name\",\n    rules: [{\n      required: true,\n      message: '部门名称不可为空'\n    }]\n  }, __jsx(_Input, {\n    maxLength: 25,\n    placeholder: \"\\u8BF7\\u8F93\\u5165\\uFF0C\\u6700\\u591A25\\u5B57\\u7B26\"\n  })), __jsx(_Form.Item, {\n    label: \"\\u4E0A\\u7EA7\\u90E8\\u95E8\",\n    required: true\n  }, __jsx(_Form.Item, {\n    name: \"parentName\",\n    style: {\n      marginBottom: 5\n    },\n    onClick: () => setShowModal(true),\n    rules: [{\n      required: true,\n      message: '上级部门不可为空'\n    }]\n  }, __jsx(_Input, {\n    readOnly: true\n  })), __jsx(\"p\", {\n    style: {\n      marginBottom: 0\n    }\n  }, \"\\uFF08\\u70B9\\u51FB\\u53EF\\u91CD\\u65B0\\u9009\\u62E9\\u4E0A\\u7EA7\\u90E8\\u95E8\\uFF09\")), props.data && props.data.id && __jsx(_Form.Item, {\n    label: \"\\u90E8\\u95E8\\u8D1F\\u8D23\\u4EBA\",\n    name: \"managerId\"\n  }, __jsx(_Select, {\n    showSearch: true,\n    placeholder: \"\\u8BF7\\u9009\\u62E9\\u90E8\\u95E8\",\n    filterOption: false,\n    defaultActiveFirstOption: false,\n    onSearch: handleSearchRole,\n    style: {\n      width: '200px'\n    }\n  }, account.map(v => {\n    return __jsx(_Select.Option, {\n      value: v.id,\n      key: v.id\n    }, v.accountName);\n  }))))), __jsx(_Modal, {\n    title: \"\\u9009\\u62E9\\u4E0A\\u7EA7\\u90E8\\u95E8\",\n    onOk: handleSelectOk,\n    onCancel: handleSelectCancel,\n    visible: showModal\n  }, __jsx(LeftTree, {\n    onChangeSelect: onChangeSelect,\n    data: treeData\n  })));\n};\n\nexport default EditModal;","map":null,"metadata":{},"sourceType":"module"}