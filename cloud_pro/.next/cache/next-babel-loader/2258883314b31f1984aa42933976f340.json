{"ast":null,"code":"import \"antd/lib/space/style\";\nimport _Space from \"antd/lib/space\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { Layout } from '~/components/Layout';\nimport { InfoCircleFilled } from '@ant-design/icons';\nimport React, { useEffect, useState } from 'react';\nimport { useCookies } from 'react-cookie';\nimport apiProduct from '~/api/product';\nimport api from '~/api/collection';\nimport SearchForm from '~/components/pages/collection/report/performance/SearchForm';\nimport TableList from '~/components/pages/collection/report/performance/TableList';\nconst breadcrumbs = [{\n  text: '贷后管理'\n}, {\n  text: '报表统计'\n}, {\n  text: '绩效报表'\n}];\nconst pageParams = {\n  page: 1,\n  pageSize: 10\n};\nlet values = {};\n\nconst getUserData = async () => {\n  try {\n    const {\n      data: {\n        data,\n        code\n      }\n    } = await api.getNewTreeMemberList();\n    return code == 0 ? data : [];\n  } catch (e) {\n    console.error(e);\n    return [];\n  }\n};\n\nfunction body({\n  collectionProducts,\n  collectionLevels,\n  userList\n}) {\n  const [cookies] = useCookies(['tenantId']);\n  const {\n    0: productList,\n    1: setProductList\n  } = useState([]);\n  const {\n    0: list,\n    1: setList\n  } = useState([]);\n  const {\n    0: companys,\n    1: setCompanys\n  } = useState([]);\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const {\n          data: {\n            data,\n            code\n          }\n        } = await apiProduct.get_products({\n          tenantId: cookies.tenantId\n        });\n\n        if (code == 0) {\n          setProductList(data);\n        } // const {\n        //   data: {data: companysData, code: companyCode},\n        // } = await api.fetch_all_whitelist({\n        //   page: 1,\n        //   pageSize: 9999,\n        //   useStatus: 1,\n        //   label: '3',\n        // })\n        // if (companyCode == 0) {\n        //   setCompanys(companysData.list)\n        // }\n\n\n        onSearch();\n      } catch (error) {\n        console.log(error);\n      }\n    }\n\n    fetchData();\n  }, []);\n\n  const fetchList = async (values = {}) => {\n    try {\n      const {\n        time\n      } = values,\n            params = _objectWithoutProperties(values, [\"time\"]);\n\n      params.beginCreateTime = time && time[0].format('YYYY-MM-DD') || null;\n      params.endCreateTime = time && time[1].format('YYYY-MM-DD') || null;\n      params.productId = values.productId || null;\n      params.companyId = values.companyId || null;\n      console.log(values);\n      const {\n        data: {\n          data,\n          code\n        }\n      } = await api.fetch_report_performance(_objectSpread(_objectSpread(_objectSpread({}, pageParams), params), {}, {\n        tenantId: cookies.tenantId\n      }));\n\n      if (code === 0) {\n        let n_data = Object.assign({}, data);\n\n        if (Array.isArray(n_data.list)) {\n          n_data.list.forEach((v, i) => {\n            v.rowKey = pageParams.page * pageParams.pageSize + i;\n          });\n        }\n\n        setList(n_data);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const onSearch = async value => {\n    values = value;\n    pageParams.page = 1;\n    fetchList(_objectSpread({}, values));\n  };\n\n  const onPage = async () => {\n    fetchList(values);\n  };\n\n  return __jsx(Layout, {\n    breadcrumbs: breadcrumbs\n  }, __jsx(_Space, {\n    direction: \"vertical\",\n    size: \"large\",\n    style: {\n      width: '100%'\n    }\n  }, __jsx(SearchForm, _extends({\n    userList: userList\n  }, {\n    onSearch,\n    productList,\n    companys\n  })), __jsx(TableList, {\n    list,\n    onPage,\n    companys,\n    pageParams,\n    collectionLevels,\n    collectionProducts\n  })));\n}\n\nbody.getInitialProps = async () => {\n  let userList = await getUserData();\n  const backData = {\n    collectionProducts: [],\n    collectionLevels: [],\n    userList\n  };\n\n  try {\n    const [{\n      data: {\n        data,\n        code\n      }\n    }, {\n      data: {\n        data: collectionLevels,\n        code: levelCode\n      }\n    }] = await Promise.all([api.get_data_dict('COLLECTION_PRODUCT'), api.get_data_dict('COLLECTION_LEVEL')]);\n\n    if (code == 0) {\n      return {\n        collectionProducts: data,\n        collectionLevels: levelCode === 0 ? collectionLevels : [],\n        userList\n      };\n    }\n\n    backData.code = code;\n    return backData;\n  } catch (err) {\n    console.log(err);\n    return backData;\n  }\n};\n\nexport default body;","map":null,"metadata":{},"sourceType":"module"}