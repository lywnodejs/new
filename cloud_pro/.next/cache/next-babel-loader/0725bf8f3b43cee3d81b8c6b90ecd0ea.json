{"ast":null,"code":"import \"antd/lib/modal/style\";\nimport _Modal from \"antd/lib/modal\";\nimport \"antd/lib/radio/style\";\nimport _Radio from \"antd/lib/radio\";\nimport \"antd/lib/select/style\";\nimport _Select from \"antd/lib/select\";\nimport \"antd/lib/input/style\";\nimport _Input from \"antd/lib/input\";\nimport \"antd/lib/message/style\";\nimport _message from \"antd/lib/message\";\nimport \"antd/lib/form/style\";\nimport _Form from \"antd/lib/form\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useEffect, useState, useRef } from 'react';\nimport { isIP } from '~/utils';\nimport api from '~/api/system';\n\nfunction ticketForm(props) {\n  const [ticketForm] = _Form.useForm();\n\n  const {\n    selectIndex,\n    visible,\n    onHide,\n    selectItem,\n    pullData,\n    labels\n  } = props;\n  useEffect(() => {\n    if (selectIndex == -1) {\n      ticketForm.resetFields();\n    } else {\n      selectItem.useStatus = String(selectItem.useStatus);\n      ticketForm.setFieldsValue(_objectSpread({}, selectItem));\n    }\n  }, [visible, selectIndex]);\n\n  const onEdit = async () => {\n    try {\n      const values = await ticketForm.validateFields();\n\n      if (values.ip) {\n        let newIp = values.ip.replace(/,/g, '，');\n        let ipArr = newIp.split('，');\n\n        if (ipArr.filter(item => item.length).some(one => !isIP(one))) {\n          return _message.error('IP格式不正确，请检查。');\n        }\n      }\n\n      if (selectIndex == -1) {\n        const {\n          data\n        } = await api.add_ipconfig_one(_objectSpread({}, values));\n\n        if (data.code == 0) {\n          onHide();\n\n          _message.success('新增成功');\n\n          pullData();\n        }\n      } else {\n        const {\n          data\n        } = await api.edit_ipconfig_one(_objectSpread(_objectSpread({}, values), {}, {\n          id: selectItem.id\n        }));\n\n        if (data.code == 0) {\n          onHide();\n\n          _message.success('编辑成功');\n\n          pullData();\n        }\n      }\n\n      console.log('Success:', values);\n    } catch (errorInfo) {\n      console.log('Failed:', errorInfo);\n    }\n  };\n\n  const changeLabel = val => {\n    ticketForm.setFieldsValue({\n      label: val\n    });\n  };\n\n  return __jsx(_Modal, {\n    title: '白名单配置',\n    maskClosable: false,\n    visible: visible,\n    destroyOnClose: true,\n    forceRender: true,\n    onOk: onEdit,\n    onCancel: onHide,\n    cancelText: \"\\u53D6\\u6D88\",\n    okText: \"\\u786E\\u5B9A\"\n  }, __jsx(_Form, {\n    key: Date.now,\n    form: ticketForm,\n    name: \"ticketForm\",\n    initialValues: {\n      companyName: '',\n      label: '',\n      useStatus: '0'\n    }\n  }, __jsx(_Form.Item, {\n    label: \"\\u516C\\u53F8\\u540D\\u79F0\",\n    name: \"companyName\",\n    rules: [{\n      required: true,\n      message: '请输入公司名称'\n    }, ({\n      getFieldValue\n    }) => ({\n      validator(rule, value) {\n        if (value && value.length > 50) {\n          return Promise.reject('输入范围大于0字符，小于等于50字符');\n        }\n\n        return Promise.resolve();\n      }\n\n    })]\n  }, __jsx(_Input, {\n    placeholder: \"\\u8BF7\\u8F93\\u5165\\u516C\\u53F8\\u540D\\u79F0\"\n  })), __jsx(_Form.Item, {\n    label: \"\\u6807\\u7B7E\",\n    name: \"label\",\n    rules: [{\n      required: true,\n      message: '请选择标签'\n    }]\n  }, __jsx(_Select, {\n    style: {\n      width: '160px'\n    },\n    onChange: val => changeLabel(val)\n  }, labels.map((v, i) => __jsx(_Select.Option, {\n    key: i,\n    value: v.code\n  }, v.description)))), __jsx(_Form.Item, {\n    label: __jsx(React.Fragment, null, __jsx(\"span\", {\n      style: {\n        color: 'red'\n      }\n    }, \"*\"), \"IP\\u5730\\u5740\"),\n    style: {\n      marginBottom: '10px'\n    }\n  }, __jsx(_Form.Item, {\n    name: \"ip\",\n    rules: [{\n      required: true,\n      message: '请输入IP地址'\n    }, ({\n      getFieldValue\n    }) => ({\n      validator(rule, value) {\n        if (value && value.length > 500) {\n          return Promise.reject('最多输入500个字符');\n        }\n\n        return Promise.resolve();\n      }\n\n    })],\n    style: {\n      marginBottom: '4px'\n    }\n  }, __jsx(_Input.TextArea, {\n    placeholder: \"\\u8BF7\\u8F93\\u5165IP\\u5730\\u5740\"\n  })), __jsx(\"p\", null, \"\\u8F93\\u5165\\u591A\\u4E2AIP\\u65F6\\uFF0C\\u8BF7\\u7528\\u201C\\uFF0C\\u201D\\u9694\\u5F00\")), __jsx(_Form.Item, {\n    label: \"\\u72B6\\u6001\",\n    name: \"useStatus\",\n    rules: [{\n      required: true,\n      message: '请选择状态'\n    }]\n  }, __jsx(_Radio.Group, null, __jsx(_Radio, {\n    value: \"0\"\n  }, \"\\u505C\\u7528\"), __jsx(_Radio, {\n    value: \"1\"\n  }, \"\\u542F\\u7528\")))));\n}\n\nticketForm.getInitialProps = async () => ({});\n\nexport default ticketForm;","map":null,"metadata":{},"sourceType":"module"}