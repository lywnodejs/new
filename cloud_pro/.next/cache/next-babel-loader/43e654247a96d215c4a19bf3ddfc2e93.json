{"ast":null,"code":"import \"antd/lib/card/style\";\nimport _Card from \"antd/lib/card\";\nimport \"antd/lib/space/style\";\nimport _Space from \"antd/lib/space\";\nimport \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/select/style\";\nimport _Select from \"antd/lib/select\";\nimport \"antd/lib/input/style\";\nimport _Input from \"antd/lib/input\";\nimport \"antd/lib/radio/style\";\nimport _Radio from \"antd/lib/radio\";\nimport \"antd/lib/message/style\";\nimport _message from \"antd/lib/message\";\nimport \"antd/lib/form/style\";\nimport _Form from \"antd/lib/form\";\nimport \"antd/lib/steps/style\";\nimport _Steps from \"antd/lib/steps\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Layout } from '~/components/Layout';\nimport React, { useEffect, useState } from 'react';\nimport apiRisk from '~/api/riskWarning';\nimport { PlusOutlined, MinusOutlined } from '@ant-design/icons';\nconst {\n  Step\n} = _Steps;\nconst breadcrumbs = [{\n  text: '风险预警管理'\n}, {\n  text: '预警策略配置'\n}];\n\nfunction body() {\n  const {\n    0: productList,\n    1: setProductList\n  } = useState([]);\n\n  const [form] = _Form.useForm();\n\n  const {\n    0: activityCurrent,\n    1: setActivityCurrent\n  } = useState([]);\n  const {\n    0: productId,\n    1: setProductId\n  } = useState([]);\n  const {\n    0: policyList,\n    1: setPolicyList\n  } = useState([]);\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const {\n          data: {\n            data,\n            code\n          }\n        } = await apiRisk.fetch_product_list();\n\n        if (code == 0) {\n          setProductList(data);\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    }\n\n    fetchData();\n  }, []);\n\n  const handleClick = async e => {\n    const value = e.target.value;\n    setProductId(e.target.value);\n    setActivityCurrent(value != null ? 1 : 0);\n\n    try {\n      const {\n        data: {\n          data,\n          code\n        }\n      } = await apiRisk.fetch_decisionList_list({\n        productId: value\n      });\n\n      if (code == 0) {\n        setPolicyList(data);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n\n    try {\n      const {\n        data: {\n          data,\n          code\n        }\n      } = await apiRisk.fetch_get_riskList({\n        productId: value\n      });\n\n      if (code == 0 && Array.isArray(data) && data.length > 0) {\n        setActivityCurrent(2);\n        form.setFieldsValue({\n          congigDtoList: data\n        });\n      } else if (Array.isArray(data) && data.length === 0) {\n        setActivityCurrent(2);\n        form.resetFields(['congigDtoList']);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const handleSubmit = async () => {\n    const values = await form.validateFields();\n\n    if (values.congigDtoList.some(val => val.id === undefined)) {\n      values.congigDtoList.forEach((v, i) => {\n        v['id'] = null;\n      });\n    }\n\n    console.log(values);\n\n    try {\n      const {\n        data: {\n          data,\n          code\n        }\n      } = await apiRisk.fetch_decisionList_update(_objectSpread(_objectSpread({}, values), {}, {\n        productId: productId\n      }));\n\n      if (code == 0) {\n        _message.success('新增成功');\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return __jsx(Layout, {\n    breadcrumbs: breadcrumbs\n  }, __jsx(_Space, {\n    direction: \"vertical\",\n    size: \"large\",\n    style: {\n      width: '100%',\n      position: 'relative'\n    }\n  }, __jsx(_Card, null, __jsx(_Form, {\n    form: form,\n    name: \"basic\",\n    initialValues: {\n      congigDtoList: [{\n        decisionId: ' ',\n        loanDays: ' ',\n        id: null\n      }]\n    } // onFinish={onFinish}\n    // onFinishFailed={onFinishFailed}\n\n  }, __jsx(_Steps, {\n    direction: \"vertical\",\n    current: activityCurrent\n  }, __jsx(Step, {\n    title: \"\\u9009\\u62E9\\u8D37\\u6B3E\\u4EA7\\u54C1\",\n    description: __jsx(\"div\", {\n      style: {\n        height: 100\n      }\n    }, __jsx(\"div\", {\n      style: {\n        marginTop: 50\n      }\n    }, __jsx(_Form.Item, {\n      label: \"\\u4FE1\\u8D37\\u4EA7\\u54C1\",\n      name: \"productId\"\n    }, __jsx(_Radio.Group, null, productList.map((v, i) => __jsx(_Radio.Button, {\n      key: v.id,\n      value: v.id,\n      onClick: handleClick\n    }, v.name))))))\n  }), __jsx(Step, {\n    title: \"\\u914D\\u7F6E\\u98CE\\u63A7\\u68C0\\u67E5\\u7B56\\u7565\",\n    description: __jsx(_Form.List, {\n      name: \"congigDtoList\"\n    }, (fields, {\n      add,\n      remove\n    }) => fields.map((field, index) => {\n      return __jsx(\"div\", {\n        key: field.key\n      }, __jsx(_Space, {\n        size: 13\n      }, __jsx(\"span\", null, \"\\u653E\\u6B3E\\u540E\\u7B2C\"), __jsx(_Form.Item, _extends({}, field, {\n        rules: [{\n          required: true,\n          message: '请输入'\n        }, ({\n          getFieldValue\n        }) => ({\n          validator(rule, value) {\n            var reg = /^[\\d/]+$/;\n\n            if (value && !reg.test(value)) {\n              return Promise.reject('只能输入数字');\n            } else {\n              return Promise.resolve();\n            }\n          }\n\n        })],\n        name: [field.name, 'loanDays'],\n        fieldKey: [field.fieldKey, 'loanDays'],\n        style: {\n          marginTop: 15\n        }\n      }), __jsx(_Input, {\n        placeholder: \"\\u8BF7\\u8F93\\u5165\"\n      })), \"\\u5929\\u3002\\u8C03\\u7528\\u51B3\\u7B56\\u6D41\\uFF1A\", __jsx(_Form.Item, _extends({}, field, {\n        rules: [{\n          required: true,\n          message: '请选择决策流'\n        }],\n        name: [field.name, 'decisionId'],\n        fieldKey: [field.fieldKey, 'decisionId'],\n        style: {\n          marginTop: 15\n        }\n      }), __jsx(_Select, {\n        style: {\n          width: 300\n        },\n        onChange: (value, option) => {\n          const newName = option.children;\n          const newData = [...form.getFieldValue('congigDtoList')].filter(v => !!v);\n          newData[index] = _objectSpread(_objectSpread({}, newData[index]), {}, {\n            decisionName: newName\n          });\n          form.setFieldsValue({\n            congigDtoList: newData\n          });\n        }\n      }, policyList && policyList.length > 0 && policyList.map((v, i) => {\n        return __jsx(_Select.Option, {\n          key: i,\n          value: v.id\n        }, v.flowName);\n      }))), __jsx(_Form.Item, _extends({}, field, {\n        name: [field.name, 'id'],\n        fieldKey: [field.fieldKey, 'id']\n      }), __jsx(_Input, {\n        type: \"hidden\"\n      })), __jsx(_Form.Item, _extends({}, field, {\n        name: [field.name, 'decisionName'],\n        fieldKey: [field.fieldKey, 'decisionName'],\n        style: {\n          display: 'none'\n        }\n      }), __jsx(_Select, {\n        type: \"hidden\"\n      }, __jsx(_Select.Option, null))), index == 0 ? __jsx(_Button, {\n        style: {\n          marginBottom: 12\n        },\n        onClick: () => add({})\n      }, __jsx(\"span\", {\n        style: {\n          textAlign: 'center'\n        }\n      }, __jsx(PlusOutlined, null), \" \\u6DFB\\u52A0\\u6761\\u4EF6\")) : __jsx(_Button, {\n        style: {\n          marginBottom: 12\n        },\n        onClick: () => remove(field.fieldKey),\n        type: \"primary\"\n      }, \"\\u5220\\u9664\")));\n    }))\n  }))), __jsx(_Button, {\n    type: \"primary\",\n    style: {\n      marginLeft: 120,\n      marginTop: 50\n    },\n    onClick: handleSubmit\n  }, \"\\u4FDD\\u5B58\"))));\n}\n\nbody.getInitialProps = async () => {\n  return {};\n};\n\nexport default body;","map":null,"metadata":{},"sourceType":"module"}