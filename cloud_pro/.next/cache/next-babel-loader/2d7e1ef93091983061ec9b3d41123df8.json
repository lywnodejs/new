{"ast":null,"code":"import \"antd/lib/table/style\";\nimport _Table from \"antd/lib/table\";\nimport \"antd/lib/space/style\";\nimport _Space from \"antd/lib/space\";\nimport \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/message/style\";\nimport _message from \"antd/lib/message\";\nimport \"antd/lib/modal/style\";\nimport _Modal from \"antd/lib/modal\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from 'react';\nimport { ExclamationCircleOutlined } from '@ant-design/icons';\nimport api from '~/api/collection';\nimport EditForm from './EditForm';\nconst initDta = {\n  total: 0,\n  list: []\n};\nconst initPage = {\n  page: 1,\n  pageSize: 10\n};\nexport default function (props) {\n  const {\n    0: pageParams,\n    1: setPageParams\n  } = useState(_objectSpread({}, initPage));\n  const {\n    0: data,\n    1: setData\n  } = useState(initDta);\n  const {\n    0: userData,\n    1: setUserData\n  } = useState([]);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  const {\n    0: visible,\n    1: setVisible\n  } = useState(false);\n  const {\n    0: editItem,\n    1: setEditItem\n  } = useState(null);\n  useEffect(() => {\n    if (props.productId) {\n      onChange(initPage.page, initPage.pageSize);\n      getUsers(props.productId);\n    }\n  }, [props.productId]);\n\n  const getData = async (page = pageParams) => {\n    let params = _objectSpread(_objectSpread({}, page), {}, {\n      productId: props.productId\n    });\n\n    let {\n      data: {\n        code,\n        data\n      }\n    } = await api.getProdutAutomaticConfig(params);\n\n    if (code == 0) {\n      data.list = data.list || [];\n      setData(data);\n    }\n  };\n\n  const getUsers = async () => {\n    let {\n      data: {\n        code,\n        data\n      }\n    } = await api.getNewTreeMemberList();\n    setUserData(code == 0 ? data : []);\n  };\n\n  const onEdit = data => {\n    setEditItem(data);\n    setVisible(true);\n  };\n\n  const changeLoading = () => {\n    setLoading(false);\n    setLoading(true);\n  };\n\n  const getFormData = data => {\n    data.id = editItem ? editItem.id : null;\n    api.changeAutomaticConfig(data).then(({\n      data: {\n        code\n      }\n    }) => {\n      if (code == 0) {\n        setVisible(false);\n\n        if (data.productId == props.productId) {\n          let pageNo = data.id ? pageParams.page : 1;\n          onChange(pageNo, initPage.pageSize);\n        }\n      } else {\n        changeLoading();\n      }\n    }).catch(err => {\n      console.error(err);\n      changeLoading();\n    });\n  };\n\n  const onDelete = item => {\n    _Modal.confirm({\n      title: '删除后将无法恢复！',\n      icon: __jsx(ExclamationCircleOutlined, null),\n      content: __jsx(\"span\", {\n        style: {\n          color: 'red'\n        }\n      }, \"\\u4F60\\u786E\\u5B9A\\u8981\\u5220\\u9664\\u4E48\\uFF1F\"),\n\n      onOk() {\n        api.deleteAutomaticConfig(item.id).then(({\n          data: {\n            code\n          }\n        }) => {\n          if (code == 0) {\n            _message.success('删除成功');\n\n            onChange(pageParams.page, pageParams.pageSize);\n          }\n        });\n      },\n\n      onCancel() {\n        console.log('Cancel');\n      }\n\n    });\n  };\n\n  const columns = [{\n    title: '分案级别',\n    dataIndex: 'collectionLevel'\n  }, {\n    title: '产品名称',\n    dataIndex: 'productId',\n    render: (text, record, index) => {\n      let findOne = props.collectionProducts.find(one => one.code == text);\n      return findOne ? findOne.description : '';\n    }\n  }, {\n    title: '委案人员姓名',\n    dataIndex: 'detailList',\n    render: t => {\n      if (Array.isArray(t)) {\n        return t.map(item => item.accountName).join('、');\n      }\n\n      return '';\n    }\n  }, {\n    title: '更新时间',\n    dataIndex: 'updateTime'\n  }, {\n    title: '操作',\n    dataIndex: 'cz',\n    width: 150,\n    render: (text, record, index) => {\n      return __jsx(_Space, null, __jsx(_Button, {\n        type: \"link\",\n        onClick: () => onEdit(record)\n      }, \"\\u7F16\\u8F91\"), __jsx(_Button, {\n        type: \"link\",\n        onClick: () => onDelete(record)\n      }, \"\\u5220\\u9664\"));\n    }\n  }];\n\n  const onChange = (pageNo, pageSize) => {\n    pageParams.page = pageNo;\n    pageParams.pageSize = pageSize;\n    setPageParams(_objectSpread({}, pageParams));\n    getData();\n  };\n\n  const paginationConfig = {\n    total: data.total,\n    current: pageParams.page,\n    showSizeChanger: true,\n    showQuickJumper: true,\n    defaultPageSize: pageParams.pageSize,\n    pageSize: pageParams.pageSize,\n    showTotal: total => `共 ${total} 条`,\n    onChange\n  };\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    style: {\n      textAlign: 'right',\n      marginBottom: 15\n    }\n  }, __jsx(_Button, {\n    type: \"primary\",\n    onClick: () => onEdit(null)\n  }, \"\\u65B0\\u589E\")), __jsx(_Table, {\n    rowKey: \"id\",\n    dataSource: data.list,\n    columns: columns,\n    bordered: true,\n    pagination: paginationConfig\n  }), __jsx(EditForm, {\n    visible: visible,\n    levelData: props.levelData,\n    collectionProducts: props.collectionProducts,\n    setVisible: setVisible,\n    data: editItem,\n    getFormData: getFormData,\n    userData: userData,\n    loading: loading\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}