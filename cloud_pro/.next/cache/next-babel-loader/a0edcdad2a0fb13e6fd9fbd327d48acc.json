{"ast":null,"code":"import \"antd/lib/space/style\";\nimport _Space from \"antd/lib/space\";\nimport \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/input/style\";\nimport _Input from \"antd/lib/input\";\nimport \"antd/lib/form/style\";\nimport _Form from \"antd/lib/form\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Layout } from '~/components/Layout';\nimport React, { useEffect, useState } from 'react';\nimport Router from 'next/router';\nimport { useCookies } from 'react-cookie';\nimport api from '~/api/authority';\nimport RoleForm from './roleForm';\nimport TableList from './TableList';\nconst breadcrumbs = [{\n  text: '权限管理'\n}, {\n  text: '角色管理'\n}];\n\nfunction body(props) {\n  const [cookies] = useCookies(['tenantId']);\n\n  const [form] = _Form.useForm();\n\n  const {\n    0: list,\n    1: setList\n  } = useState([]);\n  const {\n    0: visible,\n    1: setVisible\n  } = useState(false);\n  const {\n    0: selectIndex,\n    1: setIndex\n  } = useState(-1);\n  const {\n    0: selectItem,\n    1: setSelectItem\n  } = useState({});\n  const {\n    0: pageParams,\n    1: setPageParams\n  } = useState({\n    pageNo: 1,\n    pageSize: 10\n  });\n  useEffect(() => {\n    fetchList(pageParams);\n  }, []);\n\n  const fetchList = async values => {\n    try {\n      const {\n        data: {\n          data,\n          code\n        }\n      } = await api.getRoleList(values);\n\n      if (code === 0) {\n        setList(data);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const onAdd = () => {\n    setIndex(-1);\n    setVisible(true);\n  };\n\n  const changePageParams = page => {\n    let pParams = _objectSpread({}, page);\n\n    let params = _objectSpread(_objectSpread({}, form.getFieldsValue()), pParams);\n\n    setPageParams(pParams);\n    fetchList(params);\n  };\n\n  const onReset = () => {\n    form.resetFields();\n    onSearch();\n  };\n\n  const onSearch = () => {\n    // fetchList(values)\n    let pages = _objectSpread(_objectSpread({}, pageParams), {}, {\n      pageNo: 1\n    });\n\n    let values = form.getFieldsValue();\n    setPageParams(pages);\n    fetchList(_objectSpread(_objectSpread({}, pages), values));\n  };\n\n  const pullData = () => {\n    let values = form.getFieldsValue();\n    fetchList(_objectSpread(_objectSpread({}, pageParams), values));\n  };\n\n  const onEdit = item => {\n    setIndex(item.id);\n    setVisible(true);\n    setSelectItem(item);\n  };\n\n  return __jsx(Layout, {\n    breadcrumbs: breadcrumbs\n  }, __jsx(_Space, {\n    direction: \"vertical\",\n    size: \"large\",\n    style: {\n      width: '100%'\n    }\n  }, __jsx(_Form, {\n    form: form,\n    onFinish: onSearch,\n    layout: \"inline\",\n    className: \"searchForm\",\n    initialValues: {\n      keyword: ''\n    }\n  }, __jsx(_Form.Item, {\n    label: \"\\u5173\\u952E\\u5B57\",\n    name: \"keyword\"\n  }, __jsx(_Input, {\n    placeholder: \"\\u8BF7\\u8F93\\u5165\\u5173\\u952E\\u5B57\"\n  })), __jsx(_Button, {\n    type: \"primary\",\n    style: {\n      marginRight: 15\n    },\n    htmlType: \"submit\"\n  }, \"\\u67E5\\u8BE2\"), __jsx(_Button, {\n    style: {\n      marginRight: 15\n    },\n    onClick: onReset\n  }, \"\\u91CD\\u7F6E\"), __jsx(_Button, {\n    type: \"primary\",\n    onClick: onAdd\n  }, \"\\u65B0\\u589E\")), __jsx(TableList, {\n    list,\n    onEdit,\n    pullData,\n    pageParams,\n    changePageParams\n  }), __jsx(RoleForm, {\n    selectIndex: selectIndex,\n    visible: visible,\n    onHide: () => setVisible(false),\n    selectItem: selectItem,\n    pullData: pullData\n  })));\n}\n\nbody.getInitialProps = async () => {\n  return {};\n};\n\nexport default body;","map":null,"metadata":{},"sourceType":"module"}