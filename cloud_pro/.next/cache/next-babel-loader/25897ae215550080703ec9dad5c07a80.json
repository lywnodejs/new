{"ast":null,"code":"import \"antd/lib/alert/style\";\nimport _Alert from \"antd/lib/alert\";\nimport \"antd/lib/message/style\";\nimport _message from \"antd/lib/message\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from 'react';\nimport { useCookies } from 'react-cookie';\nimport { Layout } from '~/components/Layout';\nimport api from '~/api/collection';\nimport apiProduct from '~/api/product';\nimport Search from '~/components/pages/collection/distribution/Search';\nimport TableList from '~/components/pages/collection/distribution/TableList'; // import BatchedAssignModal from '~/components/common/BatchedAssignModal'\n// import AssignModal from '~/components/common/AssignModal'\n\nimport AssignModal from '~/components/common/collection/AssignModal';\nimport BatchedAssignModal from '~/components/common/collection/BatchedAssignModal';\nconst breadcrumbs = [{\n  text: '贷后管理'\n}, {\n  text: '催收管理'\n}, {\n  text: '分配列表'\n}];\nconst initData = {\n  list: [],\n  total: 0\n};\n\nconst getData = async (pageParams, searchParams = {}, orderBys = null, tenantId) => {\n  try {\n    const {\n      data: {\n        data,\n        code\n      }\n    } = await api.fetch_overdueAlloc_list(_objectSpread(_objectSpread(_objectSpread({}, pageParams), searchParams), {}, {\n      orderBys,\n      tenantId\n    }));\n    return code == 0 ? data : initData;\n  } catch (e) {\n    console.error(e);\n    return initData;\n  }\n};\n\nconst getUserData = async () => {\n  try {\n    const {\n      data: {\n        data,\n        code\n      }\n    } = await api.getNewTreeMemberList();\n    return code == 0 ? data : [];\n  } catch (e) {\n    console.error(e);\n    return [];\n  }\n};\n\nfunction body(props) {\n  const {\n    0: productList,\n    1: setProductList\n  } = useState([]);\n  const {\n    0: data,\n    1: setData\n  } = useState(_objectSpread({}, initData));\n  const {\n    0: pageParams,\n    1: setPageParams\n  } = useState({\n    page: 1,\n    pageSize: 20\n  });\n  const {\n    0: searchParams,\n    1: setSearchParams\n  } = useState();\n  const {\n    0: orderBys,\n    1: setOrderBys\n  } = useState();\n  const {\n    0: visible,\n    1: setVisible\n  } = useState(false);\n  const {\n    0: batchedVisible,\n    1: setBatchedVisible\n  } = useState(false);\n  const {\n    0: total,\n    1: setTotal\n  } = useState(0);\n  const [cookies] = useCookies(['tenantId']);\n  const {\n    0: selectedRowKeys,\n    1: setSelectedRowKeys\n  } = useState([]);\n  useEffect(() => {\n    getProductList();\n    getList(pageParams);\n    console.log(props);\n  }, []);\n\n  const getList = async (pageParams, searchParams = searchParams, orderBys = orderBys) => {\n    let data = await getData(pageParams, searchParams, orderBys, cookies.tenantId);\n    setSelectedRowKeys([]);\n    setData(_objectSpread({}, data));\n  };\n\n  const getProductList = async () => {\n    try {\n      const {\n        data: {\n          data,\n          code\n        }\n      } = await apiProduct.get_products({\n        tenantId: cookies.tenantId\n      });\n\n      if (code == 0) {\n        setProductList(data);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  const onSearch = values => {\n    setSearchParams(values);\n    pageParams.page = 1;\n    setPageParams(_objectSpread({}, pageParams));\n    getList(pageParams, values, orderBys);\n  };\n\n  const onSearchTotal = async values => {\n    try {\n      values.beginCreateTime = null;\n      values.endCreateTime = null;\n      values.beginGrantTime = null;\n      values.endGrantTime = null;\n      const {\n        data: {\n          data,\n          code\n        }\n      } = await api.fetch_overdueAlloc_list(_objectSpread(_objectSpread({}, values), {}, {\n        page: 1,\n        pageSize: 10000,\n        orderBys: null,\n        tenantId: cookies.tenantId\n      }));\n\n      if (code === 0) {\n        setTotal(data.total);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const changeList = async (pageParams, orderBys) => {\n    setPageParams(_objectSpread({}, pageParams));\n    setOrderBys(orderBys);\n    getList(pageParams, searchParams, orderBys);\n  };\n\n  const changeVisible = () => {\n    if (!selectedRowKeys.length) {\n      return _message.error('请先选择要分配的订单');\n    }\n\n    setVisible(true);\n  };\n\n  const onAssign = (_ref, onError) => {\n    let params = Object.assign({}, _ref);\n    params.collectionOrderIdList = selectedRowKeys;\n    params.tenantId = cookies.tenantId;\n    commitAssign(params, setVisible, onError);\n  };\n\n  const onBatchedAssign = (_ref2, onError) => {\n    let params = Object.assign({}, _ref2);\n    params.tenantId = cookies.tenantId;\n    commitAssign(params, setBatchedVisible, onError);\n  };\n\n  const commitAssign = (params, onSuccess, onError) => {\n    api.edit_overdueAlloc_allselect(params).then(({\n      data: {\n        code\n      }\n    }) => {\n      if (code == 0) {\n        _message.success('分配成功');\n\n        getList(pageParams);\n        setTotal(0);\n        onSuccess(false);\n      } else {\n        onError();\n      }\n    }).catch(err => {\n      onError();\n    });\n  };\n\n  const getShowTips = () => {\n    let total = 0;\n\n    if (selectedRowKeys.length > 0) {\n      total = selectedRowKeys.reduce((prev, next) => {\n        let item = data.list.find(v => v.id == next);\n        let amount = item && item.totalCapitalAmount || 0;\n        return amount + prev;\n      }, total);\n      total = total.toFixed(2);\n    }\n\n    return `已选择 ${selectedRowKeys.length} 项。   当前查询逾期总本金之和${total}`;\n  };\n\n  return __jsx(Layout, {\n    breadcrumbs: breadcrumbs\n  }, __jsx(Search, {\n    search: onSearch,\n    setBatchedVisible: setBatchedVisible,\n    changeVisible: changeVisible,\n    collectionLevels: props.collectionLevels,\n    productList: productList\n  }), __jsx(_Alert, {\n    message: getShowTips(),\n    style: {\n      marginBottom: 15\n    },\n    type: \"info\",\n    showIcon: true\n  }), __jsx(TableList, {\n    selectedRowKeys: selectedRowKeys,\n    setSelectedRowKeys: setSelectedRowKeys,\n    data: data,\n    pageParams: pageParams,\n    changeList: changeList,\n    collectionProducts: props.collectionProducts\n  }), __jsx(AssignModal, {\n    showNumber: selectedRowKeys.length,\n    visible: visible,\n    onHide: () => setVisible(false),\n    onOk: onAssign,\n    showList: props.userList\n  }), __jsx(BatchedAssignModal, {\n    onSearch: onSearchTotal,\n    total: total,\n    visible: batchedVisible,\n    onHide: () => setBatchedVisible(false),\n    productList: productList,\n    collectionLevels: props.collectionLevels,\n    showList: props.userList,\n    onOk: onBatchedAssign\n  }));\n}\n\nbody.getInitialProps = async () => {\n  let userList = await getUserData();\n  const backData = {\n    collectionProducts: [],\n    collectionLevels: [],\n    userList\n  };\n\n  try {\n    const [{\n      data: {\n        data,\n        code\n      }\n    }, {\n      data: {\n        data: collectionLevels,\n        code: levelCode\n      }\n    }] = await Promise.all([api.get_data_dict('COLLECTION_PRODUCT'), api.get_data_dict('COLLECTION_LEVEL')]);\n\n    if (code == 0) {\n      return {\n        collectionProducts: data,\n        collectionLevels: levelCode === 0 ? collectionLevels : [],\n        userList\n      };\n    }\n\n    backData.code = code;\n    return backData;\n  } catch (err) {\n    console.log(err);\n    return backData;\n  }\n};\n\nexport default body;","map":null,"metadata":{},"sourceType":"module"}