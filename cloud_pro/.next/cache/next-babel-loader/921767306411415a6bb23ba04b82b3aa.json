{"ast":null,"code":"import \"antd/lib/tree/style\";\nimport _Tree from \"antd/lib/tree\";\nimport \"antd/lib/list/style\";\nimport _List from \"antd/lib/list\";\nimport \"antd/lib/input/style\";\nimport _Input from \"antd/lib/input\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useImperativeHandle, useState } from 'react';\nimport { CaretDownOutlined, ContactsFilled } from '@ant-design/icons';\nimport styles from './idnex.less';\nexport default function (props) {\n  const {\n    0: searchData,\n    1: setSearchData\n  } = useState([]);\n  const {\n    0: selected,\n    1: setSelected\n  } = useState(null);\n  const {\n    0: treeData,\n    1: setTreeData\n  } = useState(null);\n  useEffect(() => {\n    setTreeData(props.data);\n  }, [props.data]);\n  useEffect(() => {\n    if (selected) {\n      changeSelect(treeData);\n    } else if (Array.isArray(treeData) && treeData.length > 0) {\n      onSelect(undefined, {\n        node: treeData[0]\n      });\n    }\n  }, [treeData]);\n\n  const changeSelect = data => {\n    let selectNode = null;\n\n    const findNode = tree => {\n      tree.forEach(v => {\n        if (v.key == selected) {\n          selectNode = v;\n        } else if (Array.isArray(v.children)) {\n          findNode(v.children);\n        }\n      });\n    };\n\n    findNode(data);\n    console.log('selectNode', {\n      node: selectNode\n    });\n    onSelect(undefined, {\n      node: selectNode\n    });\n  };\n\n  const onSelect = (selectedKeys, info) => {\n    // console.log('selected', selectedKeys, info);\n    // const parents = parentKeys(info.node.key)\n    const parents = getParentNodes(info.node.key);\n    setSelected(info.node.key);\n    let data = {\n      parents,\n      selectedItem: info.node\n    }; // console.log('onSelect', data)\n\n    props.onChangeSelect(data);\n  };\n\n  const findList = (key, pData = treeData, endData = []) => {\n    pData.forEach(v => {\n      if (v.title.indexOf(key) > -1) {\n        endData.push(v);\n      }\n\n      if (v.children && Array.isArray(v.children)) {\n        findList(key, v.children, endData);\n      }\n    });\n    return endData;\n  };\n\n  let nodes = [];\n\n  function getParentNodes(id, tree = treeData) {\n    _getParentNodes([], id, tree);\n\n    return nodes;\n  }\n\n  function _getParentNodes(his, targetId, tree) {\n    tree.some(list => {\n      const children = list.children || [];\n\n      if (list.key === targetId) {\n        nodes = his;\n        return true;\n      } else if (children.length > 0) {\n        const history = [...his];\n        history.push(list);\n        return _getParentNodes(history, targetId, children);\n      }\n    });\n  }\n\n  const changeSearch = e => {\n    e.persist();\n    const value = e.target.value.trim();\n\n    if (!value) {\n      return setSearchData([]);\n    }\n\n    let res = findList(value);\n    let parents = [];\n    let res_arr = [...res];\n    res.forEach(v => {\n      let p_arr = getParentNodes(v.id);\n      p_arr.forEach(p_v => {\n        if (p_v.parentId != 0 && parents.findIndex(pv => pv.id == p_v.id) == -1) {\n          parents.push(p_v);\n        }\n      });\n    });\n    parents.forEach(p_v => {\n      if (res_arr.findIndex(rv => rv.id == p_v.id) == -1) {\n        res_arr.push(p_v);\n      }\n    }); // console.log(res);\n    // console.log('res_arr:', res_arr);\n\n    setSearchData(res_arr);\n  };\n\n  const selectStyle = key => {\n    return selected == key ? {\n      backgroundColor: 'rgb(24, 144, 255, 0.75)',\n      color: '#fff',\n      cursor: 'pointer'\n    } : {\n      cursor: 'pointer'\n    };\n  };\n\n  return __jsx(\"div\", {\n    className: styles.leftBox\n  }, __jsx(\"div\", {\n    style: {\n      width: '90%',\n      marginBottom: 20\n    }\n  }, __jsx(_Input, {\n    placeholder: \"\\u641C\\u7D22\",\n    allowClear: true,\n    onChange: changeSearch\n  })), searchData.length > 0 ? __jsx(\"div\", {\n    style: {\n      width: '90%',\n      fontSize: 18\n    }\n  }, __jsx(_List, {\n    header: __jsx(\"div\", null, \"\\u90E8\\u95E8\\u5217\\u8868\\uFF1A\"),\n    footer: null,\n    bordered: true,\n    dataSource: searchData,\n    renderItem: item => __jsx(_List.Item, {\n      style: selectStyle(item.key),\n      onClick: () => onSelect([], {\n        node: item\n      })\n    }, __jsx(ContactsFilled, {\n      style: {\n        color: '#1890ff'\n      }\n    }), \" \", item.title)\n  })) : Array.isArray(treeData) ? __jsx(_Tree, {\n    style: {\n      fontSize: 18,\n      lineHeight: 2\n    },\n    className: styles.treeBox,\n    showIcon: true,\n    switcherIcon: __jsx(CaretDownOutlined, {\n      style: {\n        fontSize: 18\n      }\n    }),\n    icon: __jsx(ContactsFilled, {\n      style: {\n        color: '#1890ff'\n      }\n    }),\n    selectedKeys: [selected],\n    defaultExpandedKeys: treeData[0] && [treeData[0].key] || [],\n    onSelect: onSelect,\n    treeData: treeData,\n    titleRender: data => {\n      return __jsx(\"span\", {\n        style: {\n          display: 'inline-block',\n          overflow: 'hidden',\n          width: '200px',\n          whiteSpace: 'nowrap',\n          textOverflow: 'ellipsis'\n        }\n      }, data.name);\n    }\n  }) : null);\n}","map":null,"metadata":{},"sourceType":"module"}