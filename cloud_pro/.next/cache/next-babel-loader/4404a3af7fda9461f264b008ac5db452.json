{"ast":null,"code":"import \"antd/lib/modal/style\";\nimport _Modal from \"antd/lib/modal\";\nimport \"antd/lib/radio/style\";\nimport _Radio from \"antd/lib/radio\";\nimport \"antd/lib/select/style\";\nimport _Select from \"antd/lib/select\";\nimport \"antd/lib/input/style\";\nimport _Input from \"antd/lib/input\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport \"antd/lib/message/style\";\nimport _message from \"antd/lib/message\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport \"antd/lib/form/style\";\nimport _Form from \"antd/lib/form\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useEffect, useState, useRef } from 'react';\nimport { isIP } from '~/utils';\nimport api from '~/api/system';\n\nfunction ticketForm(props) {\n  var _Form$useForm = _Form.useForm(),\n      _Form$useForm2 = _slicedToArray(_Form$useForm, 1),\n      ticketForm = _Form$useForm2[0];\n\n  var selectIndex = props.selectIndex,\n      visible = props.visible,\n      onHide = props.onHide,\n      selectItem = props.selectItem,\n      pullData = props.pullData,\n      labels = props.labels;\n  useEffect(function () {\n    if (selectIndex == -1) {\n      ticketForm.resetFields();\n    } else {\n      selectItem.useStatus = String(selectItem.useStatus);\n      ticketForm.setFieldsValue(_objectSpread({}, selectItem));\n    }\n  }, [visible, selectIndex]);\n\n  var onEdit = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var values, newIp, ipArr, _yield$api$add_ipconf, data, _yield$api$edit_ipcon, _data;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return ticketForm.validateFields();\n\n            case 3:\n              values = _context.sent;\n\n              if (!values.ip) {\n                _context.next = 9;\n                break;\n              }\n\n              newIp = values.ip.replace(/,/g, '，');\n              ipArr = newIp.split('，');\n\n              if (!ipArr.filter(function (item) {\n                return item.length;\n              }).some(function (one) {\n                return !isIP(one);\n              })) {\n                _context.next = 9;\n                break;\n              }\n\n              return _context.abrupt(\"return\", _message.error('IP格式不正确，请检查。'));\n\n            case 9:\n              if (!(selectIndex == -1)) {\n                _context.next = 17;\n                break;\n              }\n\n              _context.next = 12;\n              return api.add_ipconfig_one(_objectSpread({}, values));\n\n            case 12:\n              _yield$api$add_ipconf = _context.sent;\n              data = _yield$api$add_ipconf.data;\n\n              if (data.code == 0) {\n                onHide();\n\n                _message.success('新增成功');\n\n                pullData();\n              }\n\n              _context.next = 22;\n              break;\n\n            case 17:\n              _context.next = 19;\n              return api.edit_ipconfig_one(_objectSpread(_objectSpread({}, values), {}, {\n                id: selectItem.id\n              }));\n\n            case 19:\n              _yield$api$edit_ipcon = _context.sent;\n              _data = _yield$api$edit_ipcon.data;\n\n              if (_data.code == 0) {\n                onHide();\n\n                _message.success('编辑成功');\n\n                pullData();\n              }\n\n            case 22:\n              console.log('Success:', values);\n              _context.next = 28;\n              break;\n\n            case 25:\n              _context.prev = 25;\n              _context.t0 = _context[\"catch\"](0);\n              console.log('Failed:', _context.t0);\n\n            case 28:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 25]]);\n    }));\n\n    return function onEdit() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var changeLabel = function changeLabel(val) {\n    ticketForm.setFieldsValue({\n      label: val\n    });\n  };\n\n  return __jsx(_Modal, {\n    title: '白名单配置',\n    maskClosable: false,\n    visible: visible,\n    destroyOnClose: true,\n    forceRender: true,\n    onOk: onEdit,\n    onCancel: onHide,\n    cancelText: \"\\u53D6\\u6D88\",\n    okText: \"\\u786E\\u5B9A\"\n  }, __jsx(_Form, {\n    key: Date.now,\n    form: ticketForm,\n    name: \"ticketForm\",\n    initialValues: {\n      companyName: '',\n      label: '',\n      useStatus: '0'\n    }\n  }, __jsx(_Form.Item, {\n    label: \"\\u516C\\u53F8\\u540D\\u79F0\",\n    name: \"companyName\",\n    rules: [{\n      required: true,\n      message: '请输入公司名称'\n    }, function (_ref2) {\n      var getFieldValue = _ref2.getFieldValue;\n      return {\n        validator: function validator(rule, value) {\n          if (value && value.length > 50) {\n            return Promise.reject('输入范围大于0字符，小于等于50字符');\n          }\n\n          return Promise.resolve();\n        }\n      };\n    }]\n  }, __jsx(_Input, {\n    placeholder: \"\\u8BF7\\u8F93\\u5165\\u516C\\u53F8\\u540D\\u79F0\"\n  })), __jsx(_Form.Item, {\n    label: \"\\u6807\\u7B7E\",\n    name: \"label\",\n    rules: [{\n      required: true,\n      message: '请选择标签'\n    }]\n  }, __jsx(_Select, {\n    style: {\n      width: '160px'\n    },\n    onChange: function onChange(val) {\n      return changeLabel(val);\n    }\n  }, labels.map(function (v, i) {\n    return __jsx(_Select.Option, {\n      key: i,\n      value: v.code\n    }, v.description);\n  }))), __jsx(_Form.Item, {\n    label: __jsx(React.Fragment, null, __jsx(\"span\", {\n      style: {\n        color: 'red'\n      }\n    }, \"*\"), \"IP\\u5730\\u5740\"),\n    style: {\n      marginBottom: '10px'\n    }\n  }, __jsx(_Form.Item, {\n    name: \"ip\",\n    rules: [{\n      required: true,\n      message: '请输入IP地址'\n    }, function (_ref3) {\n      var getFieldValue = _ref3.getFieldValue;\n      return {\n        validator: function validator(rule, value) {\n          if (value && value.length > 500) {\n            return Promise.reject('最多输入500个字符');\n          }\n\n          return Promise.resolve();\n        }\n      };\n    }],\n    style: {\n      marginBottom: '4px'\n    }\n  }, __jsx(_Input.TextArea, {\n    placeholder: \"\\u8BF7\\u8F93\\u5165IP\\u5730\\u5740\"\n  })), __jsx(\"p\", null, \"\\u8F93\\u5165\\u591A\\u4E2AIP\\u65F6\\uFF0C\\u8BF7\\u7528\\u201C\\uFF0C\\u201D\\u9694\\u5F00\")), __jsx(_Form.Item, {\n    label: \"\\u72B6\\u6001\",\n    name: \"useStatus\",\n    rules: [{\n      required: true,\n      message: '请选择状态'\n    }]\n  }, __jsx(_Radio.Group, null, __jsx(_Radio, {\n    value: \"0\"\n  }, \"\\u505C\\u7528\"), __jsx(_Radio, {\n    value: \"1\"\n  }, \"\\u542F\\u7528\")))));\n}\n\nticketForm.getInitialProps = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n  return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          return _context2.abrupt(\"return\", {});\n\n        case 1:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _callee2);\n}));\nexport default ticketForm;","map":null,"metadata":{},"sourceType":"module"}