{"ast":null,"code":"import \"antd/lib/card/style\";\nimport _Card from \"antd/lib/card\";\nimport \"antd/lib/modal/style\";\nimport _Modal from \"antd/lib/modal\";\nimport \"antd/lib/select/style\";\nimport _Select from \"antd/lib/select\";\nimport \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/row/style\";\nimport _Row from \"antd/lib/row\";\nimport \"antd/lib/col/style\";\nimport _Col from \"antd/lib/col\";\nimport \"antd/lib/message/style\";\nimport _message from \"antd/lib/message\";\nimport \"antd/lib/form/style\";\nimport _Form from \"antd/lib/form\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Layout } from '~/components/Layout';\nimport React, { useEffect, useRef, useState } from 'react';\nimport apicustomer from '~/api/customer';\nimport apiProduct from '~/api/product';\nimport Router, { withRouter } from 'next/router';\nimport TableListOne from './TableListOne';\nimport TableListTwo from './TableListTwo';\nimport TableListThree from './TableListThree';\nimport { useCookies } from 'react-cookie';\nimport moment from 'moment';\nimport AdjustmentLimitModal from './AdjustmentLimitModal';\nimport { values } from 'lodash';\nconst breadcrumbs = [{\n  text: '客户管理'\n}, {\n  text: '客户详情'\n}];\n\nfunction body(props) {\n  const [form] = _Form.useForm();\n\n  const [cookies] = useCookies(['tenantId']);\n  const {\n    0: customerDetail,\n    1: setCustomerDetail\n  } = useState([]);\n  const {\n    0: productList,\n    1: setProductList\n  } = useState([]);\n  const {\n    0: customerBasicDetail,\n    1: setCustomerBasicDetail\n  } = useState([]);\n  const {\n    0: customerCreditSituationDetail,\n    1: setCustomerCreditSituationDetail\n  } = useState([]);\n  const {\n    0: customerAmountChangeRecord,\n    1: setCustomerAmountChangeRecord\n  } = useState([]);\n  const {\n    0: customerLetterList,\n    1: setCustomerLetterList\n  } = useState([]);\n  const {\n    0: classificationVisble,\n    1: setClassificationVisble\n  } = useState(false);\n  const {\n    0: classificationDoVisble,\n    1: setClassificationDoVisble\n  } = useState(false);\n  const {\n    0: itemList,\n    1: setItemList\n  } = useState([]);\n  const {\n    0: keyId,\n    1: setKeyId\n  } = useState([]);\n  const optionList = [{\n    value: '正常',\n    key: 1\n  }, {\n    value: '关注',\n    key: 2\n  }, {\n    value: '次级',\n    key: 3\n  }, {\n    value: '可疑',\n    key: 4\n  }, {\n    value: '损失',\n    key: 5\n  }];\n  let postData = {\n    customerId: props.router.query.id\n  };\n  const {\n    0: cardId,\n    1: setCardId\n  } = useState([]);\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const {\n          data: {\n            data,\n            code\n          }\n        } = await apiProduct.get_products({\n          tenantId: cookies.tenantId\n        });\n\n        if (code == 0) {\n          setProductList(data);\n        }\n      } catch (error) {\n        console.log(error);\n      }\n\n      fetchCustomerDetail();\n      setKeyId(props.router.query.id);\n    }\n\n    fetchData();\n  }, []);\n\n  const fetchCustomerDetail = async () => {\n    try {\n      const {\n        data: {\n          data,\n          code\n        }\n      } = await apicustomer.get_customer_detail(postData);\n\n      if (code == 0) {\n        setCustomerDetail(data);\n        setCustomerBasicDetail(data.customerInfoDto);\n        setCustomerCreditSituationDetail(data.userLimitAmountList);\n        setCustomerAmountChangeRecord(data.userLimitAmountHis);\n        setCustomerLetterList(data.customerUsedInfo);\n        setCardId(data.customerInfoDto.idCard);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const adjustment = async () => {\n    setClassificationVisble(true);\n  };\n\n  const handleCancel = async () => {\n    setClassificationVisble(false);\n  };\n\n  const handleOk = async () => {\n    form.validateFields().then(async values => {\n      let {\n        data: {\n          code\n        }\n      } = await apicustomer.update_customer_fiveLevelType({\n        id: props.router.query.id,\n        fiveLevelType: typeof values.fiveLevelType == 'string' ? typeS(values.fiveLevelType) : values.fiveLevelType\n      });\n\n      if (code == 0) {\n        _message.success('保存成功');\n\n        setClassificationVisble(false);\n        fetchCustomerDetail();\n      }\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  const adjustmentDo = item => {\n    setClassificationDoVisble(true);\n    setItemList(item);\n  };\n\n  const handleCancelDo = () => {\n    setClassificationDoVisble(false);\n  };\n\n  const productConversion = productId => {\n    let findOne = productList.find(one => one.id == productId);\n    return findOne ? findOne.name : '';\n  };\n\n  const disabledDate = current => {\n    return current && current < moment().subtract(1, 'days');\n  };\n\n  const typeS = newValue => {\n    let findOne = optionList.find(one => one.value == newValue);\n    return findOne ? findOne.key : '';\n  };\n\n  useEffect(() => {\n    form.setFieldsValue(_objectSpread(_objectSpread({}, customerBasicDetail), {}, {\n      fiveLevelType: customerBasicDetail.fiveLevelType\n    }));\n  }, [classificationVisble]);\n  return __jsx(Layout, {\n    isGray: true,\n    breadcrumbs: breadcrumbs\n  }, __jsx(_Card, {\n    title: \"\\u57FA\\u672C\\u4FE1\\u606F\",\n    headStyle: {\n      paddingLeft: 20,\n      fontWeight: 700,\n      fontSize: 18,\n      border: 0,\n      paddingBottom: -60\n    },\n    style: {\n      padding: '0 30px'\n    },\n    bordered: false\n  }, __jsx(_Row, {\n    gutter: 20\n  }, __jsx(_Col, {\n    span: 8\n  }, __jsx(\"span\", null, \"\\u5BA2\\u6237\\u59D3\\u540D\\uFF1A\", customerBasicDetail.name)), __jsx(_Col, {\n    span: 8\n  }, __jsx(\"span\", null, \"\\u624B\\u673A\\u53F7\\u7801\\uFF1A\", customerBasicDetail.phone)), __jsx(_Col, {\n    span: 8\n  }, __jsx(\"span\", null, \"\\u5BA2\\u6237\\u6027\\u522B\\uFF1A\", customerBasicDetail.sex))), __jsx(_Row, {\n    gutter: 20,\n    style: {\n      marginTop: 30\n    }\n  }, __jsx(_Col, {\n    span: 8\n  }, __jsx(\"span\", null, \"\\u8EAB\\u4EFD\\u8BC1\\u53F7\\uFF1A\", cardId.toString().replace(/^(.{6})(?:\\d+)(.{4})$/, '$1******$2'))), __jsx(_Col, {\n    span: 8\n  }, __jsx(\"span\", null, \"\\u5BA2\\u6237\\u5E74\\u9F84\\uFF1A\", customerBasicDetail.age, \"\\xA0\\u5C81\")), __jsx(_Col, {\n    span: 8\n  }, __jsx(\"span\", null, \"\\u4E94\\u7EA7\\u5206\\u7C7B\\uFF1A\", customerBasicDetail.fiveLevelType), __jsx(\"a\", {\n    style: {\n      marginLeft: 10\n    },\n    onClick: adjustment\n  }, \"\\u8C03\\u6574\"))), __jsx(_Modal, {\n    title: \"\\u8C03\\u6574\\u4E94\\u7EA7\\u5206\\u7C7B\",\n    visible: classificationVisble,\n    footer: [__jsx(_Button, {\n      key: \"back\",\n      onClick: handleCancel\n    }, \"\\u53D6\\u6D88\"), __jsx(_Button, {\n      key: \"submit\",\n      type: \"primary\",\n      onClick: handleOk\n    }, \"\\u4FDD\\u5B58\")],\n    onCancel: () => setClassificationVisble(false)\n  }, __jsx(_Form, {\n    name: \"form\",\n    key: Date.now,\n    form: form,\n    initialValues: {\n      fiveLevelType: typeS(customerBasicDetail.fiveLevelType)\n    }\n  }, __jsx(_Form.Item, {\n    name: \"fiveLevelType\",\n    label: \"\\u4E94\\u7EA7\\u5206\\u7C7B\"\n  }, __jsx(_Select, {\n    showSearch: true,\n    style: {\n      width: '130px',\n      marginRight: '6px',\n      marginLeft: 20\n    }\n  }, optionList.map((v, i) => __jsx(_Select.Option, {\n    value: v.key,\n    key: i\n  }, v.value))))))), __jsx(_Card, {\n    title: \"\\u6388\\u4FE1\\u60C5\\u51B5\",\n    headStyle: {\n      paddingLeft: 20,\n      fontWeight: 700,\n      fontSize: 18,\n      border: 0,\n      paddingBottom: -60\n    },\n    style: {\n      padding: '0 30px',\n      marginTop: 20\n    }\n  }, __jsx(\"span\", {\n    style: {\n      fontSize: 20,\n      fontWeight: 600\n    }\n  }, \"\\u603B\\u6388\\u4FE1\\u989D\\u5EA6\\uFF1A\", customerDetail.sumFixedLimitAmount), __jsx(TableListOne, {\n    customerCreditSituationDetail,\n    adjustmentDo,\n    productList\n  }), __jsx(AdjustmentLimitModal, {\n    itemList,\n    classificationDoVisble,\n    handleCancelDo,\n    productConversion,\n    disabledDate,\n    onHide: () => setClassificationDoVisble(false),\n    keyId,\n    fetchCustomerDetail\n  })), __jsx(_Card, {\n    title: \"\\u989D\\u5EA6\\u53D8\\u5316\\u8BB0\\u5F55\",\n    headStyle: {\n      paddingLeft: 20,\n      fontWeight: 700,\n      fontSize: 18,\n      border: 0,\n      paddingBottom: -60\n    },\n    style: {\n      padding: '0 30px',\n      marginTop: 20\n    }\n  }, __jsx(TableListTwo, {\n    customerAmountChangeRecord,\n    productList\n  })), __jsx(_Card, {\n    title: \"\\u7528\\u4FE1\\u60C5\\u51B5\",\n    headStyle: {\n      paddingLeft: 20,\n      fontWeight: 700,\n      fontSize: 18,\n      border: 0,\n      paddingBottom: -60\n    },\n    style: {\n      padding: '0 30px',\n      marginTop: 20\n    }\n  }, __jsx(\"span\", {\n    style: {\n      fontSize: 20,\n      fontWeight: 600\n    }\n  }, \"\\u5F85\\u8FD8\\u672C\\u91D1\\uFF1A\", customerDetail.sumUsedLimitAmount), __jsx(TableListThree, {\n    customerLetterList,\n    productList,\n    keyId\n  })));\n}\n\nbody.getInitialProps = async () => {\n  return {};\n};\n\nexport default withRouter(body);","map":null,"metadata":{},"sourceType":"module"}