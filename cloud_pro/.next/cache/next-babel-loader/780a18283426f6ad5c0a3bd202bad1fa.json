{"ast":null,"code":"import \"antd/lib/modal/style\";\nimport _Modal from \"antd/lib/modal\";\nimport \"antd/lib/card/style\";\nimport _Card from \"antd/lib/card\";\nimport \"antd/lib/list/style\";\nimport _List from \"antd/lib/list\";\nimport \"antd/lib/radio/style\";\nimport _Radio from \"antd/lib/radio\";\nimport \"antd/lib/input/style\";\nimport _Input from \"antd/lib/input\";\nimport \"antd/lib/row/style\";\nimport _Row from \"antd/lib/row\";\nimport \"antd/lib/space/style\";\nimport _Space from \"antd/lib/space\";\nimport \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/col/style\";\nimport _Col from \"antd/lib/col\";\nimport \"antd/lib/message/style\";\nimport _message from \"antd/lib/message\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from 'react';\nimport api from '~/api/collection';\nexport default function SendSms(props) {\n  const {\n    0: visible,\n    1: setVisible\n  } = useState(false);\n  const [value, setValue] = React.useState(null);\n  const [keyword, setKeyword] = React.useState(null);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: tempList,\n    1: setTempList\n  } = useState([]);\n  const {\n    0: num,\n    1: setNum\n  } = useState(0);\n  useEffect(() => {\n    if (visible) {\n      setValue(null);\n      setKeyword(null);\n      getTempList();\n    }\n  }, [visible]);\n\n  const getTempList = async (params = {}) => {\n    const {\n      data: {\n        data,\n        code\n      }\n    } = await api.fetch_sms_list(_objectSpread(_objectSpread({}, params), {}, {\n      phoneEncrypt: props.mobilePhoneEncrypt,\n      outOdernNum: props.outOrderNum\n    }));\n\n    if (code == 0) {\n      let result = [];\n\n      if (Array.isArray(data.smsList)) {\n        result = data.smsList.map((v, i) => {\n          let keys = Object.keys(v);\n          return {\n            title: v[keys[0]],\n            id: keys[0]\n          };\n        });\n      }\n\n      setTempList(result);\n      setNum(data.num || 0);\n    }\n  };\n\n  const onClickItem = item => {\n    let val = item.id == value ? null : item.id;\n    setValue(val);\n  };\n\n  const handleOk = () => {\n    if (!value) {\n      return _message.error('请先选择一个模板');\n    }\n\n    setLoading(true);\n    api.add_sms_one({\n      phoneEncrypt: props.mobilePhoneEncrypt,\n      outOdernNum: props.outOrderNum,\n      templateId: value\n    }).then(({\n      data: {\n        code\n      }\n    }) => {\n      if (code == 0) {\n        _message.success('发送成功');\n\n        setVisible(false);\n      }\n    }).finally(() => {\n      setLoading(false);\n    });\n  };\n\n  const onReset = () => {\n    setKeyword(null);\n    getTempList();\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"a\", {\n    onClick: () => setVisible(true)\n  }, \"\\u53D1\\u9001\\u77ED\\u4FE1\"), __jsx(_Modal, {\n    title: \"\\u53D1\\u9001\\u77ED\\u4FE1\",\n    width: 750,\n    visible: visible,\n    confirmLoading: loading,\n    onCancel: () => setVisible(false),\n    footer: __jsx(_Row, {\n      align: \"middle\",\n      justify: \"space-between\"\n    }, __jsx(_Col, null, \"\\u6CE8*\\u5F53\\u524D\\u8BA2\\u5355\\u4ECA\\u65E5\\u53EF\\u53D1\\u9001\\u6570\\u91CF\", num, \"\\u6761\\u3002\"), __jsx(_Col, null, __jsx(_Space, null, __jsx(_Button, {\n      onClick: () => setVisible(false)\n    }, \"\\u53D6\\u6D88\"), __jsx(_Button, {\n      type: \"primary\",\n      onClick: handleOk\n    }, \"\\u53D1\\u9001\"))))\n  }, __jsx(_Space, {\n    style: {\n      marginBottom: 30\n    }\n  }, __jsx(\"span\", null, \"\\u5173\\u952E\\u5B57\\uFF1A\"), __jsx(_Input, {\n    placeholder: \"\\u8BF7\\u8F93\\u5165\",\n    onChange: e => setKeyword(e.target.value),\n    value: keyword,\n    style: {\n      marginRight: 30\n    }\n  }), __jsx(_Button, {\n    type: \"primary\",\n    onClick: () => getTempList({\n      keyword\n    })\n  }, \"\\u67E5\\u8BE2\"), __jsx(_Button, {\n    onClick: onReset\n  }, \"\\u91CD\\u7F6E\")), __jsx(_Card, {\n    title: \"\\u77ED\\u4FE1\\u6A21\\u677F\"\n  }, __jsx(_Radio.Group, {\n    style: {\n      width: '100%'\n    },\n    value: value\n  }, __jsx(_List, {\n    itemLayout: \"horizontal\",\n    dataSource: tempList,\n    renderItem: item => __jsx(_List.Item, {\n      key: item.id,\n      onClick: () => onClickItem(item),\n      actions: [__jsx(_Radio, {\n        readonly: true,\n        value: item.id\n      })]\n    }, __jsx(\"span\", null, item.id, \"\\u2003\"), __jsx(\"span\", {\n      style: {\n        color: '#999'\n      }\n    }, item.title))\n  })))));\n}","map":null,"metadata":{},"sourceType":"module"}