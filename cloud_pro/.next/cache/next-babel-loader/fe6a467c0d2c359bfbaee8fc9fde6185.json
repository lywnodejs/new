{"ast":null,"code":"import \"antd/lib/space/style\";\nimport _Space from \"antd/lib/space\";\nimport \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/select/style\";\nimport _Select from \"antd/lib/select\";\nimport \"antd/lib/input/style\";\nimport _Input from \"antd/lib/input\";\nimport \"antd/lib/form/style\";\nimport _Form from \"antd/lib/form\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Layout } from '~/components/Layout';\nimport React, { useEffect, useState } from 'react';\nimport { useCookies } from 'react-cookie';\nimport api from '~/api/authority';\nimport apiInCollection from '~/api/collection';\nimport AccountForm from './accountForm';\nimport TableList from './TableList';\nimport _ from 'lodash';\nconst breadcrumbs = [{\n  text: '权限管理'\n}, {\n  text: '成员管理'\n}];\n\nfunction body(props) {\n  const [cookies] = useCookies(['tenantId']);\n\n  const [form] = _Form.useForm();\n\n  const {\n    0: data,\n    1: setData\n  } = useState({\n    list: [],\n    total: 0\n  });\n  const {\n    0: roles,\n    1: setRoles\n  } = useState([]);\n  const {\n    0: visible,\n    1: setVisible\n  } = useState(false);\n  const {\n    0: selectIndex,\n    1: setIndex\n  } = useState(-1);\n  const {\n    0: selectItem,\n    1: setSelectItem\n  } = useState({});\n  const {\n    0: departments,\n    1: setDepartments\n  } = useState([]);\n  const {\n    0: showDepartments,\n    1: setShowDepartments\n  } = useState([]);\n  const {\n    0: showRoles,\n    1: setShowRoles\n  } = useState([]);\n  const {\n    0: pageParams,\n    1: setPageParams\n  } = useState({\n    pageNo: 1,\n    pageSize: 10\n  });\n  useEffect(() => {\n    fetchList(pageParams);\n    fetchDepartment();\n    fetchRoles();\n  }, []);\n\n  const fetchDepartment = async () => {\n    try {\n      const {\n        data\n      } = await api.getVisibleDepart();\n\n      if (data.code == 0) {\n        setDepartments(data.data);\n        setShowDepartments(data.data);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const handleSearchDepart = keyword => {\n    if (!keyword) {\n      return setShowDepartments(departments);\n    }\n\n    const arr = departments.filter(v => v.name.indexOf(keyword) > -1);\n    setShowDepartments(arr);\n  };\n\n  const handleChangeDepart = () => {\n    setShowDepartments(departments);\n  };\n\n  const fetchRoles = async keyword => {\n    let params = {};\n\n    if (keyword) {\n      params.keyword = keyword;\n    }\n\n    try {\n      const {\n        data: {\n          data,\n          code\n        }\n      } = await api.getRoleList(params);\n\n      if (code === 0) {\n        if (!keyword) {\n          setRoles(data.list);\n        }\n\n        setShowRoles(data.list);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const _fetchRoles = _.debounce(fetchRoles, 300);\n\n  const handleSearchRole = v => {\n    _fetchRoles(v);\n  };\n\n  const handleChangeRole = () => {\n    setShowRoles(roles);\n  };\n\n  const fetchList = async values => {\n    try {\n      const {\n        data: {\n          data,\n          code\n        }\n      } = await api.getAccount(_objectSpread({}, values));\n\n      if (code === 0) {\n        setData(data);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const onAdd = () => {\n    setIndex(-1);\n    setVisible(true);\n    setSelectItem({});\n  };\n\n  const onReset = () => {\n    form.resetFields();\n    onSearch();\n  };\n\n  const onSearch = () => {\n    changePageParams(1);\n  };\n\n  const changePageParams = (pageNo = pageParams.pageNo, pageSize = pageParams.pageSize) => {\n    let pParams = {\n      pageNo,\n      pageSize\n    };\n\n    let params = _objectSpread(_objectSpread({}, form.getFieldsValue()), pParams);\n\n    setPageParams(pParams);\n    fetchList(params);\n  };\n\n  const onEdit = item => {\n    setIndex(item.id);\n    setVisible(true);\n    setSelectItem(item);\n  };\n\n  return __jsx(Layout, {\n    breadcrumbs: breadcrumbs\n  }, __jsx(_Space, {\n    direction: \"vertical\",\n    size: \"large\",\n    style: {\n      width: '100%'\n    }\n  }, __jsx(_Form, {\n    form: form,\n    onFinish: onSearch,\n    layout: \"inline\",\n    className: \"searchForm\",\n    initialValues: {\n      keyword: '',\n      departmentId: null,\n      roleId: null\n    }\n  }, __jsx(_Form.Item, {\n    label: \"\\u5173\\u952E\\u5B57\",\n    name: \"keyword\"\n  }, __jsx(_Input, {\n    placeholder: \"\\u8BF7\\u8F93\\u5165\\u5173\\u952E\\u5B57\"\n  })), __jsx(_Form.Item, {\n    label: \"\\u90E8\\u95E8\",\n    name: \"departmentId\"\n  }, __jsx(_Select, {\n    showSearch: true,\n    placeholder: \"\\u8BF7\\u9009\\u62E9\\u90E8\\u95E8\",\n    filterOption: false,\n    defaultActiveFirstOption: false,\n    onSearch: handleSearchDepart,\n    onChange: handleChangeDepart,\n    style: {\n      width: '200px'\n    }\n  }, __jsx(_Select.Option, {\n    value: null,\n    key: -1\n  }, \"\\u5168\\u90E8\"), showDepartments.map((v, i) => {\n    return __jsx(_Select.Option, {\n      value: v.id,\n      key: i\n    }, v.name);\n  }))), __jsx(_Form.Item, {\n    label: \"\\u89D2\\u8272\",\n    name: \"roleId\"\n  }, __jsx(_Select, {\n    showSearch: true,\n    placeholder: \"\\u8BF7\\u9009\\u62E9\\u89D2\\u8272\",\n    filterOption: false,\n    defaultActiveFirstOption: false,\n    onSearch: handleSearchRole,\n    onChange: handleChangeRole,\n    style: {\n      width: '200px'\n    }\n  }, __jsx(_Select.Option, {\n    value: null,\n    key: -1\n  }, \"\\u5168\\u90E8\"), showRoles.map(v => {\n    return __jsx(_Select.Option, {\n      value: v.id,\n      key: v.id\n    }, v.roleName);\n  }))), __jsx(_Button, {\n    type: \"primary\",\n    style: {\n      marginRight: 15\n    },\n    htmlType: \"submit\"\n  }, \"\\u67E5\\u8BE2\"), __jsx(_Button, {\n    style: {\n      marginRight: 15\n    },\n    onClick: onReset\n  }, \"\\u91CD\\u7F6E\"), __jsx(_Button, {\n    type: \"primary\",\n    onClick: onAdd\n  }, \"\\u65B0\\u589E\")), __jsx(TableList, {\n    data,\n    onEdit,\n    pageParams,\n    changePageParams\n  }), __jsx(AccountForm, {\n    handleSearchRole,\n    handleChangeRole,\n    handleSearchDepart,\n    handleChangeDepart,\n    showDepartments,\n    showRoles,\n    selectIndex,\n    visible,\n    selectItem,\n    onHide: () => setVisible(false),\n    changePageParams\n  })));\n}\n\nbody.getInitialProps = async () => {\n  return {};\n};\n\nexport default body;","map":null,"metadata":{},"sourceType":"module"}