{"ast":null,"code":"import \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/space/style\";\nimport _Space from \"antd/lib/space\";\nimport \"antd/lib/message/style\";\nimport _message from \"antd/lib/message\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect } from 'react';\nimport Router from 'next/router';\nimport BaseTable from './BaseTable';\nimport AddContacts from './AddContacts';\nimport AddHistory from './AddHistory';\nimport Remark from '~/components/common/Remark';\nimport api from '~/api/collection';\nexport default function (props) {\n  // useEffect(() => {\n  //   console.log('111111:', props)\n  // }, [props])\n  const getRemark = (remark, successFun, failFun) => {\n    console.log(remark);\n    setTimeout(() => {\n      successFun();\n    }, 3000);\n  };\n\n  const getHistoryData = (formData, successFun, failFun) => {\n    let params = _objectSpread(_objectSpread({}, formData), {}, {\n      collectionOrderId: +props.id,\n      collectionMobilePhoneEncrypt: props.mobilePhoneEncrypt\n    });\n\n    api.add_one_collection(params).then(({\n      data: {\n        code\n      }\n    }) => {\n      if (code == 0) {\n        _message.success('添加成功');\n\n        successFun();\n        props.reloadData();\n      } else {\n        failFun();\n      }\n    }).catch(() => {\n      failFun();\n    });\n  };\n\n  const getContactInfo = (form, successFun, failFun) => {\n    console.log(form);\n    setTimeout(() => {\n      successFun();\n    }, 3000);\n  };\n\n  const columns = [{\n    title: '联系人关系',\n    dataIndex: 'attrName',\n    key: 'attrName',\n    width: 150\n  }, {\n    title: '联系人姓名',\n    dataIndex: 'userName',\n    key: 'userName',\n    width: 150\n  }, {\n    title: '联系电话',\n    dataIndex: 'phoneNo',\n    key: 'phoneNo',\n    width: 150\n  }, {\n    title: '更新时间',\n    dataIndex: 'updateTime',\n    key: 'updateTime',\n    width: 150\n  }, // {\n  //   title: '备注',\n  //   dataIndex: 'remark',\n  //   key: 'remark',\n  //   width: 150,\n  // },\n  {\n    title: '操作',\n    key: 'cz',\n    width: 150,\n    render: r => {\n      return __jsx(_Space, null, __jsx(AddHistory, _extends({\n        phoneNo: r.phoneNo,\n        getHistoryData: getHistoryData\n      }, props)));\n    }\n  }];\n\n  const toContacts = () => {\n    Router.push(`/collection/reminded/form/phone-list?orderId=${props.id}&uid=${props.userId}`);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(_Space, {\n    style: {\n      marginBottom: 20\n    }\n  }, __jsx(_Button, {\n    type: \"primary\",\n    onClick: toContacts\n  }, \"\\u901A\\u8BAF\\u5F55\\u8BE6\\u60C5\")), __jsx(BaseTable, {\n    list: props.list || [],\n    columns: columns,\n    rowKey: \"contactId\"\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}