{"ast":null,"code":"import \"antd/lib/modal/style\";\nimport _Modal from \"antd/lib/modal\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport \"antd/lib/input-number/style\";\nimport _InputNumber from \"antd/lib/input-number\";\nimport \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/select/style\";\nimport _Select from \"antd/lib/select\";\nimport \"antd/lib/message/style\";\nimport _message from \"antd/lib/message\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport \"antd/lib/form/style\";\nimport _Form from \"antd/lib/form\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect, useState } from 'react';\nimport { useCookies } from 'react-cookie';\nimport api from '~/api/collection';\nimport TreeMembers from './TreeMembers';\nvar layout = {\n  labelCol: {\n    span: 4\n  },\n  wrapperCol: {\n    span: 20\n  }\n};\nvar tailLayout = {\n  wrapperCol: {\n    offset: 4,\n    span: 20\n  }\n};\n\nfunction BatchedAssignModal(props) {\n  var visible = props.visible,\n      onHide = props.onHide,\n      total = props.total,\n      pullData = props.pullData,\n      tenantId = props.tenantId,\n      productList = props.productList,\n      collectionLevels = props.collectionLevels,\n      onSearch = props.onSearch,\n      sourceCom = props.sourceCom,\n      onAssignSubmit = props.onAssignSubmit;\n\n  var _useState = useState([]),\n      pids = _useState[0],\n      setPids = _useState[1];\n\n  var _useState2 = useState([]),\n      accountIds = _useState2[0],\n      setAccountIds = _useState2[1];\n\n  var _useState3 = useState([]),\n      accountNames = _useState3[0],\n      setAccountNames = _useState3[1];\n\n  var _useState4 = useState([]),\n      companyIds = _useState4[0],\n      setCompanyIds = _useState4[1];\n\n  var _Form$useForm = _Form.useForm(),\n      _Form$useForm2 = _slicedToArray(_Form$useForm, 1),\n      batchedAssignModal = _Form$useForm2[0];\n\n  useEffect(function () {\n    function fetchData() {\n      return _fetchData.apply(this, arguments);\n    }\n\n    function _fetchData() {\n      _fetchData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                console.log(productList);\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return _fetchData.apply(this, arguments);\n    }\n\n    visible && fetchData();\n  }, [visible]);\n\n  var onEdit = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var values, pidSource, pidTarget, _yield$api$edit_overd, _yield$api$edit_overd2, data, code;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return batchedAssignModal.validateFields();\n\n            case 3:\n              values = _context2.sent;\n              console.log(pids);\n\n              if (!pids.length) {\n                _context2.next = 10;\n                break;\n              }\n\n              pidSource = Math.max.apply(null, pids);\n              pidTarget = Math.min.apply(null, pids);\n\n              if (!(pidSource !== pidTarget)) {\n                _context2.next = 10;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", _message.error('分配对象需同一岗位级别'));\n\n            case 10:\n              if (!(!values.sendOrderNum && values.sendOrderNum != 0)) {\n                _context2.next = 12;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", _message.error('分配数量未填写'));\n\n            case 12:\n              if (accountIds.length) {\n                _context2.next = 14;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", _message.error(\"\\u8BF7\\u9009\\u62E9\\u8981\\u5206\\u914D\\u7684\".concat(onAssignSubmit && sourceCom != 'cs' ? '信审员' : sourceCom == 'cs' ? '所选人数' : '催收员')));\n\n            case 14:\n              if (!(values.sendOrderNum < 1 || values.sendOrderNum > total)) {\n                _context2.next = 16;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", _message.error('分配数量须大于0小于总订单数'));\n\n            case 16:\n              if (!onAssignSubmit) {\n                _context2.next = 19;\n                break;\n              }\n\n              typeof onAssignSubmit === 'function' && onAssignSubmit({\n                accountIds: accountIds,\n                accountNames: accountNames,\n                assignType: 2,\n                sendOrderNum: values.sendOrderNum,\n                productId: values.productId\n              });\n              return _context2.abrupt(\"return\");\n\n            case 19:\n              _context2.next = 21;\n              return api.edit_overdueAlloc_allselect({\n                type: 2,\n                collectionOrderIdList: null,\n                accountIdList: accountIds,\n                accountNameList: accountNames,\n                companyIdList: companyIds,\n                productId: values.productId,\n                sendOrderNum: values.sendOrderNum,\n                collectionLevel: values.collectionLevel,\n                tenantId: tenantId\n              });\n\n            case 21:\n              _yield$api$edit_overd = _context2.sent;\n              _yield$api$edit_overd2 = _yield$api$edit_overd.data;\n              data = _yield$api$edit_overd2.data;\n              code = _yield$api$edit_overd2.code;\n\n              if (code == 0) {\n                onHide();\n\n                _message.success('按量分配成功');\n\n                pullData();\n              }\n\n              _context2.next = 31;\n              break;\n\n            case 28:\n              _context2.prev = 28;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.log('Failed:', _context2.t0);\n\n            case 31:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 28]]);\n    }));\n\n    return function onEdit() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var changeProductId = function changeProductId(val) {\n    batchedAssignModal.setFieldsValue('productId', val);\n  };\n\n  var changeCollectionLevel = function changeCollectionLevel(val) {\n    batchedAssignModal.setFieldsValue('collectionLevel', val);\n  };\n\n  var onAllSearch = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var values;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return batchedAssignModal.validateFields();\n\n            case 2:\n              values = _context3.sent;\n              onSearch(values);\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function onAllSearch() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(_Modal, {\n    title: \"\\u6309\\u91CF\\u5206\\u914D\",\n    maskClosable: false,\n    visible: visible,\n    onOk: onEdit,\n    onCancel: onHide,\n    cancelText: \"\\u53D6\\u6D88\",\n    okText: \"\\u786E\\u5B9A\",\n    forceRender: true,\n    width: 600,\n    destroyOnClose: true\n  }, __jsx(_Form, _extends({}, layout, {\n    form: batchedAssignModal,\n    name: \"batchedAssignModal\",\n    initialValues: {\n      productId: '',\n      collectionLevel: ''\n    }\n  }), __jsx(_Form.Item, {\n    label: \"\\u4EA7\\u54C1\",\n    name: \"productId\",\n    rules: [{\n      required: true,\n      message: '请先选择产品'\n    }]\n  }, __jsx(_Select, {\n    onChange: function onChange(val) {\n      return changeProductId(val);\n    },\n    placeholder: \"\\u8BF7\\u9009\\u62E9\"\n  }, __jsx(_Select.Option, {\n    value: \"\"\n  }, \"\\u8BF7\\u9009\\u62E9\"), productList.map(function (v, i) {\n    return __jsx(_Select.Option, {\n      key: i,\n      value: v.id\n    }, v.name);\n  }))), !onAssignSubmit && __jsx(_Form.Item, {\n    label: \"\\u50AC\\u6536\\u7EA7\\u522B\",\n    name: \"collectionLevel\",\n    rules: [{\n      required: true,\n      message: '请先选择催收级别'\n    }]\n  }, __jsx(_Select, {\n    onChange: function onChange(val) {\n      return changeCollectionLevel(val);\n    },\n    placeholder: \"\\u8BF7\\u9009\\u62E9\"\n  }, __jsx(_Select.Option, {\n    value: \"\"\n  }, \"\\u8BF7\\u9009\\u62E9\"), collectionLevels.map(function (v, i) {\n    return __jsx(_Select.Option, {\n      key: i,\n      value: v.code\n    }, v.description);\n  }))), __jsx(_Form.Item, tailLayout, __jsx(_Button, {\n    type: \"primary\",\n    style: {\n      marginRight: 15\n    },\n    onClick: onAllSearch\n  }, \"\\u603B\\u5355\\u6570\\u67E5\\u8BE2\"), __jsx(\"span\", null, \"\\u5F53\\u524D\\u603B\\u5355\\u6570\\uFF1A\", total)), __jsx(_Form.Item, {\n    label: \"\\u5206\\u914D\\u6570\\u91CF\",\n    name: \"sendOrderNum\"\n  }, __jsx(_InputNumber, {\n    style: {\n      width: '100%'\n    },\n    min: 0,\n    max: total,\n    placeholder: \"\\u8BF7\\u8F93\\u5165\\u6574\\u6570\\uFF0C\\u4E0D\\u5F97\\u8D85\\u8FC7\\u603B\\u5355\\u6570\"\n  })), __jsx(_Form.Item, {\n    label: \"\\u4EBA\\u5458\"\n  }, __jsx(TreeMembers, {\n    onSetPids: function onSetPids(payload) {\n      return setPids(payload);\n    },\n    onSetAccountIds: function onSetAccountIds(payload) {\n      return setAccountIds(payload);\n    },\n    onSetAccountNames: function onSetAccountNames(payload) {\n      return setAccountNames(payload);\n    },\n    onSetCompanyIds: function onSetCompanyIds(payload) {\n      return setCompanyIds(payload);\n    }\n  }))));\n}\n\nexport default BatchedAssignModal;","map":null,"metadata":{},"sourceType":"module"}