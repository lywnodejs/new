{"ast":null,"code":"import \"antd/lib/card/style\";\nimport _Card from \"antd/lib/card\";\nimport \"antd/lib/space/style\";\nimport _Space from \"antd/lib/space\";\nimport \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/row/style\";\nimport _Row from \"antd/lib/row\";\nimport \"antd/lib/col/style\";\nimport _Col from \"antd/lib/col\";\nimport \"antd/lib/radio/style\";\nimport _Radio from \"antd/lib/radio\";\nimport \"antd/lib/input/style\";\nimport _Input from \"antd/lib/input\";\nimport \"antd/lib/message/style\";\nimport _message from \"antd/lib/message\";\nimport \"antd/lib/form/style\";\nimport _Form from \"antd/lib/form\";\nimport \"antd/lib/time-picker/style\";\nimport _TimePicker from \"antd/lib/time-picker\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Layout } from '~/components/Layout';\nimport React, { useEffect, useRef, useState } from 'react';\nimport apiMarketing from '~/api/marketing';\nimport apiAgreement from '~/api/agreement';\nimport Router from 'next/router';\nimport { SearchOutlined } from '@ant-design/icons';\nconst {\n  RangePicker\n} = _TimePicker;\nconst layout = {\n  labelCol: {\n    span: 3\n  },\n  wrapperCol: {\n    span: 15\n  }\n};\n\nconst getData = async id => {\n  try {\n    let {\n      data: {\n        code,\n        data\n      }\n    } = await apiAgreement.getTemplateDetail(id);\n\n    if (code == 0) {\n      return data;\n    }\n\n    return {};\n  } catch (e) {\n    return {};\n  }\n};\n\nconst getLabelData = async cb => {\n  try {\n    let {\n      data: {\n        code,\n        data\n      }\n    } = await apiAgreement.getTemplateLabel('TEMP_LABEL');\n\n    if (code == 0) {\n      cb(data);\n    }\n\n    return [];\n  } catch (e) {\n    return [];\n  }\n};\n\nconst breadcrumbs = [{\n  text: '协议管理'\n}, {\n  text: '协议模板'\n}, {\n  text: '新增模板'\n}];\n\nfunction body(props) {\n  const [form] = _Form.useForm();\n\n  const editorElem = useRef(null);\n  const {\n    0: wEdit,\n    1: setWEdit\n  } = useState();\n  const {\n    0: labels,\n    1: setLabels\n  } = useState([]);\n  const {\n    0: editorText,\n    1: setEditorText\n  } = useState(null);\n  const editFunc = props.id ? apiAgreement.updateTemplate : apiAgreement.addTemplate;\n\n  if (props.id) {\n    breadcrumbs[2].text = '编辑模板';\n  }\n\n  useEffect(() => {\n    const E = require('wangeditor');\n\n    const editor = new E(editorElem.current);\n    setWEdit(editor);\n    editor.config.pasteFilterStyle = false;\n    editor.config.zIndex = 500;\n\n    editor.config.onchange = html => {\n      // console.log(html)\n      form.setFieldsValue({\n        content: html\n      });\n    };\n\n    editor.create(); // editor.txt.html(doc)\n\n    editor.$textContainerElem.css('height', '600px !important');\n    editor.config.pasteIgnoreImg = true;\n    editor.config.uploadImgMaxLength = 1;\n    editor.config.uploadImgShowBase64 = true;\n\n    editor.config.customUploadImg = function (resultFiles, insertImgFn) {\n      // resultFiles 是 input 中选中的文件列表\n      // insertImgFn 是获取图片 url 后，插入到编辑器的方法\n      readFile(resultFiles, base64 => {\n        apiAgreement.uploadData({\n          imgData: base64\n        }).then(({\n          data: {\n            code,\n            data\n          }\n        }) => {\n          console.log(code, data);\n\n          if (code == 0) {\n            insertImgFn(data);\n          }\n        });\n      });\n    }; // console.log(props.data)\n\n\n    if (props.data) {\n      form.setFieldsValue(props.data);\n      editor.txt.html(props.data.content);\n    }\n\n    getLabelData(labels => {\n      setLabels(labels);\n    });\n    return () => {\n      // 组件销毁时销毁编辑器  注：class写法需要在componentWillUnmount中调用\n      editor.destroy();\n    };\n  }, []);\n\n  const readFile = (files, cb) => {\n    var file = files[0];\n    var reader = new FileReader();\n    reader.readAsDataURL(file);\n\n    reader.onload = function (e) {\n      cb(reader.result);\n    };\n  };\n\n  const clickItem = v => {\n    let text = `${'${' + v.code + '}'}`;\n    wEdit.cmd.do('insertHTML', text);\n  };\n\n  const preview = () => {\n    let {\n      name,\n      content\n    } = form.getFieldsValue(['name', 'content']);\n\n    if (!name || !content) {\n      return _message.error('请输入名称或内容');\n    }\n\n    let params = {\n      templateName: name,\n      content: content.replaceAll('<br>', '<br></br>')\n    };\n    apiAgreement.previewTemplate(params).then(res => {\n      console.log(res);\n\n      if (res.data.code == 0) {\n        window.open(res.data.data);\n      }\n    });\n  };\n\n  const saveContent = () => {\n    form.validateFields().then(val => {\n      let obj = _objectSpread({}, val);\n\n      if (props.id) {\n        obj.id = props.id;\n      }\n\n      let keys = [];\n      labels.forEach(item => {\n        let str = '${' + item.code + '}';\n\n        if (obj.content.indexOf(str) > -1) {\n          keys.push(item.code);\n        }\n      });\n      obj.extraConfig = keys.join(',');\n      editFunc(obj).then(res => {\n        if (res.data.code == 0) {\n          _message.success('提交成功');\n\n          Router.back();\n        }\n      });\n    });\n  };\n\n  return __jsx(Layout, {\n    breadcrumbs: breadcrumbs\n  }, __jsx(_Card, {\n    title: null\n  }, __jsx(_Form, _extends({}, layout, {\n    form: form,\n    name: \"basic\"\n  }), __jsx(_Form.Item, {\n    label: \"\\u6A21\\u677F\\u540D\\u79F0\",\n    name: \"name\",\n    rules: [{\n      required: true,\n      message: '模板名称不可为空'\n    }]\n  }, __jsx(_Input, {\n    maxLength: 30,\n    placeholder: \"\\u793A\\u4F8B\\uFF1A\\u300A\\u9690\\u79C1\\u534F\\u8BAE\\u300B\\uFF0C\\u6700\\u591A30\\u5B57\\u7B26\\u3002\"\n  })), __jsx(_Form.Item, {\n    label: \"\\u6A21\\u677F\\u72B6\\u6001\",\n    name: \"status\",\n    rules: [{\n      required: true,\n      message: '请选择模板状态'\n    }]\n  }, __jsx(_Radio.Group, null, __jsx(_Radio, {\n    value: 1\n  }, \"\\u542F\\u7528\"), __jsx(_Radio, {\n    value: 0\n  }, \"\\u505C\\u7528\"))), __jsx(_Form.Item, {\n    label: \"\\u6A21\\u677F\\u5185\\u5BB9\",\n    name: \"content\",\n    rules: [{\n      required: true,\n      message: '请填写模板内容'\n    }]\n  }, __jsx(_Form.Item, {\n    label: \"\\u70B9\\u51FB\\u6DFB\\u52A0\\u6807\\u7B7E\\uFF1A\",\n    style: {\n      marginBottom: 0,\n      border: '1px solid #c9d8db',\n      borderBottom: 'none',\n      padding: '15px 20px 0'\n    }\n  }, __jsx(_Row, {\n    gutter: 20\n  }, labels.map((v, i) => {\n    return __jsx(_Col, {\n      onClick: () => clickItem(v),\n      key: i,\n      style: {\n        paddingBottom: 15,\n        cursor: 'pointer'\n      }\n    }, v.description, \"\\uFF1A$\", '{' + v.code + '}');\n  }))), __jsx(\"div\", {\n    ref: editorElem,\n    style: {\n      background: '#fff'\n    }\n  })), __jsx(_Form.Item, {\n    wrapperCol: {\n      offset: 3\n    }\n  }, __jsx(_Space, {\n    style: {\n      padding: '20px 0'\n    },\n    size: 80\n  }, __jsx(_Button, {\n    style: {\n      width: 100\n    },\n    onClick: preview\n  }, \"\\u9884\\u89C8\"), __jsx(_Button, {\n    style: {\n      width: 100\n    },\n    type: \"primary\",\n    onClick: saveContent\n  }, \"\\u4FDD\\u5B58\"))))));\n}\n\nbody.getInitialProps = async ctx => {\n  let id = ctx.ctx.query.id;\n  let data = null;\n\n  if (id) {\n    data = await getData(id);\n  }\n\n  return {\n    data,\n    id\n  };\n};\n\nexport default body;","map":null,"metadata":{},"sourceType":"module"}