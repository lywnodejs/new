{"ast":null,"code":"import \"antd/lib/card/style\";\nimport _Card from \"antd/lib/card\";\nimport \"antd/lib/modal/style\";\nimport _Modal from \"antd/lib/modal\";\nimport \"antd/lib/select/style\";\nimport _Select from \"antd/lib/select\";\nimport \"antd/lib/input-number/style\";\nimport _InputNumber from \"antd/lib/input-number\";\nimport \"antd/lib/date-picker/style\";\nimport _DatePicker from \"antd/lib/date-picker\";\nimport \"antd/lib/table/style\";\nimport _Table from \"antd/lib/table\";\nimport \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/form/style\";\nimport _Form from \"antd/lib/form\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Layout } from '~/components/Layout';\nimport React, { useEffect, useRef, useState } from 'react';\nimport apiAccounting from '~/api/accounting';\nimport Router, { withRouter } from 'next/router';\nimport { InfoCircleOutlined } from '@ant-design/icons';\nimport moment from 'moment';\nconst breadcrumbs = [{\n  text: '账务管理'\n}, {\n  text: '成本明细'\n}, {\n  text: '资金成本明细'\n}];\nconst pageParams = {\n  pageNum: 1,\n  pageSize: 10\n};\n\nfunction body(props) {\n  const {\n    0: itemList,\n    1: setItemList\n  } = useState([]);\n  const {\n    0: visible,\n    1: setVisible\n  } = useState(false);\n\n  const [form] = _Form.useForm();\n\n  const {\n    0: channelList,\n    1: setChannelList\n  } = useState([]);\n  const {\n    0: timeDate,\n    1: setTimeDate\n  } = useState([]);\n  const {\n    0: returnData,\n    1: setReturnData\n  } = useState([]);\n  const {\n    0: confirmVisible,\n    1: setConfirmVisible\n  } = useState(false);\n  const {\n    0: accountList,\n    1: setAccountList\n  } = useState([]);\n  const columns = [{\n    title: '发生日期',\n    dataIndex: 'happenDate',\n    key: 'happenDate',\n    width: 150\n  }, {\n    title: '类型',\n    dataIndex: 'operType',\n    key: 'operType',\n    width: 150,\n    render: text => {\n      switch (text) {\n        case 1:\n          return '开始占用';\n\n        case 2:\n          return '解除占用';\n      }\n    }\n  }, {\n    title: '发生金额（元）',\n    dataIndex: 'amount',\n    key: 'amount',\n    width: 150,\n    render: record => {\n      if (record == null) {\n        return null;\n      } else {\n        let str = Number(record).toLocaleString();\n        return str;\n      }\n    }\n  }, {\n    title: '利率（年）',\n    dataIndex: 'rate',\n    key: 'rate',\n    width: 150,\n    render: (record, text) => {\n      if (record == 0) {\n        return 0;\n      }\n\n      let str = Number(record).toFixed(3);\n      str += '%';\n      return str;\n    }\n  }, {\n    title: '发生账户',\n    dataIndex: 'accountType',\n    key: 'accountType',\n    width: 150,\n    render: (record, row) => {\n      return __jsx(\"div\", null, __jsx(\"p\", null, row.accountType, \"\\xA0\\xA0\", row.account));\n    }\n  }, {\n    title: '操作人',\n    dataIndex: 'updateBy',\n    key: 'updateBy',\n    width: 150,\n    render: (record, row) => {\n      return __jsx(\"span\", null, __jsx(\"p\", null, row.updateBy), __jsx(\"p\", null, row.updateTime));\n    }\n  }];\n  useEffect(() => {\n    async function fetchData() {\n      recordDetail();\n      fetchAccount();\n    }\n\n    fetchData();\n  }, []);\n\n  const recordDetail = async () => {\n    try {\n      const {\n        data: {\n          data,\n          code\n        }\n      } = await apiAccounting.fetch_record_detail(_objectSpread(_objectSpread({}, pageParams), {}, {\n        moneyCostId: Number(props.router.query.moneyCostId)\n      }));\n\n      if (code == 0) {\n        setItemList(data.list);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const fetchAccount = async () => {\n    try {\n      const {\n        data: {\n          data,\n          code\n        }\n      } = await apiAccounting.get_data_dict('FUND_PAY_CHANNEL_MERCHANT_CODE');\n\n      if (code == 0) {\n        setAccountList(data);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const channelId = payChannelName => {\n    let findOne = accountList.find(one => one.description == payChannelName);\n    return findOne ? findOne.code : '';\n  };\n\n  const release = () => {\n    setVisible(true);\n  };\n\n  const handleCancel = () => {\n    setVisible(false);\n  };\n\n  const nextStep = async () => {\n    const values = await form.validateFields();\n    setReturnData(values);\n    setConfirmVisible(true);\n    setTimeDate(moment(values.time).format('YYYY-MM-DD'));\n  };\n\n  const submit = async () => {\n    let postData = {\n      happenDate: timeDate,\n      amount: returnData.amount,\n      accountType: channelId(returnData.payChannelName),\n      account: returnData.payChannelName,\n      moneyCostId: props.router.query.moneyCostId\n    };\n\n    try {\n      const {\n        data: {\n          data,\n          code\n        }\n      } = await apiAccounting.fetch_relieve_delete(postData);\n\n      if (code == 0) {\n        setConfirmVisible(false);\n        setVisible(false);\n        recordDetail();\n        message.success('解除成功');\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return __jsx(Layout, {\n    isGray: true,\n    breadcrumbs: breadcrumbs\n  }, __jsx(_Card, {\n    style: {\n      position: 'relative'\n    }\n  }, \"\\u5269\\u4F59\\u5360\\u7528\\u91D1\\u989D\\uFF1A\", __jsx(_Button, {\n    type: \"primary\",\n    style: {\n      position: 'absolute',\n      top: 25,\n      right: 23\n    },\n    onClick: release\n  }, \"\\u89E3\\u9664\\u5360\\u7528\"), __jsx(_Table, {\n    style: {\n      marginTop: 20\n    },\n    columns: columns,\n    dataSource: itemList\n  }), __jsx(_Modal, {\n    title: \"\\u89E3\\u9664\\u8D44\\u91D1\\u5360\\u7528\",\n    visible: visible,\n    footer: [__jsx(_Button, {\n      key: \"back\",\n      onClick: handleCancel\n    }, \"\\u53D6\\u6D88\"), __jsx(_Button, {\n      key: \"submit\",\n      type: \"primary\",\n      onClick: nextStep\n    }, \"\\u4E0B\\u4E00\\u6B65\")],\n    onCancel: () => setVisible(false)\n  }, __jsx(_Form, {\n    name: form,\n    form: form,\n    style: {\n      marginLeft: 50\n    },\n    initialValues: {\n      happenDate: ''\n    }\n  }, __jsx(_Form.Item, {\n    label: \"\\u89E3\\u9664\\u65E5\\u671F\",\n    name: \"time\",\n    rules: [{\n      required: true,\n      message: '请选择开始日期'\n    }]\n  }, __jsx(_DatePicker, {\n    allowClear: true,\n    style: {\n      width: 200\n    }\n  })), __jsx(_Form.Item, {\n    label: \"\\u91D1\\u989D\",\n    name: \"amount\",\n    rules: [{\n      required: true,\n      message: '请输入金额'\n    }, ({\n      getFieldValue\n    }) => ({\n      validator(rule, value) {\n        var reg = /^(([0-9]+)|([0-9]+\\.[0-9]{0,2}))$/;\n\n        if (value && !reg.test(value)) {\n          return Promise.reject('请输入大于等于0的数，最多输入12位数，并且最多保留2位小数');\n        }\n\n        return Promise.resolve();\n      }\n\n    })]\n  }, __jsx(_InputNumber, {\n    style: {\n      width: 200,\n      marginLeft: 30\n    },\n    max: 999999999999\n  })), __jsx(_Form.Item, {\n    label: \"\\u884C\\u65B9\\u8D26\\u6237\",\n    name: \"payChannelName\",\n    rules: [{\n      required: true,\n      message: '请选择行方账户'\n    }]\n  }, __jsx(_Select, {\n    style: {\n      width: 200\n    }\n  }, accountList.map((v, i) => __jsx(_Select.Option, {\n    key: i,\n    value: v.description\n  }, v.description)))))), __jsx(_Modal, {\n    title: \"\\u64CD\\u4F5C\\u786E\\u8BA4\",\n    visible: confirmVisible,\n    footer: [__jsx(_Button, {\n      key: \"back\",\n      onClick: () => setConfirmVisible(false)\n    }, \"\\u8FD4\\u56DE\\u4FEE\\u6539\"), __jsx(_Button, {\n      key: \"submit\",\n      type: \"primary\",\n      onClick: submit\n    }, \"\\u786E\\u8BA4\\u63D0\\u4EA4\")],\n    onCancel: () => setConfirmVisible(false)\n  }, __jsx(\"div\", {\n    style: {\n      textAlign: 'center',\n      backgroundColor: '#d1e9ff',\n      color: '#3da2ff',\n      height: 30,\n      margin: '0 auto',\n      paddingTop: 5\n    }\n  }, __jsx(InfoCircleOutlined, {\n    style: {\n      paddingRight: 5\n    }\n  }), \"\\u8BF7\\u786E\\u8BA4\\u4FE1\\u606F\\u662F\\u5426\\u6B63\\u786E\"), __jsx(\"div\", {\n    style: {\n      marginLeft: 40,\n      marginTop: 20\n    }\n  }, __jsx(\"p\", null, \"\\u89E3\\u9664\\u65E5\\u671F\\uFF1A\", timeDate), __jsx(\"p\", null, \"\\u91D1\\u989D\\uFF1A\", returnData.amount, \" \\u5143\"), __jsx(\"p\", null, \"\\u884C\\u65B9\\u8D26\\u6237\\uFF1A\", returnData.payChannelName)))));\n}\n\nbody.getInitialProps = async () => {\n  return {};\n};\n\nexport default withRouter(body);","map":null,"metadata":{},"sourceType":"module"}