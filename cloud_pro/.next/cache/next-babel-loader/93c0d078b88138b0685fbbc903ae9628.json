{"ast":null,"code":"import \"antd/lib/table/style\";\nimport _Table from \"antd/lib/table\";\nimport \"antd/lib/card/style\";\nimport _Card from \"antd/lib/card\";\nimport \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/input/style\";\nimport _Input from \"antd/lib/input\";\nimport \"antd/lib/select/style\";\nimport _Select from \"antd/lib/select\";\nimport \"antd/lib/form/style\";\nimport _Form from \"antd/lib/form\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Layout } from '~/components/Layout';\nimport React, { useEffect, useState } from 'react';\nimport apiPay from '~/api/pay';\nimport apiAccount from '~/api/accounting';\nimport { useCookies } from 'react-cookie';\nconst pageParams = {\n  pageNo: 1,\n  pageSize: 10,\n  status: 1\n};\n\nconst getData = async (params = pageParams) => {\n  try {\n    let {\n      data: {\n        code,\n        data\n      }\n    } = await apiPay.getPayChannelList(params);\n\n    if (code == 0) {\n      return data;\n    }\n\n    return [];\n  } catch (e) {\n    return [];\n  }\n};\n\nconst breadcrumbs = [{\n  text: '支付管理'\n}, {\n  text: '支付通道列表'\n}];\n\nconst Search = props => {\n  const [form] = _Form.useForm();\n\n  const onSearch = () => {\n    props.search(form.getFieldsValue());\n  };\n\n  return __jsx(_Card, {\n    style: {\n      marginBottom: 30\n    }\n  }, __jsx(_Form, {\n    form: form,\n    initialValues: {\n      payChannelCode: null\n    },\n    name: \"search\",\n    layout: \"inline\"\n  }, __jsx(_Form.Item, {\n    name: \"payChannelCode\",\n    label: \"\\u652F\\u4ED8\\u901A\\u9053\"\n  }, __jsx(_Select, {\n    style: {\n      width: '150px'\n    }\n  }, __jsx(_Select.Option, {\n    value: null\n  }, \"\\u5168\\u90E8\"), props.channels.map((v, i) => __jsx(_Select.Option, {\n    key: i,\n    value: v.code\n  }, v.description)))), __jsx(_Form.Item, {\n    name: \"merchantId\",\n    label: \"\\u8D26\\u53F7\"\n  }, __jsx(_Input, {\n    placeholder: \"\\u8D26\\u53F7\",\n    style: {\n      width: 180\n    }\n  })), __jsx(_Form.Item, null, __jsx(_Button, {\n    type: \"primary\",\n    onClick: onSearch\n  }, \"\\u67E5\\u8BE2\"))));\n};\n\nfunction body(props) {\n  const {\n    0: data,\n    1: setData\n  } = useState(props.data);\n  const {\n    0: searchParams,\n    1: setSearchParams\n  } = useState({});\n  const {\n    0: channels,\n    1: setChannels\n  } = useState([]);\n  const {\n    0: company,\n    1: setCompany\n  } = useState([]);\n  const [cookies] = useCookies(['tenantId']);\n  useEffect(() => {\n    getDict('FUND_PAY_CHANNEL_MODE_CODE', setChannels);\n    getDict('FUND_COMPANY_CODE', setCompany); // fetchProductList()\n  }, []);\n\n  const getDict = async (type, func) => {\n    try {\n      const {\n        data\n      } = await apiAccount.get_data_dict(type);\n\n      if (data.code == 0) {\n        func(data.data);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const onSearch = params => {\n    setSearchParams(params);\n    pageParams.pageNo = 1;\n    updateList(_objectSpread(_objectSpread({}, params), pageParams));\n  };\n\n  const onChangePage = (pageNo = pageParams.pageNo) => {\n    pageParams.pageNo = pageNo;\n    updateList(_objectSpread(_objectSpread({}, searchParams), pageParams));\n  };\n\n  const updateList = async params => {\n    let data = await getData(_objectSpread({}, params));\n    setData(data);\n  };\n\n  const getByDict = (val, list) => {\n    const item = list.find(v => v.code == val);\n    return item && item.description || '';\n  };\n\n  const columns = [{\n    title: '支付通道',\n    dataIndex: 'payChannelCode',\n    render: t => {\n      return getByDict(t, channels);\n    }\n  }, {\n    title: '账号',\n    dataIndex: 'merchantId'\n  }, {\n    title: '接入主体',\n    dataIndex: 'companyCode',\n    render: t => {\n      return getByDict(t, company);\n    }\n  }].map(v => {\n    v.align = 'center';\n    return v;\n  });\n  const paginationConfig = {\n    total: data.total,\n    current: pageParams.pageNo,\n    showSizeChanger: false,\n    showQuickJumper: true,\n    defaultPageSize: pageParams.pageSize,\n    showTotal: total => `共 ${total} 条`,\n    onChange: onChangePage\n  };\n  return __jsx(Layout, {\n    breadcrumbs: breadcrumbs\n  }, __jsx(Search, {\n    channels: channels,\n    search: onSearch\n  }), __jsx(_Table, {\n    bordered: true,\n    rowKey: \"id\",\n    pagination: paginationConfig,\n    columns: columns,\n    dataSource: data.list || []\n  }));\n}\n\nbody.getInitialProps = async () => {\n  pageParams.pageNo = 1;\n  let data = await getData();\n  return {\n    data\n  };\n};\n\nexport default body;","map":null,"metadata":{},"sourceType":"module"}