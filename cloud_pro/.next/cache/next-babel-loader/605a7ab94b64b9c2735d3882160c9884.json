{"ast":null,"code":"import \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/breadcrumb/style\";\nimport _Breadcrumb from \"antd/lib/breadcrumb\";\nimport \"antd/lib/layout/style\";\nimport _Layout from \"antd/lib/layout\";\nimport \"antd/lib/tabs/style\";\nimport _Tabs from \"antd/lib/tabs\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect } from 'react';\nimport Router from 'next/router';\nimport nextId from 'react-id-generator';\nimport Link from 'next/link';\nimport { useRouter } from 'next/router';\nimport Sider from './Sider';\nimport { useContext, useState } from 'react';\nimport { Context } from '~/pages/_app';\nimport Header from './Header';\nimport styles from './Layout.less';\nimport NextNProgress from '../NextNProgress';\nconst {\n  TabPane\n} = _Tabs;\nconst {\n  Content\n} = _Layout;\nexport const TabContext = React.createContext();\nlet newTabIndex = 1;\n\nconst useTabs = children => {\n  const {\n    0: activeKey,\n    1: setActiveKey\n  } = useState(0);\n  const {\n    0: panes,\n    1: setPanes\n  } = useState([{\n    title: 'main',\n    content: children,\n    key: 0\n  }]);\n  useEffect(() => {\n    setPanes([{\n      title: 'main',\n      content: children,\n      key: 0\n    }]);\n    setActiveKey(0);\n  }, [children]);\n  const actions = {\n    push(content) {\n      const key = newTabIndex++;\n      setPanes([...panes, {\n        title: 'child',\n        content,\n        key\n      }]);\n      setActiveKey(key);\n    },\n\n    pop() {\n      if (panes.length === 1) return;\n      setPanes([...panes.slice(0, panes.length - 1)]);\n      setActiveKey(panes[0].key);\n    }\n\n  };\n  return [panes, activeKey, actions];\n};\n\nexport const CommonLayout = props => {\n  const {\n    breadcrumbs\n  } = props;\n  const {\n    0: collapsed,\n    1: setCollapsed\n  } = useState(false);\n  const [panes, activeKey, actions] = useTabs(props.children);\n\n  const onCollapseChange = collapsed => {\n    setCollapsed(collapsed);\n  };\n\n  return __jsx(_Layout, {\n    style: {\n      background: '#FFFFFF'\n    }\n  }, __jsx(NextNProgress, null), __jsx(Header, {\n    fixed: true\n    /* collapsed={collapsed} */\n    ,\n    onCollapseChange: onCollapseChange\n  }), __jsx(_Layout, null, __jsx(Sider, {\n    collapsed: collapsed\n  }), __jsx(\"div\", {\n    className: styles.wrap\n  }, __jsx(TabContext.Provider, {\n    value: actions\n  }, __jsx(_Tabs, {\n    renderTabBar: () => __jsx(\"div\", null),\n    activeKey: activeKey + ''\n  }, panes.map(pane => __jsx(TabPane, {\n    tab: pane.title,\n    key: pane.key\n  }, __jsx(\"div\", {\n    className: styles.container,\n    id: \"primaryLayout\"\n  }, React.cloneElement(pane.content, _objectSpread({\n    activeKey,\n    isFocus: activeKey === 0\n  }, actions))))))))));\n};\n\nconst body = props => {\n  const {\n    breadcrumbs,\n    extra,\n    hideTitle = false\n  } = props;\n  const router = useRouter();\n\n  const onBack = () => {\n    router.back();\n  };\n\n  return __jsx(Content, {\n    style: props.style,\n    className: styles.content\n  }, breadcrumbs && __jsx(_Breadcrumb, {\n    style: {\n      marginBottom: '17px'\n    }\n  }, breadcrumbs.map((breadcrumb, index) => __jsx(_Breadcrumb.Item, {\n    key: index\n  }, breadcrumb.path ? __jsx(Link, {\n    href: {\n      pathname: breadcrumb.path\n    }\n  }, __jsx(\"a\", {\n    style: {\n      color: '#333'\n    }\n  }, breadcrumb.text)) : breadcrumb.text))), __jsx(\"div\", {\n    className: styles.titleBar\n  }, __jsx(\"h1\", null, Array.isArray(breadcrumbs) && !hideTitle && breadcrumbs[breadcrumbs.length - 1].text), extra ? extra : Array.isArray(breadcrumbs) && breadcrumbs.length >= 3 && breadcrumbs[breadcrumbs.length - 2].path && __jsx(_Button, {\n    onClick: onBack\n  }, \"\\u8FD4\\u56DE\\u4E0A\\u4E00\\u9875\")), props.children);\n};\n\nexport default body;","map":null,"metadata":{},"sourceType":"module"}