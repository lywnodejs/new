{"ast":null,"code":"import \"antd/lib/space/style\";\nimport _Space from \"antd/lib/space\";\nimport \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/select/style\";\nimport _Select from \"antd/lib/select\";\nimport \"antd/lib/input/style\";\nimport _Input from \"antd/lib/input\";\nimport \"antd/lib/form/style\";\nimport _Form from \"antd/lib/form\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Layout } from '~/components/Layout';\nimport React, { useEffect, useState } from 'react';\nimport TableList from './TableList';\nimport apiRisk from '~/api/riskWarning';\nimport apiAccounting from '~/api/accounting';\nconst breadcrumbs = [{\n  text: '风险预警管理'\n}, {\n  text: '风险预警列表'\n}];\nconst pageParams = {\n  page: 1,\n  pageSize: 10\n};\nlet values = {};\n\nfunction body() {\n  const [form] = _Form.useForm();\n\n  const {\n    0: list,\n    1: setList\n  } = useState([]);\n  const {\n    0: totalNum,\n    1: setTotalNum\n  } = useState([]);\n  const {\n    0: accountList,\n    1: setAccountList\n  } = useState([]);\n  useEffect(() => {\n    fetchRisksList();\n    fetchAccount();\n  }, []);\n\n  const fetchRisksList = async (values = {}) => {\n    try {\n      const {\n        data: {\n          data,\n          code\n        }\n      } = await apiRisk.fetch_riskList(_objectSpread(_objectSpread({}, pageParams), values));\n\n      if (code == 0) {\n        setList(data.list);\n        setTotalNum(data.size);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const onSearch = async value => {\n    console.log(value);\n    values = value;\n    pageParams.page = 1;\n    fetchRisksList(_objectSpread({}, values));\n  };\n\n  const onReset = () => {\n    form.resetFields();\n    onSearch({});\n  };\n\n  const onPage = async () => {\n    fetchRisksList(values);\n  };\n\n  const fetchAccount = async () => {\n    try {\n      const {\n        data: {\n          data,\n          code\n        }\n      } = await apiAccounting.get_data_dict('DECISION_WARN_TYPE');\n\n      if (code == 0) {\n        setAccountList(data);\n        console.log(data);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return __jsx(Layout, {\n    breadcrumbs: breadcrumbs\n  }, __jsx(_Space, {\n    direction: \"vertical\",\n    size: \"large\",\n    style: {\n      width: '100%'\n    }\n  }, __jsx(_Form, {\n    form: form,\n    onFinish: onSearch,\n    layout: \"inline\",\n    className: \"searchForm\",\n    initialValues: {\n      queryId: null,\n      result: null\n    }\n  }, __jsx(_Form.Item, {\n    label: \"\\u624B\\u673A\\u53F7\\\\\\u9884\\u8B66\\u7F16\\u53F7\",\n    name: \"queryId\"\n  }, __jsx(_Input, {\n    placeholder: \"\\u8BF7\\u8F93\\u5165\"\n  })), __jsx(_Form.Item, {\n    label: \"\\u9884\\u8B66\\u7ED3\\u679C\",\n    name: \"warnCode\"\n  }, __jsx(_Select, {\n    style: {\n      width: 180\n    }\n  }, __jsx(_Select.Option, {\n    value: null\n  }, \"\\u5168\\u90E8\"), accountList && accountList.map((v, i) => {\n    return __jsx(_Select.Option, {\n      key: i,\n      value: v.code\n    }, v.description);\n  }))), __jsx(_Form.Item, {\n    label: \"\\u7528\\u6237\\u540D\",\n    name: \"realName\"\n  }, __jsx(_Input, {\n    placeholder: \"\\u8BF7\\u8F93\\u5165\"\n  })), __jsx(_Button, {\n    type: \"primary\",\n    htmlType: \"submit\"\n  }, \"\\u67E5\\u8BE2\"), __jsx(_Button, {\n    style: {\n      marginLeft: 15\n    },\n    onClick: onReset\n  }, \"\\u91CD\\u7F6E\")), __jsx(TableList, {\n    list,\n    totalNum,\n    pageParams,\n    onPage\n  })));\n}\n\nexport default body;","map":null,"metadata":{},"sourceType":"module"}