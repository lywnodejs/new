{"ast":null,"code":"import \"antd/lib/card/style\";\nimport _Card from \"antd/lib/card\";\nimport \"antd/lib/table/style\";\nimport _Table from \"antd/lib/table\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport { Layout } from '~/components/Layout';\nimport React, { useEffect, useState } from 'react';\nimport apiReview from '~/api/review';\nimport Router, { withRouter } from 'next/router';\nvar breadcrumbs = [{\n  text: '信审管理'\n}, {\n  text: '审核列表'\n}, {\n  text: '授信详情页'\n}, {\n  text: '风控决策详情'\n}];\n\nfunction body(props) {\n  var _useState = useState([]),\n      list = _useState[0],\n      setList = _useState[1];\n\n  useEffect(function () {\n    creditDetail();\n  }, []);\n\n  var creditDetail = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _yield$apiReview$fetc, _yield$apiReview$fetc2, data, code;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return apiReview.fetch_risk_peopleDetail({\n                orderId: props.router.query.orderId,\n                name: props.router.query.name,\n                idCard: props.router.query.idCard,\n                mobile: props.router.query.mobile,\n                userType: props.router.query.userType\n              });\n\n            case 3:\n              _yield$apiReview$fetc = _context.sent;\n              _yield$apiReview$fetc2 = _yield$apiReview$fetc.data;\n              data = _yield$apiReview$fetc2.data;\n              code = _yield$apiReview$fetc2.code;\n\n              if (code == 0) {\n                setList(data);\n              }\n\n              _context.next = 13;\n              break;\n\n            case 10:\n              _context.prev = 10;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 10]]);\n    }));\n\n    return function creditDetail() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var columns = [{\n    title: '执行案件做出执行依据的机构',\n    dataIndex: 'basiccourt',\n    key: 'basiccourt',\n    width: 180\n  }, {\n    title: '失信被执行人行为具体情形',\n    dataIndex: 'concretesituation',\n    key: 'concretesituation',\n    width: 180\n  }, {\n    title: '失信案件执行法院',\n    dataIndex: 'court',\n    key: 'court',\n    width: 180\n  }, {\n    title: '失信案件发生时间',\n    dataIndex: 'datatime',\n    key: 'datatime',\n    width: 180\n  }, {\n    title: '失信案件执行类型',\n    dataIndex: 'datatype',\n    key: 'datatype',\n    width: 180\n  }, {\n    title: '执行案件执行法院',\n    dataIndex: 'execCourt',\n    key: 'execCourt',\n    width: 180\n  }, {\n    title: '执行案件立案时间',\n    dataIndex: 'execDatatime',\n    key: 'execDatatime',\n    width: 180\n  }, {\n    title: '执行案件类型',\n    dataIndex: 'execDatatype',\n    key: 'execDatatype',\n    width: 180\n  }, {\n    title: '执行案件标的',\n    dataIndex: 'execMoney',\n    key: 'execMoney',\n    width: 180\n  }, {\n    title: '失信案件执行标的',\n    dataIndex: 'money',\n    key: 'money',\n    width: 180\n  }, {\n    title: '失信案件生效法律文书确定的义务',\n    dataIndex: 'obligation',\n    key: 'obligation',\n    width: 180\n  }, {\n    title: '失信案件被执行人的履行情况',\n    dataIndex: 'performance',\n    key: 'performance',\n    width: 180\n  }, {\n    title: '执行案件状态',\n    dataIndex: 'statute',\n    key: 'statute',\n    width: 180\n  }];\n  return __jsx(Layout, {\n    isGray: true,\n    breadcrumbs: breadcrumbs\n  }, __jsx(_Card, null, __jsx(_Table, {\n    columns: columns,\n    dataSource: list,\n    rowKey: function rowKey(record) {\n      return record.execMoney + Math.random();\n    }\n  })));\n}\n\nbody.getInitialProps = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n  return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          return _context2.abrupt(\"return\", {});\n\n        case 1:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _callee2);\n}));\nexport default withRouter(body);","map":null,"metadata":{},"sourceType":"module"}