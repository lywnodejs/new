{"ast":null,"code":"import \"antd/lib/modal/style\";\nimport _Modal from \"antd/lib/modal\";\nimport \"antd/lib/input-number/style\";\nimport _InputNumber from \"antd/lib/input-number\";\nimport \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/select/style\";\nimport _Select from \"antd/lib/select\";\nimport \"antd/lib/message/style\";\nimport _message from \"antd/lib/message\";\nimport \"antd/lib/form/style\";\nimport _Form from \"antd/lib/form\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { useEffect, useState } from 'react';\nimport { useCookies } from 'react-cookie';\nimport api from '~/api/collection';\nimport TreeMembers from './TreeMembers';\nconst layout = {\n  labelCol: {\n    span: 4\n  },\n  wrapperCol: {\n    span: 20\n  }\n};\nconst tailLayout = {\n  wrapperCol: {\n    offset: 4,\n    span: 20\n  }\n};\n\nfunction BatchedAssignModal(props) {\n  const {\n    visible,\n    onHide,\n    total,\n    pullData,\n    tenantId,\n    productList,\n    collectionLevels,\n    onSearch,\n    sourceCom,\n    onAssignSubmit\n  } = props;\n  const {\n    0: pids,\n    1: setPids\n  } = useState([]);\n  const {\n    0: accountIds,\n    1: setAccountIds\n  } = useState([]);\n  const {\n    0: accountNames,\n    1: setAccountNames\n  } = useState([]);\n  const {\n    0: companyIds,\n    1: setCompanyIds\n  } = useState([]);\n\n  const [batchedAssignModal] = _Form.useForm();\n\n  useEffect(() => {\n    async function fetchData() {\n      console.log(productList);\n    }\n\n    visible && fetchData();\n  }, [visible]);\n\n  const onEdit = async () => {\n    try {\n      const values = await batchedAssignModal.validateFields();\n      console.log(pids);\n\n      if (pids.length) {\n        const pidSource = Math.max.apply(null, pids);\n        const pidTarget = Math.min.apply(null, pids);\n\n        if (pidSource !== pidTarget) {\n          return _message.error('分配对象需同一岗位级别');\n        }\n      }\n\n      if (!values.sendOrderNum && values.sendOrderNum != 0) {\n        return _message.error('分配数量未填写');\n      }\n\n      if (!accountIds.length) {\n        return _message.error(`请选择要分配的${onAssignSubmit && sourceCom != 'cs' ? '信审员' : sourceCom == 'cs' ? '所选人数' : '催收员'}`);\n      }\n\n      if (values.sendOrderNum < 1 || values.sendOrderNum > total) {\n        return _message.error('分配数量须大于0小于总订单数');\n      }\n\n      if (onAssignSubmit) {\n        typeof onAssignSubmit === 'function' && onAssignSubmit({\n          accountIds,\n          accountNames,\n          assignType: 2,\n          sendOrderNum: values.sendOrderNum,\n          productId: values.productId\n        });\n        return;\n      }\n\n      const {\n        data: {\n          data,\n          code\n        }\n      } = await api.edit_overdueAlloc_allselect({\n        type: 2,\n        collectionOrderIdList: null,\n        accountIdList: accountIds,\n        accountNameList: accountNames,\n        companyIdList: companyIds,\n        productId: values.productId,\n        sendOrderNum: values.sendOrderNum,\n        collectionLevel: values.collectionLevel,\n        tenantId\n      });\n\n      if (code == 0) {\n        onHide();\n\n        _message.success('按量分配成功');\n\n        pullData();\n      }\n    } catch (errorInfo) {\n      console.log('Failed:', errorInfo);\n    }\n  };\n\n  const changeProductId = val => {\n    batchedAssignModal.setFieldsValue('productId', val);\n  };\n\n  const changeCollectionLevel = val => {\n    batchedAssignModal.setFieldsValue('collectionLevel', val);\n  };\n\n  const onAllSearch = async () => {\n    const values = await batchedAssignModal.validateFields();\n    onSearch(values);\n  };\n\n  return __jsx(_Modal, {\n    title: \"\\u6309\\u91CF\\u5206\\u914D\",\n    maskClosable: false,\n    visible: visible,\n    onOk: onEdit,\n    onCancel: onHide,\n    cancelText: \"\\u53D6\\u6D88\",\n    okText: \"\\u786E\\u5B9A\",\n    forceRender: true,\n    width: 600,\n    destroyOnClose: true\n  }, __jsx(_Form, _extends({}, layout, {\n    form: batchedAssignModal,\n    name: \"batchedAssignModal\",\n    initialValues: {\n      productId: '',\n      collectionLevel: ''\n    }\n  }), __jsx(_Form.Item, {\n    label: \"\\u4EA7\\u54C1\",\n    name: \"productId\",\n    rules: [{\n      required: true,\n      message: '请先选择产品'\n    }]\n  }, __jsx(_Select, {\n    onChange: val => changeProductId(val),\n    placeholder: \"\\u8BF7\\u9009\\u62E9\"\n  }, __jsx(_Select.Option, {\n    value: \"\"\n  }, \"\\u8BF7\\u9009\\u62E9\"), productList.map((v, i) => __jsx(_Select.Option, {\n    key: i,\n    value: v.id\n  }, v.name)))), !onAssignSubmit && __jsx(_Form.Item, {\n    label: \"\\u50AC\\u6536\\u7EA7\\u522B\",\n    name: \"collectionLevel\",\n    rules: [{\n      required: true,\n      message: '请先选择催收级别'\n    }]\n  }, __jsx(_Select, {\n    onChange: val => changeCollectionLevel(val),\n    placeholder: \"\\u8BF7\\u9009\\u62E9\"\n  }, __jsx(_Select.Option, {\n    value: \"\"\n  }, \"\\u8BF7\\u9009\\u62E9\"), collectionLevels.map((v, i) => __jsx(_Select.Option, {\n    key: i,\n    value: v.code\n  }, v.description)))), __jsx(_Form.Item, tailLayout, __jsx(_Button, {\n    type: \"primary\",\n    style: {\n      marginRight: 15\n    },\n    onClick: onAllSearch\n  }, \"\\u603B\\u5355\\u6570\\u67E5\\u8BE2\"), __jsx(\"span\", null, \"\\u5F53\\u524D\\u603B\\u5355\\u6570\\uFF1A\", total)), __jsx(_Form.Item, {\n    label: \"\\u5206\\u914D\\u6570\\u91CF\",\n    name: \"sendOrderNum\"\n  }, __jsx(_InputNumber, {\n    style: {\n      width: '100%'\n    },\n    min: 0,\n    max: total,\n    placeholder: \"\\u8BF7\\u8F93\\u5165\\u6574\\u6570\\uFF0C\\u4E0D\\u5F97\\u8D85\\u8FC7\\u603B\\u5355\\u6570\"\n  })), __jsx(_Form.Item, {\n    label: \"\\u4EBA\\u5458\"\n  }, __jsx(TreeMembers, {\n    onSetPids: payload => setPids(payload),\n    onSetAccountIds: payload => setAccountIds(payload),\n    onSetAccountNames: payload => setAccountNames(payload),\n    onSetCompanyIds: payload => setCompanyIds(payload)\n  }))));\n}\n\nexport default BatchedAssignModal;","map":null,"metadata":{},"sourceType":"module"}