{"ast":null,"code":"import \"antd/lib/modal/style\";\nimport _Modal from \"antd/lib/modal\";\nimport \"antd/lib/input-number/style\";\nimport _InputNumber from \"antd/lib/input-number\";\nimport \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/select/style\";\nimport _Select from \"antd/lib/select\";\nimport \"antd/lib/message/style\";\nimport _message from \"antd/lib/message\";\nimport \"antd/lib/form/style\";\nimport _Form from \"antd/lib/form\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { useEffect, useState } from 'react';\nimport { useCookies } from 'react-cookie';\nimport api from '~/api/collection';\nconst layout = {\n  labelCol: {\n    span: 4\n  },\n  wrapperCol: {\n    span: 20\n  }\n};\nconst tailLayout = {\n  wrapperCol: {\n    offset: 4,\n    span: 20\n  }\n};\n\nfunction BatchedAssignModal(props) {\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: visible,\n    1: setVisible\n  } = useState(props.visible);\n\n  const [batchedAssignModal] = _Form.useForm();\n\n  useEffect(() => {\n    setVisible(props.visible);\n\n    if (props.visible) {\n      setLoading(false);\n      batchedAssignModal.resetFields();\n    }\n  }, [props.visible]);\n\n  const onEdit = async () => {\n    try {\n      const values = await batchedAssignModal.validateFields();\n      console.log(values);\n      let params = {\n        collectionOrderIdList: null,\n        accountIdList: [...values.accountIds],\n        accountNameList: [],\n        companyIdList: [1],\n        productId: values.productId,\n        sendOrderNum: values.sendOrderNum,\n        collectionLevel: values.collectionLevel,\n        type: 2\n      };\n      values.accountIds.forEach(id => {\n        let item = props.showList.find(item => item.id == id);\n        params.accountNameList.push(item.accountName);\n      });\n      setLoading(true);\n      props.onOk(params, onFail);\n      return;\n      const {\n        data: {\n          data,\n          code\n        }\n      } = await api.edit_overdueAlloc_allselect({\n        type: 2,\n        collectionOrderIdList: null,\n        accountIdList: accountIds,\n        accountNameList: accountNames,\n        companyIdList: companyIds,\n        productId: values.productId,\n        sendOrderNum: values.sendOrderNum,\n        collectionLevel: values.collectionLevel,\n        tenantId\n      });\n\n      if (code == 0) {\n        onHide();\n\n        _message.success('按量分配成功');\n\n        pullData();\n      }\n    } catch (errorInfo) {\n      console.log('Failed:', errorInfo);\n    }\n  };\n\n  const onFail = () => {\n    setLoading(false);\n  };\n\n  const onAllSearch = async () => {\n    const values = await batchedAssignModal.validateFields(['productId', 'collectionLevel']);\n    props.onSearch(values);\n  };\n\n  return __jsx(_Modal, {\n    title: \"\\u6309\\u91CF\\u5206\\u914D\",\n    visible: visible,\n    onOk: onEdit,\n    onCancel: props.onHide,\n    confirmLoading: loading,\n    cancelText: \"\\u53D6\\u6D88\",\n    okText: \"\\u786E\\u5B9A\",\n    width: 600,\n    destroyOnClose: true\n  }, __jsx(_Form, _extends({}, layout, {\n    form: batchedAssignModal,\n    name: \"batchedAssignModal\",\n    initialValues: {\n      productId: '',\n      collectionLevel: ''\n    }\n  }), __jsx(_Form.Item, {\n    label: \"\\u4EA7\\u54C1\",\n    name: \"productId\",\n    rules: [{\n      required: true,\n      message: '请先选择产品'\n    }]\n  }, __jsx(_Select, {\n    placeholder: \"\\u8BF7\\u9009\\u62E9\"\n  }, __jsx(_Select.Option, {\n    value: \"\"\n  }, \"\\u8BF7\\u9009\\u62E9\"), props.productList.map((v, i) => __jsx(_Select.Option, {\n    key: i,\n    value: v.id\n  }, v.name)))), __jsx(_Form.Item, {\n    label: \"\\u50AC\\u6536\\u7EA7\\u522B\",\n    name: \"collectionLevel\",\n    rules: [{\n      required: true,\n      message: '请先选择催收级别'\n    }]\n  }, __jsx(_Select, {\n    placeholder: \"\\u8BF7\\u9009\\u62E9\"\n  }, __jsx(_Select.Option, {\n    value: \"\"\n  }, \"\\u8BF7\\u9009\\u62E9\"), props.collectionLevels.map((v, i) => __jsx(_Select.Option, {\n    key: i,\n    value: v.code\n  }, v.description)))), __jsx(_Form.Item, tailLayout, __jsx(_Button, {\n    type: \"primary\",\n    style: {\n      marginRight: 15\n    },\n    onClick: onAllSearch\n  }, \"\\u603B\\u5355\\u6570\\u67E5\\u8BE2\"), __jsx(\"span\", null, \"\\u5F53\\u524D\\u603B\\u5355\\u6570\\uFF1A\", props.total)), __jsx(_Form.Item, {\n    label: \"\\u5206\\u914D\\u6570\\u91CF\",\n    name: \"sendOrderNum\",\n    rules: [{\n      required: true,\n      message: '请输入分配数量'\n    }]\n  }, __jsx(_InputNumber, {\n    style: {\n      width: '100%'\n    },\n    min: 1,\n    precision: 0,\n    max: props.total || 1,\n    placeholder: \"\\u8BF7\\u8F93\\u5165\\u6574\\u6570\\uFF0C\\u4E0D\\u5F97\\u8D85\\u8FC7\\u603B\\u5355\\u6570\"\n  })), __jsx(_Form.Item, {\n    label: \"\\u4EBA\\u5458\",\n    rules: [{\n      required: true,\n      message: '请选择分配对象'\n    }],\n    name: \"accountIds\"\n  }, __jsx(_Select, {\n    mode: \"multiple\",\n    style: {\n      width: 450\n    }\n  }, props.showList.map((v, i) => {\n    return __jsx(_Select.Option, {\n      value: v.id,\n      key: i\n    }, v.accountName, \"_\", v.roleName);\n  })))));\n}\n\nexport default BatchedAssignModal;","map":null,"metadata":{},"sourceType":"module"}