{"ast":null,"code":"import \"antd/lib/modal/style\";\nimport _Modal from \"antd/lib/modal\";\nimport \"antd/lib/date-picker/style\";\nimport _DatePicker from \"antd/lib/date-picker\";\nimport \"antd/lib/input/style\";\nimport _Input from \"antd/lib/input\";\nimport \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/message/style\";\nimport _message from \"antd/lib/message\";\nimport \"antd/lib/radio/style\";\nimport _Radio from \"antd/lib/radio\";\nimport \"antd/lib/form/style\";\nimport _Form from \"antd/lib/form\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useEffect, useState, useRef } from 'react';\nimport moment from 'moment';\nimport apicustomer from '~/api/customer';\nconst FormItem = _Form.Item;\nconst RadioGroup = _Radio.Group;\nconst QuotaStatus = {\n  '1': '正常',\n  '2': '冻结'\n};\nlet startTime = new Date().toLocaleDateString();\n\nfunction AdjustmentLimitModal(props) {\n  const [adjustmentForm] = _Form.useForm();\n\n  const {\n    itemList,\n    classificationDoVisble,\n    handleCancelDo,\n    productConversion,\n    disabledDate,\n    onHide,\n    keyId,\n    fetchCustomerDetail\n  } = props;\n  const {\n    0: returnData,\n    1: setReturnData\n  } = useState([]);\n  const {\n    0: confirmModal,\n    1: setConfirmModal\n  } = useState(false);\n  const {\n    0: timeDate,\n    1: setTimeDate\n  } = useState([]);\n  useEffect(() => {\n    adjustmentForm.setFieldsValue(_objectSpread(_objectSpread({}, itemList), {}, {\n      fixedEndDate: moment(itemList.fixedEndDate)\n    }));\n  }, [classificationDoVisble]);\n\n  const onChange = (value, dateString) => {\n    setTimeDate(dateString);\n  };\n\n  const nextStep = async () => {\n    const values = await adjustmentForm.validateFields();\n    setReturnData(values);\n    setConfirmModal(true);\n  };\n\n  const goBack = () => {\n    setConfirmModal(false);\n  };\n\n  const getTargetDate = (startDate, days) => {\n    let startTime = new Date(startDate).getTime();\n    let diff = days * 86400 * 1000;\n    let endTime = startTime + diff;\n    let d = new Date(endTime);\n    let CurrentDate = '';\n    CurrentDate += d.getFullYear(); //var year=(d.getFullYear())+\"-\"+(d.getMonth()+1)+\"-\"+(d.getDate());\n\n    if (d.getMonth() + 1 > 9) {\n      CurrentDate += '-' + (d.getMonth() + 1);\n    } else {\n      CurrentDate += '-0' + (d.getMonth() + 1);\n    }\n\n    if (d.getDate() > 9) {\n      CurrentDate += '-' + d.getDate();\n    } else {\n      CurrentDate += '-0' + d.getDate();\n    }\n\n    return CurrentDate;\n  };\n\n  const subMit = async () => {\n    let postData = {\n      id: itemList.id,\n      fixedLimitAmount: returnData.fixedLimitAmount,\n      fixedEndDate: moment(returnData.fixedEndDate).format('YYYY-MM-DD'),\n      frozenEndType: returnData.frozenEndType,\n      accountStatus: returnData.accountStatus == '正常' ? 1 : 2\n    };\n\n    if (returnData.accountStatus == '冻结' && returnData.frozenEndType == '1') {\n      postData = _objectSpread(_objectSpread({}, postData), {}, {\n        frozenEndDate: Number(returnData.frozenEndDay)\n      });\n    }\n\n    try {\n      const {\n        data: {\n          data,\n          code\n        }\n      } = await apicustomer.update_user_limitAmount(postData);\n\n      if (code == 0) {\n        _message.success('提交成功');\n\n        setConfirmModal(false);\n        onHide();\n        fetchCustomerDetail();\n      }\n    } catch (err) {\n      console.log(err);\n      setConfirmModal(false);\n      onHide();\n    }\n  };\n\n  return __jsx(\"div\", null, __jsx(_Modal, {\n    title: \"\\u8C03\\u6574\\u989D\\u5EA6\",\n    visible: classificationDoVisble,\n    width: 400,\n    onCancel: onHide,\n    footer: [__jsx(_Button, {\n      key: \"back\",\n      onClick: handleCancelDo\n    }, \"\\u53D6\\u6D88\"), __jsx(_Button, {\n      key: \"submit\",\n      type: \"primary\",\n      onClick: nextStep\n    }, \"\\u4E0B\\u4E00\\u6B65\")],\n    getContainer: false\n  }, __jsx(_Form, {\n    name: \"adjustmentForm\",\n    key: Date.now,\n    form: adjustmentForm\n  }, __jsx(FormItem, null, __jsx(\"span\", {\n    style: {\n      fontWeight: 600,\n      fontSize: 18\n    }\n  }, itemList.userName, \"\\xA0\\xA0\\xA0\\xA0\", productConversion(itemList.productId))), __jsx(FormItem, {\n    label: \"\\u6388\\u4FE1\\u989D\\u5EA6\",\n    name: \"fixedLimitAmount\",\n    rules: [{\n      required: true,\n      message: '请输入授信额度'\n    }, ({\n      getFieldValue\n    }) => ({\n      validator(rule, value) {\n        if (value && (Number(value) < 0 || !Number.isInteger(Number(value)))) {\n          return Promise.reject('请输入正整数');\n        }\n\n        return Promise.resolve();\n      }\n\n    })]\n  }, __jsx(_Input, {\n    suffix: \"\\u5143\",\n    width: 50\n  })), __jsx(\"div\", {\n    style: {\n      position: 'relative'\n    }\n  }, __jsx(FormItem, {\n    noStyle: true,\n    shouldUpdate: (prevValues, currentValues) => prevValues.accountStatus !== currentValues.accountStatus\n  }, ({\n    getFieldValue\n  }) => {\n    if (getFieldValue('accountStatus') == '冻结') {\n      return __jsx(FormItem, {\n        label: \"\\u51BB\\u7ED3\\u65F6\\u957F\",\n        name: \"frozenEndType\",\n        style: {\n          marginTop: 20\n        },\n        rules: [{\n          required: true,\n          message: '请选择冻结时长类型'\n        }]\n      }, __jsx(RadioGroup, null, __jsx(_Radio, {\n        value: 1\n      }, \"\\u51BB\\u7ED3\"), __jsx(_Radio, {\n        value: 2,\n        style: {\n          marginLeft: 90\n        }\n      }, \"\\u81F3\\u6709\\u6548\\u671F\")));\n    }\n  }), __jsx(FormItem, {\n    shouldUpdate: (prevValues, currentValues) => prevValues.frozenEndType !== currentValues.frozenEndType || prevValues.accountStatus !== currentValues.accountStatus,\n    style: {\n      position: 'absolute',\n      left: 140,\n      top: 0\n    }\n  }, ({\n    getFieldValue\n  }) => {\n    if (getFieldValue('frozenEndType') == 1 && getFieldValue('accountStatus') == '冻结') {\n      return __jsx(FormItem, {\n        name: \"frozenEndDay\",\n        rules: [{\n          required: true,\n          message: '请填写冻结天数'\n        }, ({\n          getFieldValue\n        }) => ({\n          validator(rule, value) {\n            if (value > 9999999) {\n              return Promise.reject('输入冻结天数过多，请重新输入');\n            }\n\n            if (!Number.isInteger(Number(value)) || Number(value) < 1) {\n              return Promise.reject('冻结天数为正整数，请重新输入');\n            }\n\n            return Promise.resolve();\n          }\n\n        })]\n      }, __jsx(_Input, {\n        style: {\n          width: 80\n        },\n        suffix: \"\\u5929\"\n      }));\n    }\n  }), __jsx(FormItem, {\n    label: \"\\u989D\\u5EA6\\u6709\\u6548\\u671F\",\n    name: \"fixedEndDate\",\n    rules: [{\n      required: true,\n      message: '请选择额度有效期'\n    }]\n  }, __jsx(_DatePicker, {\n    allowClear: true,\n    disabledDate: disabledDate,\n    onChange: onChange\n  }))))), __jsx(_Modal, {\n    title: \"\\u64CD\\u4F5C\\u786E\\u8BA4\",\n    visible: confirmModal,\n    width: 400,\n    onCancel: () => setConfirmModal(false),\n    footer: [__jsx(_Button, {\n      key: \"back\",\n      onClick: goBack\n    }, \"\\u8FD4\\u56DE\\u4FEE\\u6539\"), __jsx(_Button, {\n      key: \"submit\",\n      type: \"primary\",\n      onClick: subMit\n    }, \"\\u786E\\u8BA4\\u63D0\\u4EA4\")]\n  }, __jsx(\"div\", {\n    style: {\n      fontWeight: 600,\n      fontSize: 18\n    }\n  }, itemList.userName, \"\\xA0\\xA0\\xA0\\xA0\", productConversion(itemList.productId)), __jsx(\"div\", {\n    style: {\n      marginTop: 20,\n      fontSize: 18\n    }\n  }, \"\\u6388\\u4FE1\\u989D\\u5EA6\\uFF1A\", returnData.fixedLimitAmount), __jsx(\"div\", {\n    style: {\n      marginTop: 20,\n      fontSize: 18\n    }\n  }, \"\\u989D\\u5EA6\\u6709\\u6548\\u671F: \", moment(returnData.fixedEndDate).format('YYYY-MM-DD'))));\n}\n\nAdjustmentLimitModal.getInitialProps = async () => ({});\n\nexport default AdjustmentLimitModal;","map":null,"metadata":{},"sourceType":"module"}