{"ast":null,"code":"import \"antd/lib/space/style\";\nimport _Space from \"antd/lib/space\";\nimport \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/select/style\";\nimport _Select from \"antd/lib/select\";\nimport \"antd/lib/input/style\";\nimport _Input from \"antd/lib/input\";\nimport \"antd/lib/form/style\";\nimport _Form from \"antd/lib/form\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Layout } from '~/components/Layout';\nimport React, { useEffect, useState } from 'react';\nimport Router from 'next/router';\nimport { useCookies } from 'react-cookie';\nimport api from '~/api/system';\nimport WhiteForm from './whiteForm';\nimport VertifyForm from './vertifyForm';\nimport TableList from './TableList';\nconst breadcrumbs = [{\n  text: '系统设置管理'\n}, {\n  text: '白名单配置'\n}];\nconst pageParams = {\n  page: 1,\n  pageSize: 10\n};\nlet values = {};\n\nfunction body({\n  labels\n}) {\n  const [cookies] = useCookies(['tenantId']);\n\n  const [form] = _Form.useForm();\n\n  const {\n    0: list,\n    1: setList\n  } = useState([]);\n  const {\n    0: visible,\n    1: setVisible\n  } = useState(false);\n  const {\n    0: selectIndex,\n    1: setIndex\n  } = useState(-1);\n  const {\n    0: selectItem,\n    1: setSelectItem\n  } = useState({});\n  const {\n    0: vertifyVisible,\n    1: setVertifyVisible\n  } = useState(false);\n  useEffect(() => {\n    async function fetchData() {\n      fetchList();\n    }\n\n    fetchData();\n  }, []);\n\n  const fetchList = async (values = {}) => {\n    values.label = values.label || null;\n    values.useStatus = values.useStatus || null;\n\n    try {\n      const {\n        data: {\n          data,\n          code\n        }\n      } = await api.fetch_white_list(_objectSpread(_objectSpread({}, pageParams), values));\n\n      if (code == 0) {\n        console.log(data);\n        setList(data);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const onAdd = () => {\n    setIndex(-1);\n    setVisible(true);\n    setSelectItem({});\n  };\n\n  const onReset = () => {\n    form.resetFields();\n  };\n\n  const onSearch = value => {\n    values = value;\n    pageParams.page = 1;\n    fetchList(_objectSpread({}, values));\n  };\n\n  const onPage = async () => {\n    fetchList(values);\n  };\n\n  const onEdit = item => {\n    setIndex(item.id);\n    setVisible(true);\n    setSelectItem(item);\n  };\n\n  const changeStatus = val => {\n    form.setFieldsValue('useStatus', val);\n  };\n\n  const changeLabel = val => {\n    form.setFieldsValue('label', val);\n  };\n\n  const onVertify = item => {\n    setVertifyVisible(true);\n    setSelectItem(item);\n  };\n\n  return __jsx(Layout, {\n    breadcrumbs: breadcrumbs\n  }, __jsx(_Space, {\n    direction: \"vertical\",\n    size: \"large\",\n    style: {\n      width: '100%'\n    }\n  }, __jsx(_Form, {\n    form: form,\n    onFinish: onSearch,\n    layout: \"inline\",\n    className: \"searchForm\",\n    initialValues: {\n      label: '',\n      useStatus: ''\n    }\n  }, __jsx(_Form.Item, {\n    label: \"\\u516C\\u53F8\\u540D\\u79F0\",\n    name: \"companyName\"\n  }, __jsx(_Input, {\n    placeholder: \"\\u8BF7\\u8F93\\u5165\"\n  })), __jsx(_Form.Item, {\n    name: \"label\",\n    label: \"\\u6807\\u7B7E\"\n  }, __jsx(_Select, {\n    style: {\n      width: '130px'\n    },\n    onChange: val => changeLabel(val)\n  }, __jsx(_Select.Option, {\n    value: \"\"\n  }, \"\\u5168\\u90E8\"), labels.map((v, i) => __jsx(_Select.Option, {\n    key: i,\n    value: v.code\n  }, v.description)))), __jsx(_Form.Item, {\n    label: \"\\u72B6\\u6001\",\n    name: \"useStatus\"\n  }, __jsx(_Select, {\n    onChange: val => changeStatus(val),\n    style: {\n      width: '200px'\n    }\n  }, __jsx(_Select.Option, {\n    value: \"\"\n  }, \"\\u5168\\u90E8\"), __jsx(_Select.Option, {\n    value: \"1\"\n  }, \"\\u542F\\u7528\"), __jsx(_Select.Option, {\n    value: \"0\"\n  }, \"\\u505C\\u7528\"), __jsx(_Select.Option, {\n    value: \"2\"\n  }, \"\\u5F85\\u5BA1\\u6838\"))), __jsx(_Button, {\n    type: \"primary\",\n    style: {\n      marginRight: 15\n    },\n    htmlType: \"submit\"\n  }, \"\\u67E5\\u8BE2\"), __jsx(_Button, {\n    style: {\n      marginRight: 15\n    },\n    onClick: onReset\n  }, \"\\u91CD\\u7F6E\"), __jsx(_Button, {\n    type: \"primary\",\n    onClick: onAdd\n  }, \"\\u65B0\\u589E\")), __jsx(TableList, {\n    list,\n    onPage,\n    pageParams,\n    onEdit,\n    onVertify,\n    pullData: onSearch,\n    labels\n  }), __jsx(WhiteForm, {\n    selectIndex: selectIndex,\n    visible: visible,\n    onHide: () => setVisible(false),\n    selectItem: selectItem,\n    pullData: onSearch,\n    labels: labels\n  }), __jsx(VertifyForm, {\n    visible: vertifyVisible,\n    onHide: () => setVertifyVisible(false),\n    selectItem: selectItem,\n    pullData: onSearch\n  })));\n}\n\nbody.getInitialProps = async () => {\n  const backData = {\n    labels: []\n  };\n\n  try {\n    const [{\n      data: {\n        data: labels,\n        code: levelCode\n      }\n    }] = await Promise.all([api.get_data_dict('COMPANY_CONF_LABEL')]);\n\n    if (levelCode == 0) {\n      return {\n        labels: levelCode === 0 ? labels : []\n      };\n    }\n\n    backData.code = code;\n    return backData;\n  } catch (err) {\n    console.log(err);\n    return backData;\n  }\n};\n\nexport default body;","map":null,"metadata":{},"sourceType":"module"}