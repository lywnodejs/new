{"ast":null,"code":"import \"antd/lib/space/style\";\nimport _Space from \"antd/lib/space\";\nimport \"antd/lib/form/style\";\nimport _Form from \"antd/lib/form\";\nimport \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/table/style\";\nimport _Table from \"antd/lib/table\";\nimport \"antd/lib/tabs/style\";\nimport _Tabs from \"antd/lib/tabs\";\nimport \"antd/lib/select/style\";\nimport _Select from \"antd/lib/select\";\nimport \"antd/lib/date-picker/style\";\nimport _DatePicker from \"antd/lib/date-picker\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useEffect, useState, useRef } from 'react';\nimport { Layout } from '~/components/Layout';\nimport moment from 'moment';\nimport { biFetch } from '~/utils/fetch';\nimport { CSVLink } from 'react-csv';\nconst {\n  RangePicker\n} = _DatePicker;\nconst {\n  Option\n} = _Select;\nconst {\n  TabPane\n} = _Tabs;\nconst breadcrumbs = [{\n  text: 'BI报表'\n}, {\n  text: '贷后分析'\n}, {\n  text: '催收报表'\n}];\nconst tabs = ['到期金额', '到期笔数'];\nconst urls = ['/coll/stat/amount', '/coll/stat/count'];\nconst columns = [[{\n  title: '到期日期',\n  dataIndex: 'dueDate',\n  align: 'left',\n  width: 150,\n  fixed: 'left'\n}, {\n  title: '渠道',\n  dataIndex: 'srcChannel',\n  align: 'left',\n  width: 100,\n  fixed: 'left'\n}, {\n  title: '到期本金',\n  dataIndex: 'dueCapitalAmt',\n  align: 'left',\n  width: 100,\n  fixed: 'left'\n}, {\n  title: '入催本金',\n  dataIndex: 'collCapitalAmt',\n  align: 'left',\n  width: 100,\n  fixed: 'left'\n}, {\n  title: '入催率',\n  dataIndex: 'dueCollRate',\n  align: 'left',\n  width: 100,\n  fixed: 'left'\n}, {\n  title: '催回率',\n  dataIndex: 'collBackRate',\n  align: 'left',\n  width: 100,\n  fixed: 'left'\n}, ...[1, 3, 10, 30, 60, 90].map(v => ({\n  title: `${v}日内催回本金`,\n  dataIndex: `collBackAmtDay${v}`,\n  align: 'left',\n  width: 150\n})), ...[1, 3, 10, 30, 60, 90].map(v => ({\n  title: `${v}日催回率`,\n  dataIndex: `collBackRateDay${v}`,\n  align: 'left',\n  width: 120\n}))], [{\n  title: '到期日期',\n  dataIndex: 'dueDate',\n  align: 'left',\n  width: 100,\n  fixed: 'left'\n}, {\n  title: '渠道',\n  dataIndex: 'srcChannel',\n  align: 'left',\n  width: 100,\n  fixed: 'left'\n}, {\n  title: '到期笔数',\n  dataIndex: 'dueCnt',\n  align: 'left',\n  width: 100,\n  fixed: 'left'\n}, {\n  title: '入催笔数',\n  dataIndex: 'collCnt',\n  align: 'left',\n  width: 100,\n  fixed: 'left'\n}, {\n  title: '入催率',\n  dataIndex: 'dueCollRate',\n  align: 'left',\n  width: 100,\n  fixed: 'left'\n}, {\n  title: '催回率',\n  dataIndex: 'collBackRate',\n  align: 'left',\n  width: 100,\n  fixed: 'left'\n}, ...[1, 3, 10, 30, 60, 90].map(v => ({\n  title: `${v}日内催回笔数`,\n  dataIndex: `collBackCntDay${v}`,\n  align: 'left',\n  width: 150\n})), ...[1, 3, 10, 30, 60, 90].map(v => ({\n  title: `${v}日内催回率`,\n  dataIndex: `collBackRateDay${v}`,\n  align: 'left',\n  width: 120\n}))]];\nconst pages = [{\n  pageNo: 1,\n  pageSize: 20\n}, {\n  pageNo: 1,\n  pageSize: 20\n}];\nconst startDate = moment().subtract(7, 'days').format('YYYY-MM-DD');\nconst endDate = moment().subtract(1, 'days').format('YYYY-MM-DD');\n\nconst fetchList = async (url, params) => {\n  for (const [key, value] of Object.entries(params)) {\n    if (!value) {\n      delete params[key];\n    }\n  }\n\n  const startDate = Array.isArray(params.date) ? moment(params.date[0]).format('YYYY-MM-DD') : undefined;\n  const endDate = Array.isArray(params.date) ? moment(params.date[1]).format('YYYY-MM-DD') : undefined;\n  delete params.date;\n  const data = await biFetch(url, _objectSpread({\n    startDate,\n    endDate\n  }, params)); // console.log(data.data, '------------------------')\n\n  return data;\n};\n\nconst TableList = ({\n  onPage,\n  data: {\n    list = [],\n    pageRet = {}\n  },\n  columns = []\n}) => {\n  const onShowSizeChange = (current, size) => {\n    console.log(current, size);\n    pagination.pageSize = size;\n  }; // console.log('list: ', list)\n\n\n  const pagination = {\n    position: 'bottom',\n    total: pageRet.totalCount,\n    pageSize: pages.pageSize,\n    showTotal: total => `共 ${pageRet.totalCount} 条记录`,\n    onChange: onPage,\n    onShowSizeChange\n  };\n  return __jsx(_Table, {\n    rowKey: (v, i) => {\n      return `data-key-${i}`;\n    },\n    dataSource: list,\n    columns: columns,\n    pagination: pagination,\n    scroll: {\n      x: 1500\n    }\n  });\n};\n\nconst DownloadCSV = ({\n  form,\n  tab\n}) => {\n  const csvInstance = useRef();\n  const {\n    0: data,\n    1: setData\n  } = useState({});\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n\n  const onDownload = async () => {\n    setLoading(true);\n    let values = form.getFieldsValue();\n    const {\n      data: {\n        code,\n        data: list\n      }\n    } = await fetchList(urls[tab], values);\n\n    if (code === 0) {\n      setData(list);\n    }\n\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    if (data.list !== undefined && csvInstance.current && csvInstance.current.link) {\n      setTimeout(() => {\n        csvInstance.current.link.click();\n        setData({});\n      });\n    }\n  }, [data]);\n  let headers = columns[tab].map(column => ({\n    label: column.title,\n    key: column.dataIndex\n  }));\n  return __jsx(React.Fragment, null, __jsx(CSVLink, {\n    headers: headers,\n    data: data.list || [],\n    ref: csvInstance\n  }), __jsx(_Button, {\n    loading: loading,\n    type: \"primary\",\n    onClick: onDownload\n  }, \"\\u4E0B\\u8F7D\"));\n};\n\nconst Search = ({\n  onSearch,\n  channels,\n  products,\n  form,\n  fetchList,\n  tab\n}) => {\n  return __jsx(_Form, {\n    layout: \"inline\",\n    form: form,\n    initialValues: {\n      date: [moment(startDate, 'YYYY-MM-DD'), moment(endDate, 'YYYY-MM-DD')],\n      srcCode: '',\n      productId: ''\n    },\n    onFinish: onSearch,\n    className: \"searchForm\"\n  }, __jsx(_Form.Item, _extends({\n    label: \"\\u5230\\u671F\\u65E5\\u671F\",\n    name: \"date\"\n  }, {\n    rules: [{\n      type: 'array',\n      required: true,\n      message: '请选时间!'\n    }]\n  }), __jsx(RangePicker, null)), __jsx(_Form.Item, {\n    label: \"\\u4EA7\\u54C1\",\n    name: \"productId\"\n  }, __jsx(_Select, {\n    style: {\n      width: 120\n    }\n  }, __jsx(_Select.Option, {\n    value: \"\"\n  }, \"\\u5168\\u90E8\"), products.map(v => __jsx(_Select.Option, {\n    key: v.productId,\n    value: v.productId\n  }, v.productName)))), __jsx(_Form.Item, {\n    label: \"\\u8FDB\\u4EF6\\u6E20\\u9053\",\n    name: \"srcCode\"\n  }, __jsx(_Select, {\n    style: {\n      width: 120\n    }\n  }, __jsx(Option, {\n    value: \"\"\n  }, \"\\u5168\\u90E8\"), channels.map(v => __jsx(Option, {\n    key: v.srcCode,\n    value: v.srcCode\n  }, v.name)))), __jsx(_Form.Item, null, __jsx(_Button, {\n    type: \"primary\",\n    htmlType: \"submit\"\n  }, \"\\u67E5\\u8BE2\")), __jsx(_Form.Item, null, __jsx(DownloadCSV, {\n    form,\n    tab\n  })));\n};\n\nconst body = ({\n  list,\n  channels,\n  products\n}) => {\n  const [form] = _Form.useForm();\n\n  let {\n    0: data,\n    1: setData\n  } = useState(list);\n  let {\n    0: tab,\n    1: setTab\n  } = useState(0);\n\n  const onSearch = async values => {\n    const {\n      data: {\n        code,\n        data: result\n      }\n    } = await fetchList(urls[tab], _objectSpread(_objectSpread({}, values), pages[tab]));\n\n    if (code === 0) {\n      let temp = [...data];\n      temp[tab] = result;\n      setData(temp); // console.log(data)\n    }\n  };\n\n  const onTab = i => {\n    setTab(i);\n  };\n\n  useEffect(() => {\n    onSearch(form.getFieldsValue());\n  }, [tab]);\n\n  const onPage = page => {\n    const values = form.getFieldsValue();\n    pages.pageNo = page;\n    onSearch(values);\n  };\n\n  return __jsx(Layout, {\n    breadcrumbs: breadcrumbs\n  }, __jsx(_Space, {\n    direction: \"vertical\",\n    size: \"large\",\n    style: {\n      width: '100%'\n    }\n  }, __jsx(Search, {\n    onSearch,\n    channels,\n    products,\n    form,\n    tab\n  }), __jsx(\"div\", {\n    style: {\n      background: '#fff'\n    }\n  }, __jsx(_Tabs, {\n    tabBarStyle: {\n      paddingLeft: 30\n    },\n    onChange: onTab\n  }, tabs.map((v, i) => __jsx(TabPane, {\n    tab: v,\n    key: i\n  }, __jsx(TableList, {\n    data: data[i],\n    columns: columns[i]\n  })))))));\n};\n\nbody.getInitialProps = async () => {\n  try {\n    const [{\n      data: {\n        code: amountCode,\n        data: amountList = {}\n      }\n    }, {\n      data: {\n        code: countCode,\n        data: countList = {}\n      }\n    }, {\n      data: {\n        data: channels = []\n      }\n    }, {\n      data: {\n        data: products = []\n      }\n    }] = await Promise.all([fetchList(urls[0], _objectSpread({\n      startDate,\n      endDate\n    }, pages[0])), fetchList(urls[1], _objectSpread({\n      startDate,\n      endDate\n    }, pages[1])), biFetch('/common/allChannel'), biFetch('/common/allProduct')]); // console.log(channels)\n\n    return {\n      list: [amountList, countList],\n      channels,\n      products\n    };\n  } catch (e) {\n    console.log(e);\n  }\n\n  return {\n    list: [{}, {}],\n    channels: [],\n    products: []\n  };\n};\n\nexport default body;","map":null,"metadata":{},"sourceType":"module"}