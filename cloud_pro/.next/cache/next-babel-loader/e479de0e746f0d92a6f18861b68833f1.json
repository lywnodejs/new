{"ast":null,"code":"import \"antd/lib/table/style\";\nimport _Table from \"antd/lib/table\";\nimport \"antd/lib/card/style\";\nimport _Card from \"antd/lib/card\";\nimport \"antd/lib/tabs/style\";\nimport _Tabs from \"antd/lib/tabs\";\nimport \"antd/lib/message/style\";\nimport _message from \"antd/lib/message\";\nimport \"antd/lib/form/style\";\nimport _Form from \"antd/lib/form\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Layout } from '~/components/Layout';\nimport React, { useEffect, useState } from 'react';\nimport businessApi from '~/api/business';\nimport proApi from '~/api/product';\nimport SearchForm from './SearchForm';\nimport { useCookies } from 'react-cookie';\nimport moment from 'moment';\nconst pageParams = {\n  pageNo: 1,\n  pageSize: 10\n};\nconst dataType = [{\n  type: '0',\n  key: 'allStatisticsVoList'\n}, {\n  type: '1',\n  key: 'networkStatisticsVoList'\n}, {\n  type: '2',\n  key: 'managerStatisticsVoList'\n}];\n\nconst getData = async (params = pageParams) => {\n  try {\n    let {\n      data: {\n        code,\n        data\n      }\n    } = await businessApi.getTaskList(params);\n\n    if (code == 0) {\n      const item = dataType.find(v => v.type == params.statisticsType);\n      let key = item.key || '';\n      data.list = data.vo[key] || [];\n      return data;\n    }\n\n    return [];\n  } catch (e) {\n    return [];\n  }\n};\n\nconst getInitMouth = () => {\n  const mouth = moment().format('YYYY-MM');\n  return [moment(mouth), moment(mouth)];\n};\n\nconst breadcrumbs = [{\n  text: '客户经理管理'\n}, {\n  text: '任务分配统计'\n}];\nconst columns0 = [{\n  title: '日期',\n  dataIndex: 'dateTime'\n}, {\n  title: '客户经理数量',\n  dataIndex: 'managerCount'\n}, {\n  title: '分配数量',\n  dataIndex: 'distributeCount'\n}, {\n  title: '完成数量',\n  dataIndex: 'finishCount'\n}, {\n  title: '完成度',\n  dataIndex: 'finishRate'\n}].map(v => {\n  v.align = 'center';\n  return v;\n});\nconst columns1 = [{\n  title: '日期',\n  dataIndex: 'dateTime'\n}, {\n  title: '支行代码',\n  dataIndex: 'networkCode'\n}, {\n  title: '网点名称',\n  dataIndex: 'networkName'\n}, {\n  title: '客户经理数量',\n  dataIndex: 'managerCount'\n}, {\n  title: '分配数量',\n  dataIndex: 'distributeCount'\n}, {\n  title: '完成数量',\n  dataIndex: 'finishCount'\n}, {\n  title: '完成度',\n  dataIndex: 'finishRate'\n}].map(v => {\n  v.align = 'center';\n  return v;\n});\nconst columns2 = [{\n  title: '日期',\n  dataIndex: 'dateTime'\n}, {\n  title: '客户经理',\n  dataIndex: 'managerName'\n}, {\n  title: '工号',\n  dataIndex: 'jobNumber'\n}, {\n  title: '所属网点',\n  dataIndex: 'networkName'\n}, {\n  title: '分配数量',\n  dataIndex: 'distributeCount'\n}, {\n  title: '完成数量',\n  dataIndex: 'finishCount'\n}, {\n  title: '完成度',\n  dataIndex: 'finishRate'\n}].map(v => {\n  v.align = 'center';\n  return v;\n});\n\nfunction body(props) {\n  const {\n    0: data,\n    1: setData\n  } = useState(props.data);\n  const {\n    0: searchParams,\n    1: setSearchParams\n  } = useState({});\n  const {\n    0: netWorks,\n    1: setNetWorks\n  } = useState([]);\n  const {\n    0: proList,\n    1: setProList\n  } = useState([]);\n  const {\n    0: activeKey,\n    1: setActiveKey\n  } = useState('0');\n  const [cookies] = useCookies(['name']);\n  const [cookiesTenantId] = useCookies(['tenantId']);\n\n  const [form] = _Form.useForm();\n\n  const {\n    0: branch4search,\n    1: setBranch4search\n  } = useState([]);\n  useEffect(() => {\n    fetchProList();\n    getBranch4search();\n  }, []); // 获取产品\n\n  const fetchProList = async () => {\n    try {\n      const {\n        data: {\n          data,\n          code\n        }\n      } = await proApi.getProduct4search({\n        tenantId: cookiesTenantId.tenantId\n      });\n\n      if (code === 0) {\n        setProList(data);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  }; // 获取网点\n\n\n  const getBranch4search = async () => {\n    let {\n      data: {\n        code,\n        data\n      }\n    } = await businessApi.getBranch4other();\n\n    if (code == 0) {\n      setBranch4search(data || []);\n    }\n  };\n\n  const changeTab = key => {\n    setActiveKey(key);\n    initList(key);\n  };\n\n  const initList = key => {\n    form.resetFields();\n    onSearch(form.getFieldsValue(), key);\n  };\n\n  const onSearch = (params, key) => {\n    let new_params = params == 'export' ? form.getFieldsValue() : params || form.getFieldsValue();\n    pageParams.pageNo = 1;\n\n    if (Array.isArray(new_params.time)) {\n      const format = new_params.reportType == 1 ? 'YYYY-MM' : 'YYYY-MM-DD';\n      new_params.startTime = moment(new_params.time[0]).format(format);\n      new_params.endTime = moment(new_params.time[1]).format(format);\n\n      if (new_params.reportType == 1) {\n        new_params.startTime += '-00';\n        new_params.endTime += '-00';\n      }\n    }\n\n    new_params.statisticsType = key || activeKey;\n    delete new_params.time;\n    setSearchParams(_objectSpread({}, new_params));\n\n    let all_params = _objectSpread(_objectSpread({}, new_params), pageParams);\n\n    if (params == 'export') {\n      downloadData(all_params);\n    } else {\n      updateList(all_params);\n    }\n  };\n\n  const onChangePage = (pageNo = pageParams.pageNo) => {\n    pageParams.pageNo = pageNo;\n    updateList(_objectSpread(_objectSpread({}, searchParams), pageParams));\n  };\n\n  const updateList = async params => {\n    let data = await getData(_objectSpread({}, params));\n    console.log(data);\n    setData(data);\n  };\n\n  const downloadData = async params => {\n    let data = await businessApi.exportTaskData(params);\n\n    if (data.data.code == 0) {\n      if (data.data.data) {\n        window.open(data.data.data);\n      } else {\n        _message.warning('暂无可导出数据');\n      }\n    }\n  };\n\n  const paginationConfig = {\n    total: data.totalSize,\n    current: pageParams.pageNo,\n    showSizeChanger: false,\n    showQuickJumper: true,\n    defaultPageSize: pageParams.pageSize,\n    showTotal: total => `共 ${total} 条`,\n    onChange: onChangePage\n  };\n  return __jsx(Layout, {\n    breadcrumbs: breadcrumbs\n  }, __jsx(_Card, {\n    style: {\n      marginBottom: 25\n    }\n  }, __jsx(_Tabs, {\n    activeKey: activeKey,\n    onChange: changeTab\n  }, __jsx(_Tabs.TabPane, {\n    tab: \"\\u6574\\u4F53\\u7EDF\\u8BA1\",\n    key: \"0\"\n  }), __jsx(_Tabs.TabPane, {\n    tab: \"\\u7F51\\u70B9\\u7EDF\\u8BA1\",\n    key: \"1\"\n  }), __jsx(_Tabs.TabPane, {\n    tab: \"\\u4E2A\\u4EBA\\u7EDF\\u8BA1\",\n    key: \"2\"\n  })), __jsx(SearchForm, {\n    form,\n    netWorks,\n    branch4search,\n    proList,\n    activeKey,\n    onSearch\n  })), activeKey == 0 && __jsx(_Table, {\n    bordered: true,\n    rowKey: \"id\",\n    pagination: paginationConfig,\n    columns: columns0,\n    dataSource: data.list || []\n  }), activeKey == 1 && __jsx(_Table, {\n    bordered: true,\n    rowKey: \"id\",\n    pagination: paginationConfig,\n    columns: columns1,\n    dataSource: data.list || []\n  }), activeKey == 2 && __jsx(_Table, {\n    bordered: true,\n    rowKey: \"id\",\n    pagination: paginationConfig,\n    columns: columns2,\n    dataSource: data.list || []\n  }));\n}\n\nbody.getInitialProps = async () => {\n  // statisticsType 统计类型(0:整体统计；1:网点统计；2:个人统计)\n  // reportType 报表类型(0:日报表；1:月报表；2:统计报表)\n  const initParams = _objectSpread(_objectSpread({}, pageParams), {}, {\n    statisticsType: 0,\n    reportType: 1,\n    startTime: moment().format('YYYY-MM') + '-00',\n    endTime: moment().format('YYYY-MM') + '-00'\n  });\n\n  let data = await getData(initParams);\n  return {\n    data\n  };\n};\n\nexport default body;","map":null,"metadata":{},"sourceType":"module"}