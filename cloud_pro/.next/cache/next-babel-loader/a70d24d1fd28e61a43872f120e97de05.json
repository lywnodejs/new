{"ast":null,"code":"import \"antd/lib/layout/style\";\nimport _Layout from \"antd/lib/layout\";\nimport \"antd/lib/menu/style\";\nimport _Menu from \"antd/lib/menu\";\nvar __jsx = React.createElement;\nimport React, { useContext, Fragment } from 'react';\nimport { Icon as LegacyIcon } from '@ant-design/compatible';\nimport { useRouter } from 'next/router';\nimport Link from 'next/link';\nimport { Context } from '~/pages/_app';\nimport styles from './Sider.less';\nconst {\n  SubMenu\n} = _Menu;\nconst {\n  Header,\n  Content\n} = _Layout;\n\nconst SubMenus = menu => {\n  if (Array.isArray(menu.children) && menu.children.length === 0) {\n    return __jsx(_Menu.Item, {\n      key: menu.pageKey,\n      className: \"first-menu\"\n    }, __jsx(Fragment, null, __jsx(Link, {\n      href: menu.path || ''\n    }, __jsx(\"a\", null, menu.pageName))));\n  }\n\n  return __jsx(SubMenu, {\n    key: menu.pageKey,\n    title: __jsx(Fragment, null, __jsx(\"span\", null, menu.pageName))\n  }, Array.isArray(menu.children) && menu.children.map((v, i) => {\n    if (Array.isArray(v.children) && v.children.length > 0) {\n      return SubMenus(v);\n    }\n\n    return __jsx(_Menu.Item, {\n      key: v.pageKey\n    }, __jsx(Link, {\n      href: v.path || ''\n    }, __jsx(\"a\", null, v.pageName)));\n  }));\n};\n\nlet openKey = [];\n\nconst selectHandler = menus => {\n  const router = useRouter();\n  let selectedKey = [];\n\n  if (menus.length > 0) {\n    openKey = [menus[0].pageKey];\n\n    if (menus[0].path) {\n      selectedKey = [menus[0].pageKey];\n    }\n  } // console.log('menus', menus)\n\n\n  var each = (menus, parent = []) => {\n    menus.forEach(item => {\n      item.path = item.path || '';\n      let pathnameArr = router.pathname.split('/');\n      pathnameArr.pop();\n\n      if (router.asPath.includes('?') && router.asPath.split('?')[0] === item.path || router.asPath === item.path || router.pathname === item.path || item.path && item.path === pathnameArr.join('/') && (router.pathname.includes('/form') || router.pathname.includes('/add') || router.pathname.includes('/detail'))) {\n        openKey = [item.pageKey];\n\n        if (!item.children || Array.isArray(item.children) && item.children.length === 0) {\n          selectedKey = [item.pageKey];\n        }\n      }\n\n      Array.isArray(item.children) && item.children.forEach(v => {\n        v.path = v.path || '';\n        let pathnameArr = router.pathname.split('/');\n        pathnameArr.pop();\n\n        if (router.asPath.includes('?') && router.asPath.split('?')[0] === v.path || router.asPath === v.path || router.pathname === v.path || v.path && v.path === pathnameArr.join('/') && (router.pathname.includes('/form') || router.pathname.includes('/add') || router.pathname.includes('/detail'))) {\n          // console.log(router.asPath, v.path, '--------')\n          openKey = [...parent, item.pageKey];\n          selectedKey = [v.pageKey];\n          return;\n        }\n\n        if (Array.isArray(v.children)) {\n          each([v], [item.pageKey]);\n        }\n      });\n    });\n  };\n\n  each(menus);\n\n  if (menus.length > 0 && selectedKey.length === 0) {\n    if (Array.isArray(menus[0].children) && menus[0].children[0] && menus[0].children[0].pageKey) {\n      selectedKey.push(menus[0].children[0].pageKey);\n    }\n  }\n\n  return {\n    selectedKey,\n    openKey\n  };\n};\n\nconst Sider = props => {\n  const {\n    collapsed\n  } = props;\n  const {\n    menu\n  } = useContext(Context);\n  const {\n    selectedKey,\n    openKey\n  } = selectHandler(menu); // console.log(openKey, selectedKey)\n  // console.log(menu)\n\n  return __jsx(_Layout.Sider, {\n    width: 190,\n    breakpoint: \"lg\",\n    trigger: null\n    /* collapsible */\n    ,\n    theme: 'light',\n    collapsed: collapsed,\n    className: styles.sider\n  }, __jsx(\"div\", {\n    className: styles.menuContainer\n  }, __jsx(_Menu, {\n    theme: \"light\",\n    mode: \"inline\",\n    defaultSelectedKeys: selectedKey,\n    defaultOpenKeys: openKey,\n    style: {\n      height: '100%',\n      borderRight: 1\n    }\n  }, menu.map((v, i) => {\n    return SubMenus(v);\n  }))));\n};\n\nexport default Sider;","map":null,"metadata":{},"sourceType":"module"}