{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport \"antd/lib/tree-select/style\";\nimport _TreeSelect from \"antd/lib/tree-select\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { useEffect, useState } from 'react';\nimport useTransvertMembers from './useTransvertMembers';\nvar SHOW_PARENT = _TreeSelect.SHOW_PARENT;\n\nvar TreeMembers = function TreeMembers(props) {\n  var onSetPids = props.onSetPids,\n      onSetAccountIds = props.onSetAccountIds,\n      onSetAccountNames = props.onSetAccountNames,\n      onSetCompanyIds = props.onSetCompanyIds,\n      isTreeCheckable = props.isTreeCheckable,\n      defaultValue = props.defaultValue,\n      isCollection = props.isCollection;\n\n  var _useState = useState([]),\n      treeData = _useState[0],\n      setTreeData = _useState[1];\n\n  var _useState2 = useState(undefined),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  var data = useTransvertMembers();\n  useEffect(function () {\n    function fetchData() {\n      return _fetchData.apply(this, arguments);\n    }\n\n    function _fetchData() {\n      _fetchData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var accountName;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                setTreeData(data);\n\n                if (defaultValue != undefined) {\n                  accountName = findAccountNameById(data[0]);\n                  setValue(accountName);\n                }\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return _fetchData.apply(this, arguments);\n    }\n\n    Array.isArray(data) && data.length && fetchData();\n  }, [data, defaultValue]);\n\n  var findAccountNameById = function findAccountNameById(data) {\n    var accountName;\n\n    try {\n      var findAccountNameInAll = function findAccountNameInAll(data) {\n        if (data.id == defaultValue) {\n          throw data.accountName;\n        }\n\n        if (Array.isArray(data.children) && data.children.length) {\n          for (var i = 0; i < data.children.length; i++) {\n            if (data.children[i].id == defaultValue) {\n              throw data.children[i].accountName;\n            }\n\n            findAccountNameInAll(data.children[i]);\n          }\n        }\n      };\n\n      findAccountNameInAll(data);\n    } catch (res) {\n      accountName = res;\n    }\n\n    return accountName;\n  };\n\n  var onChange = function onChange(value, label, extra) {\n    setValue(value);\n\n    if (isTreeCheckable == false) {\n      if (isCollection) {\n        return onSetAccountIds(value);\n      }\n\n      if (!extra || !extra.triggerNode) {\n        onSetAccountIds('');\n        return;\n      }\n\n      typeof onSetAccountIds === 'function' && onSetAccountIds(extra.triggerNode.props.id);\n      return;\n    }\n\n    var allCheckedNodes = extra.allCheckedNodes;\n\n    if (allCheckedNodes.length) {\n      var tranverseAllCheckedNodes = function tranverseAllCheckedNodes(nodes) {\n        nodes.forEach(function (one) {\n          console.log(one);\n          var children = one.props.children;\n\n          for (var key in commitDatas) {\n            commitDatas[key].push(one.props[key.slice(0, key.length - 1)]);\n          }\n\n          if (children.length) {\n            tranverseAllCheckedNodes(children);\n          }\n        });\n      };\n\n      var commitDatas = {\n        pids: [],\n        accountNames: [],\n        trueNames: [],\n        companyIds: []\n      };\n      tranverseAllCheckedNodes(allCheckedNodes);\n      console.log(commitDatas); // return\n\n      var pids = commitDatas.pids,\n          accountNames = commitDatas.accountNames,\n          trueNames = commitDatas.trueNames,\n          companyIds = commitDatas.companyIds;\n      typeof onSetPids === 'function' && onSetPids(pids);\n      typeof onSetAccountIds === 'function' && onSetAccountIds(accountNames);\n      typeof onSetAccountNames === 'function' && onSetAccountNames(trueNames);\n      typeof onSetCompanyIds === 'function' && onSetCompanyIds(companyIds);\n    }\n  };\n\n  var tProps = {\n    treeData: treeData,\n    allowClear: true,\n    value: value,\n    onChange: onChange,\n    treeCheckable: isTreeCheckable != undefined ? isTreeCheckable : true,\n    treeCheckStrictly: isTreeCheckable != undefined ? isTreeCheckable : true,\n    treeDefaultExpandAll: true,\n    showArrow: true,\n    showCheckedStrategy: SHOW_PARENT,\n    placeholder: '请选择',\n    style: {\n      width: 150\n    },\n    dropdownStyle: {\n      // width: 'auto',\n      minWidth: 320\n    }\n  };\n  return __jsx(_TreeSelect, tProps);\n};\n\nexport default TreeMembers;","map":null,"metadata":{},"sourceType":"module"}