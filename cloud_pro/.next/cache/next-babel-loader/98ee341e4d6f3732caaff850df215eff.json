{"ast":null,"code":"import \"antd/lib/table/style\";\nimport _Table from \"antd/lib/table\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport \"antd/lib/message/style\";\nimport _message from \"antd/lib/message\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport \"antd/lib/popconfirm/style\";\nimport _Popconfirm from \"antd/lib/popconfirm\";\nimport \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/badge/style\";\nimport _Badge from \"antd/lib/badge\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport Router from 'next/router';\nimport api from '~/api/system';\n\nvar TableList = function TableList(_ref) {\n  var list = _ref.list,\n      onPage = _ref.onPage,\n      onEdit = _ref.onEdit,\n      pullData = _ref.pullData,\n      pageParams = _ref.pageParams,\n      onVertify = _ref.onVertify,\n      labels = _ref.labels;\n\n  var _useState = useState(pageParams.pageSize),\n      pageSize = _useState[0],\n      setPageSize = _useState[1];\n\n  var columns = [{\n    title: '公司名称',\n    dataIndex: 'companyName',\n    key: 'companyName',\n    width: 100\n  }, {\n    title: '标签',\n    dataIndex: 'label',\n    key: 'label',\n    width: 100,\n    render: function render(text, record, index) {\n      var findOne = labels.find(function (item) {\n        return item.code == text;\n      });\n      return findOne ? findOne.description : '';\n    }\n  }, {\n    title: 'IP地址',\n    dataIndex: 'ip',\n    key: 'ip',\n    width: 100\n  }, {\n    title: '状态',\n    dataIndex: 'useStatus',\n    key: 'useStatus',\n    width: 100,\n    render: function render(text, record, index) {\n      return __jsx(React.Fragment, null, __jsx(_Badge, {\n        status: text == 1 ? 'success' : text == 2 ? 'processing' : 'error'\n      }), text == 1 ? '启用' : text == 2 ? '待审核' : '停用');\n    }\n  }, {\n    title: '操作',\n    dataIndex: 'cz',\n    key: 'cz',\n    width: 150,\n    render: function render(text, record, index) {\n      return __jsx(React.Fragment, null, __jsx(_Button, {\n        type: \"link\",\n        onClick: function onClick() {\n          return onEdit(record);\n        }\n      }, \"\\u7F16\\u8F91\"), (record.useStatus == 1 || record.useStatus == 0) && __jsx(_Popconfirm, {\n        title: record.useStatus == 1 ? stopReactElement() : startReactElement(),\n        onConfirm: function onConfirm() {\n          return onSwitchStatus(record);\n        },\n        okText: \"\\u786E\\u5B9A\",\n        cancelText: \"\\u53D6\\u6D88\"\n      }, __jsx(_Button, {\n        type: \"link\"\n      }, record.useStatus == 1 ? '停用' : '启用')), record.useStatus == 2 && __jsx(_Button, {\n        type: \"link\",\n        onClick: function onClick() {\n          return onVertify(record);\n        }\n      }, \"\\u5BA1\\u6838\"));\n    }\n  }];\n\n  var onSwitchStatus = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(item) {\n      var _yield$api$edit_ipcon, data;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return api.edit_ipconfig_one({\n                useStatus: 2,\n                auditStatus: item.useStatus == 1 ? 0 : 1,\n                id: item.id\n              });\n\n            case 3:\n              _yield$api$edit_ipcon = _context.sent;\n              data = _yield$api$edit_ipcon.data;\n\n              if (data.code == 0) {\n                _message.success(\"\\u63D0\\u4EA4\\u6210\\u529F\");\n\n                pullData();\n              }\n\n              _context.next = 11;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](0);\n              console.log('Failed:', _context.t0);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 8]]);\n    }));\n\n    return function onSwitchStatus(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var stopReactElement = function stopReactElement() {\n    return __jsx(React.Fragment, null, __jsx(\"p\", null, \"\\u505C\\u7528\\u8BE5\\u914D\\u7F6E\\u4E48\\uFF1F\"));\n  };\n\n  var startReactElement = function startReactElement() {\n    return __jsx(React.Fragment, null, __jsx(\"p\", null, \"\\u542F\\u7528\\u8BE5\\u914D\\u7F6E\\u4E48\\uFF1F\"), __jsx(\"p\", null, \"\\u786E\\u5B9A\\u540E\\u60A8\\u7684\\u64CD\\u4F5C\\u5C06\\u4F1A\\u88AB\\u5BA1\\u6838\\u3002\"));\n  };\n\n  var onShowSizeChange = function onShowSizeChange(current, pageSize) {\n    pageParams.pageSize = pageSize;\n    setPageSize(pageSize);\n  };\n\n  var pagination = {\n    defaultCurrent: 1,\n    total: list.total,\n    pageSize: pageSize,\n    showQuickJumper: true,\n    showSizeChanger: true,\n    onShowSizeChange: onShowSizeChange,\n    current: pageParams.pageNo,\n    showTotal: function showTotal(total) {\n      return \"\\u5171 \".concat(total, \" \\u6761\\u8BB0\\u5F55\");\n    },\n    onChange: function onChange(pageNumber) {\n      pageParams.pageNo = pageNumber;\n      onPage();\n    }\n  };\n  return __jsx(_Table, {\n    rowKey: \"id\",\n    dataSource: list.list,\n    columns: columns,\n    bordered: true,\n    pagination: pagination,\n    scroll: {\n      y: '100%',\n      x: '100%'\n    }\n  });\n};\n\nexport default TableList;","map":null,"metadata":{},"sourceType":"module"}